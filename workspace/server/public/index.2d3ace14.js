// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"kn9T2":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"786KC"}],"786KC":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"hdge7"}],"hdge7":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"6Oejs":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "4d94d0802d3ace14";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"4aBH6":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$2a8f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$2a8f.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _client = require("react-dom/client");
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _useMediaQuery = require("@mui/material/useMediaQuery");
var _useMediaQueryDefault = parcelHelpers.interopDefault(_useMediaQuery);
var _styles = require("@mui/material/styles");
var _cssBaseline = require("@mui/material/CssBaseline");
var _cssBaselineDefault = parcelHelpers.interopDefault(_cssBaseline);
var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _workerProvider = require("./worker-provider");
var _workerProviderDefault = parcelHelpers.interopDefault(_workerProvider);
var _app = require("./app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _authenticated = require("./authenticated");
var _authenticatedDefault = parcelHelpers.interopDefault(_authenticated);
var _user = require("./store/user");
var _s = $RefreshSig$();
function MainApp(props) {
    _s();
    const { worker  } = props;
    const { user  } = _reactRedux.useSelector(_user.userSelector);
    const [workerReady, setWorkerReady] = _react.useState(false);
    const prefersDarkMode = _useMediaQueryDefault.default("(prefers-color-scheme: dark)");
    const theme = _react.useMemo(()=>_styles.createTheme({
            palette: {
                mode: prefersDarkMode ? "dark" : "light"
            }
        })
    , [
        prefersDarkMode
    ]);
    const onWorkerReady = (msg)=>{
        if (msg.data.ready) {
            setWorkerReady(true);
            _workerProvider.webWorker.removeEventListener("message", onWorkerReady);
        }
    };
    _react.useEffect(()=>{
        _workerProvider.webWorker.addEventListener("message", onWorkerReady);
    }, []);
    if (!workerReady) return null;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_styles.ThemeProvider, {
        theme: theme,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_cssBaselineDefault.default, {}, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 70,
                columnNumber: 7
            }, this),
            user === null ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_appDefault.default, {
                worker: worker
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 72,
                columnNumber: 9
            }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_authenticatedDefault.default, {
                worker: worker
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 74,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/index.tsx",
        lineNumber: 69,
        columnNumber: 5
    }, this);
}
_s(MainApp, "WVXkEmtN03fm8o+3QA0b1VSz+ds=", false, function() {
    return [
        _reactRedux.useSelector,
        _useMediaQueryDefault.default
    ];
});
_c = MainApp;
const root = _client.createRoot(document.querySelector("main"));
root.render(/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactDefault.default.StrictMode, {
    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRedux.Provider, {
        store: _storeDefault.default,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.HashRouter, {
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_workerProviderDefault.default, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_workerProvider.WorkerContext.Consumer, {
                    children: (worker)=>{
                        return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(MainApp, {
                            worker: worker
                        }, void 0, false, {
                            fileName: "src/index.tsx",
                            lineNumber: 88,
                            columnNumber: 22
                        }, undefined);
                    }
                }, void 0, false, {
                    fileName: "src/index.tsx",
                    lineNumber: 86,
                    columnNumber: 11
                }, undefined)
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 85,
                columnNumber: 9
            }, undefined)
        }, void 0, false, {
            fileName: "src/index.tsx",
            lineNumber: 84,
            columnNumber: 7
        }, undefined)
    }, void 0, false, {
        fileName: "src/index.tsx",
        lineNumber: 83,
        columnNumber: 5
    }, undefined)
}, void 0, false, {
    fileName: "src/index.tsx",
    lineNumber: 82,
    columnNumber: 3
}, undefined));
var _c;
$RefreshReg$(_c, "MainApp");

  $parcel$ReactRefreshHelpers$2a8f.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-dom/client":"lOjBx","react-router-dom":"fdOAw","react-redux":"bdVon","@mui/material/useMediaQuery":"eeOzk","@mui/material/styles":"1lzai","@mui/material/CssBaseline":"eRYsJ","./store":"iLHNH","./worker-provider":"9jELS","./app":"41oNQ","./authenticated":"8UrHx","./store/user":"dzJ1K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"iTorj":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-dev-runtime.development.js');

},{"./cjs/react-jsx-dev-runtime.development.js":"48uCM"}],"48uCM":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = '' + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    var jsxDEV$1 = jsxWithValidation;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = jsxDEV$1;
})();

},{"react":"21dqq"}],"21dqq":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"6YvXz"}],"6YvXz":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = '18.0.0-fc46dba67-20220329';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame1 = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame1.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame1.getCurrentStack = null;
    ReactDebugCurrentFrame1.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame1.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame1;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error1("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component1(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component1.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component1.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component1.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component1.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component1.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component1.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error1("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error1("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error1('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape('' + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error('React.Children.only expected to receive a single React element child.');
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error1("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error1("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject1 = payload._result;
            if (moduleObject1 === undefined) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject1);
            if (!('default' in moduleObject1)) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject1);
            return moduleObject1.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error1("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error1("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error1("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error1('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error1('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error1("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error1("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error1("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error1("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error1("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error1('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error1('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error1("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error1("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error1('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error1("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ('require' + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === 'undefined') error1("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error1("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue1 = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue1, resolve, reject);
                        } else resolve(returnValue1);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue1);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error1("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null)
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component1;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"lOjBx":[function(require,module,exports) {
'use strict';
var m = require('react-dom');
var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.createRoot(c, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};
exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.hydrateRoot(c, h, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};

},{"react-dom":"j6uA9"}],"j6uA9":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"3iA9v"}],"3iA9v":[function(require,module,exports) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require('react');
    var Scheduler = require('scheduler');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning('warn', format, args);
        }
    }
    function error1(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning('error', format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // Recoil still uses useMutableSource in www, need to delete
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies1 = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames1 = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies1[registrationName]) error1("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies1[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames1[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames1.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error1("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error1("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error1('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL1(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error1("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL1('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, '' + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL1(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_SCOPE_TYPE = Symbol.for('react.scope');
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
    var REACT_CACHE_TYPE = Symbol.for('react.cache');
    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix1;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix1 === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix1 = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix1 + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return 'Cache';
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + '.Consumer';
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + '.Provider';
            case DehydratedFragment:
                return 'DehydratedFragment';
            case ForwardRef:
                return getWrappedName$1(type, type.render, 'ForwardRef');
            case Fragment:
                return 'Fragment';
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return 'Portal';
            case HostRoot:
                return 'Root';
            case HostText:
                return 'Text';
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return 'StrictMode';
                return 'Mode';
            case OffscreenComponent:
                return 'Offscreen';
            case Profiler:
                return 'Profiler';
            case ScopeComponent:
                return 'Scope';
            case SuspenseComponent:
                return 'Suspense';
            case SuspenseListComponent:
                return 'SuspenseList';
            case TracingMarkerComponent:
                return 'TracingMarker';
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === 'function') return type.displayName || type.name || null;
                if (typeof type === 'string') return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var current1 = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current1 === null) return null;
        var owner = current1._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current1 === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current1);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame1.getCurrentStack = null;
        current1 = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame1.getCurrentStack = getCurrentFiberStackInDev;
        current1 = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
                return value;
            case 'object':
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error1("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error1("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error1("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error1("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error1("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error1("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, 'name');
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === 'string' || typeof child === 'number') return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error1("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error1("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error1("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error1("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error1("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error1("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error1("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error1("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
                if (isArray(children)) {
                    if (children.length > 1) throw new Error('<textarea> can only have at most one child.');
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes1 = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes1.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error1('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error1('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error1('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error1("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
            if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error1("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== 'object') throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        imagesizes: 'imageSizes',
        imagesrcset: 'imageSrcSet',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-description': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error1('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error1('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error1('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error1("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error1("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error1("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error1("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error1("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error1('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error1('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error1("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error1("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error1("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error1("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error1("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error1('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error1("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error1('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error1('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error1("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error1("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error1("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error1("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error1("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== 'function') throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== 'function') throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options1 = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options1, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options1, options1);
        window.removeEventListener('test', options1, options1);
    } catch (e1) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === 'undefined' || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get1(key) {
        return key._reactInternals;
    }
    function has1(key) {
        return key._reactInternals !== undefined;
    }
    function set1(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ Placement | Update;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var HydratingAndUpdate = /*           */ Hydrating | Update;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error1("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get1(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error('Unable to find node on an unmounted component.');
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error('Unable to find node on an unmounted component.');
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error('Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error('Unable to find node on an unmounted component.');
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error1("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error1('React instrumentation encountered an error: %s.', err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === 'function') {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === 'function') try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*            */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                    */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                                 */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                       */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return 'Sync';
        if (lane & InputContinuousHydrationLane) return 'InputContinuousHydration';
        if (lane & InputContinuousLane) return 'InputContinuous';
        if (lane & DefaultHydrationLane) return 'DefaultHydration';
        if (lane & DefaultLane) return 'Default';
        if (lane & TransitionHydrationLane) return 'TransitionHydration';
        if (lane & TransitionLanes) return 'Transition';
        if (lane & RetryLanes) return 'Retry';
        if (lane & SelectiveHydrationLane) return 'SelectiveHydration';
        if (lane & IdleHydrationLane) return 'IdleHydration';
        if (lane & IdleLane) return 'Idle';
        if (lane & OffscreenLane) return 'Offscreen';
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error1('Should have found matching lanes. This is a bug in React.');
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error1('Should have found matching lanes. This is a bug in React.');
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== 0;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === 0) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === 0) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var synchronouslyHydratedEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return synchronouslyHydratedEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber = getInstanceFromNode(blockedOn);
                if (_fiber !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber2 = getInstanceFromNode(nextBlockedOn);
                if (_fiber2 !== null) attemptContinuousHydration(_fiber2);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            // eslint-disable-next-line no-fallthrough
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            // eslint-disable-next-line no-fallthrough
            case 'beforeblur':
            case 'afterblur':
            // eslint-disable-next-line no-fallthrough
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
                return DiscreteEventPriority;
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'toggle':
            case 'touchmove':
            case 'wheel':
            // eslint-disable-next-line no-fallthrough
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
                return ContinuousEventPriority;
            case 'message':
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root1 = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root1 = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root1 = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root1) return root1.value;
        return root1.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style1 = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style1 = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style1) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        'abort',
        'auxClick',
        'cancel',
        'canPlay',
        'canPlayThrough',
        'click',
        'close',
        'contextMenu',
        'copy',
        'cut',
        'drag',
        'dragEnd',
        'dragEnter',
        'dragExit',
        'dragLeave',
        'dragOver',
        'dragStart',
        'drop',
        'durationChange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'gotPointerCapture',
        'input',
        'invalid',
        'keyDown',
        'keyPress',
        'keyUp',
        'load',
        'loadedData',
        'loadedMetadata',
        'loadStart',
        'lostPointerCapture',
        'mouseDown',
        'mouseMove',
        'mouseOut',
        'mouseOver',
        'mouseUp',
        'paste',
        'pause',
        'play',
        'playing',
        'pointerCancel',
        'pointerDown',
        'pointerMove',
        'pointerOut',
        'pointerOver',
        'pointerUp',
        'progress',
        'rateChange',
        'reset',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'submit',
        'suspend',
        'timeUpdate',
        'touchCancel',
        'touchEnd',
        'touchStart',
        'volumeChange',
        'scroll',
        'toggle',
        'touchMove',
        'waiting',
        'wheel'
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
        registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
        registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
        registerSimpleEvent('dblclick', 'onDoubleClick');
        registerSimpleEvent('focusin', 'onFocus');
        registerSimpleEvent('focusout', 'onBlur');
        registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error1('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error1('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== 'selectionchange') {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent('selectionchange', false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies1,
            possibleRegistrationNames: possibleRegistrationNames1
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error1('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error1('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error1("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error1('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error1('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error('Text content does not match server-rendered HTML.');
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error1("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error1("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) // $FlowFixMe - Should be inferred as not undefined.
        {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error1('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error1('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error1("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
            case 'img':
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                if (newProps.autoFocus) domElement.focus();
                return;
            case 'img':
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node) // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== 'head' && parentType !== 'body';
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error1('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
    var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error('getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index1 = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index1 < 0) {
            error1('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index1]) error1('Unexpected Fiber popped.');
        cursor.current = valueStack[index1];
        valueStack[index1] = null;
        fiberStack[index1] = null;
        index1--;
    }
    function push(cursor, value, fiber) {
        index1++;
        valueStack[index1] = cursor.current;
        fiberStack[index1] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged1() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error1("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentNameFromFiber(fiber) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null)
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error1("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error1("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error1("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error1("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error1("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error1("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error1("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // An array of all update queues that received updates during the current
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var interleavedQueues = null;
    function pushInterleavedQueue(queue) {
        if (interleavedQueues === null) interleavedQueues = [
            queue
        ];
        else interleavedQueues.push(queue);
    }
    function enqueueInterleavedUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (interleavedQueues !== null) {
            for(var i = 0; i < interleavedQueues.length; i++){
                var queue = interleavedQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            interleavedQueues = null;
        }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isInterleavedUpdate(fiber)) {
            var interleaved = sharedQueue.interleaved;
            if (interleaved === null) {
                // This is the first update. Create a circular list.
                update.next = update; // At the end of the current render, this queue's interleaved updates will
                // be transferred to the pending queue.
                pushInterleavedQueue(sharedQueue);
            } else {
                update.next = interleaved.next;
                interleaved.next = update;
            }
            sharedQueue.interleaved = update;
        } else {
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update;
        }
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error1("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved)
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback1(callback, context) {
        if (typeof callback !== 'function') throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback1(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error1("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitions(root, fiber, lane);
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error1("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error1("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error1("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error1("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error1("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error1("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error1("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error1("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error1("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error1("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error1("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error1("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error1("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error1("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error1("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error1("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error1("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error1("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error1("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error1("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error1("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error1('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error1("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set1(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error1("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error1("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error1("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error1("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error1("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error1("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged1() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged1() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = '';
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error1("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating1 = false;
    var didSuspend1 = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating1) error1('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
    function markDidSuspendWhileHydratingDEV() {
        didSuspend1 = true;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        hydrationErrors = null;
        didSuspend1 = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        hydrationErrors = null;
        didSuspend1 = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspend1) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating1) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating1 = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating1 = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspend1;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                switch(returnFiber.tag){
                    case HostRoot:
                        var parentContainer = returnFiber.stateNode.containerInfo;
                        didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                        break;
                    case HostComponent:
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;
                        didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, isConcurrentMode);
                        break;
                }
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating1) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating1 = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating1 && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating1 = false;
        didSuspend1 = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating1;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== 'object') throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error1('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error1('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, 'ref');
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== 'string') throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error1("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error1("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== 'function') throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error1("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error1("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error('An iterable object provided no iterator.');
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers1 = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error('Resuming work not yet implemented.');
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes1 = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook1 = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error1("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error1("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error1("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error1("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes1 = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook1 = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook1 !== null && currentHook1.next !== null;
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error1("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook1 === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook1.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook1 = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error('Rendered more hooks than during the previous render.');
            currentHook1 = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook1.memoizedState,
                baseState: currentHook1.baseState,
                baseQueue: currentHook1.baseQueue,
                queue: currentHook1.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        var current = currentHook1; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error1("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes1, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved)
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error1('The result of getServerSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error1('The result of getSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes1)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error1('The result of getSnapshot should be cached to avoid an infinite loop');
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes1)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook1 !== null) {
            var prevEffect = currentHook1.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error1("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$2.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += 'H' + localId.toString(32);
            id += ':';
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            enqueueUpdate$1(fiber, queue, update);
            var eventTime = requestEventTime();
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitionUpdate(root, queue, lane);
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            enqueueUpdate$1(fiber, queue, update);
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var eventTime = requestEventTime();
            var root = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root !== null) entangleTransitionUpdate(root, queue, lane);
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
        if (isInterleavedUpdate(fiber)) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
                // This is the first update. Create a circular list.
                update.next = update; // At the end of the current render, this queue's interleaved updates will
                // be transferred to the pending queue.
                pushInterleavedQueue(queue);
            } else {
                update.next = interleaved.next;
                interleaved.next = update;
            }
            queue.interleaved = update;
        } else {
            var pending = queue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            queue.pending = update;
        }
    }
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error1("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime1 = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime1;
    }
    function recordCommitTime() {
        commitTime1 = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== 'function') // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error1("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || 'Unknown');
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null)
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidSuspendWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(value);
                return;
            }
        }
         // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError(value);
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    function getSuspendedCache() {
        return null;
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent;
    var updateHostText;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
                    warnIfUnhydratedTailNodes(workInProgress);
                    resetHydrationState();
                    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
                    return workInProgress;
                }
                if (nextState !== null && nextState.dehydrated !== null) {
                    // We might be inside a hydration state the first time we're picking up this
                    // Suspense boundary, and also after we've reentered it for further hydration.
                    var _wasHydrated3 = popHydrationState(workInProgress);
                    if (current === null) {
                        if (!_wasHydrated3) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        prepareToHydrateHostSuspenseInstance(workInProgress);
                        bubbleProperties(workInProgress);
                        if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            var isTimedOutSuspense = nextState !== null;
                            if (isTimedOutSuspense) {
                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                                var primaryChildFragment = workInProgress.child;
                                if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                            }
                        }
                        return null;
                    } else {
                        // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                        // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                        resetHydrationState();
                        if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                        workInProgress.memoizedState = null;
                         // If nothing suspended, we need to schedule an effect to mark this boundary
                        // as having hydrated so events know that they're free to be invoked.
                        // It's also a signal to replay events and the suspense callback.
                        // If something suspended, schedule an effect to attach retry listeners.
                        // So we might as well always mark this.
                        workInProgress.flags |= Update;
                        bubbleProperties(workInProgress);
                        if ((workInProgress.mode & ProfileMode) !== NoMode) {
                            var _isTimedOutSuspense = nextState !== null;
                            if (_isTimedOutSuspense) {
                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                                var _primaryChildFragment = workInProgress.child;
                                if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                                workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                            }
                        }
                        return null;
                    }
                } // Successfully completed this tree. If this was a forced client render,
                // there may have been recoverable errors during first hydration
                // attempt. If so, add them to a queue so we can log them in the
                // commit phase.
                upgradeHydrationErrorsToRecoverable();
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current === null) popHydrationState(workInProgress);
                else {
                    var _prevState = current.memoizedState;
                    prevDidTimeout = _prevState !== null;
                }
                // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                if (nextDidTimeout && !prevDidTimeout) {
                    var _offscreenFiber = workInProgress.child;
                    _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                    // in the concurrent tree already suspended during this render.
                    // This is a known bug.
                    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment2 = workInProgress.child;
                        if (_primaryChildFragment2 !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState2 = current.memoizedState;
                    var prevIsHidden = _prevState2 !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes1, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateFragment1(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef$1(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error('Simulated error coming from DevTools');
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error1("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef$1(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error('Should have a current fiber. This is a bug in React.');
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent$1(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef$1(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText$1(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error1("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error1('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error1("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error1('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error1('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache()
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                    if (!didSuspend) return updateDehydratedSuspenseComponent(current, workInProgress, _dehydrated, prevState, renderLanes);
                    else if (workInProgress.flags & ForceClientRender) {
                        // Something errored during hydration. Try again without hydrating.
                        workInProgress.flags &= ~ForceClientRender;
                        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                    } else if (workInProgress.memoizedState !== null) {
                        // Something suspended and we should still be in dehydrated mode.
                        // Leave the existing child in place.
                        workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                        // but the normal suspense pass doesn't.
                        workInProgress.flags |= DidCapture;
                        return null;
                    } else {
                        // Suspended but we should no longer be in dehydrated mode.
                        // Therefore we now have to render the fallback.
                        var _nextPrimaryChildren = nextProps.children;
                        var _nextFallbackChildren = nextProps.fallback;
                        var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                        var _primaryChildFragment2 = workInProgress.child;
                        _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes);
                        workInProgress.memoizedState = SUSPENDED_MARKER;
                        return fallbackChildFragment;
                    }
                }
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers1(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error1("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, suspenseInstance, suspenseState, renderLanes) {
        // We should never be hydrating at this point because it is the first pass,
        // but after we've already committed once.
        warnIfHydrating();
        if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
        // de-opt to client rendering should have an error message.
        null);
        if (isSuspenseInstanceFallback(suspenseInstance)) // This boundary is in a permanent fallback state. In this case, we'll never
        // get an update and we'll never be able to hydrate the final content. Let's just try the
        // client side render instead.
        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // here on the client. Or, in production, a hash/id that corresponds to
        // the error.
        new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
        // any context has changed, we need to treat is as if the input might have changed.
        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
        if (didReceiveUpdate || hasContextChanged) {
            // This boundary has changed since the first render. This means that we are now unable to
            // hydrate it. We might still be able to hydrate it using a higher priority lane.
            var root = getWorkInProgressRoot();
            if (root !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    // Intentionally mutating since this render will get interrupted. This
                    // is one of the very rare times where we mutate the current tree
                    // during the render phase.
                    suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                    var eventTime = NoTimestamp;
                    scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);
                }
            } // If we have scheduled higher pri work above, this will probably just abort the render
            // since we now have higher priority work, but in case it doesn't, we need to prepare to
            // render something, if we time out. Even if that requires us to delete everything and
            // skip hydration.
            // Delay having to do this as long as the suspense timeout allows us.
            renderDidSuspendDelayIfPossible();
            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
        } else if (isSuspenseInstancePending(suspenseInstance)) {
            // This component is still pending more data from the server, so we can't hydrate its
            // content. We treat it as if this component suspended itself. It might seem as if
            // we could just try to render it client-side instead. However, this will perform a
            // lot of unnecessary work and is unlikely to complete since it often will suspend
            // on missing data anyway. Additionally, the server might be able to render more
            // than we can on the client yet. In that case we'd end up with more fallback states
            // on the client than if we just leave it alone. If the server times out or errors
            // these should update this boundary to the permanent Fallback state instead.
            // Mark it as having captured (i.e. suspended).
            workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
            workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
            var retry = retryDehydratedSuspenseBoundary.bind(null, current);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
        } else {
            // This is the first attempt.
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
            var nextProps = workInProgress.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
            // tree is part of a hydrating tree. This is used to determine if a child
            // node has fully mounted yet, and for scheduling event replaying.
            // Conceptually this is similar to Placement in that a new subtree is
            // inserted into the React tree here. It just happens to not need DOM
            // mutations because it already exists.
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error1('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error1('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error1('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error1('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error1('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error1('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';
        if (isAnArray || isIterable) {
            var type = isAnArray ? 'array' : 'iterable';
            error1("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error1('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error1('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged1()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error1("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error1("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    }
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged1() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent$1(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText$1(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment1(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === 'function') error1("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            reportUncaughtErrorInDEV(error);
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error1("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    effect.destroy = create();
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = 'useLayoutEffect';
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = 'useInsertionEffect';
                        else hookName = 'useEffect';
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                        else addendum = ' You returned: ' + destroy;
                        error1("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onPostCommit === 'function') onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === 'function') onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === 'function') safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    var instance = node.stateNode;
                    if (isHidden) hideInstance(instance);
                    else unhideInstance(node.stateNode, node.memoizedProps);
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === 'function') error1("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty('current')) error1("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') {
                if (current.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    currentRef(null);
                } finally{
                    recordLayoutEffectDuration(current);
                }
                else currentRef(null);
            } else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, nearestMountedAncestor) {
        onCommitUnmount(current);
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                var updateQueue = current.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                            if (destroy !== undefined) {
                                if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                else if ((tag & Layout) !== NoFlags$1) {
                                    markComponentLayoutEffectUnmountStarted(current);
                                    if (current.mode & ProfileMode) {
                                        startLayoutEffectTimer();
                                        safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                        recordLayoutEffectDuration(current);
                                    } else safelyCallDestroy(current, nearestMountedAncestor, destroy);
                                    markComponentLayoutEffectUnmountStopped();
                                }
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current, nearestMountedAncestor);
                var instance = current.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);
                return;
            case HostComponent:
                safelyDetachRef(current, nearestMountedAncestor);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current, nearestMountedAncestor);
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root;
        while(true){
            commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (parent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === DehydratedFragment) {
                if (currentParentIsContainer) clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                else clearSuspenseBoundary(currentParent, node.stateNode);
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current, nearestMountedAncestor) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);
        detachFiberMutation(current);
    }
    function commitWork(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all
                // destroy functions for all fibers are called before any create functions.
                // This prevents sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current !== null ? current.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                if (current !== null) {
                    var _prevRootState = current.memoizedState;
                    if (_prevRootState.isDehydrated) {
                        var _root = finishedWork.stateNode;
                        commitHydratedContainer(_root.containerInfo);
                    }
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseCallback(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
        }
        throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error('Expected finished root and lanes to be set. This is a bug in React.');
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
    }
    function commitMutationEffects(root, firstChild, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = firstChild;
        commitMutationEffects_begin(root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitMutationEffects_begin(root, lanes) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization
            var deletions = fiber.deletions;
            if (deletions !== null) for(var i = 0; i < deletions.length; i++){
                var childToDelete = deletions[i];
                try {
                    commitDeletion(root, childToDelete, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(childToDelete, fiber, error);
                }
            }
            var child = fiber.child;
            if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitMutationEffects_complete(root, lanes);
        }
    }
    function commitMutationEffects_complete(root, lanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitMutationEffectsOnFiber(fiber, root, lanes);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        // TODO: The factoring of this phase could probably be improved. Consider
        // switching on the type of work before checking the flags. That's what
        // we do in all the other phases. I think this one is only different
        // because of the shared reconciliation logic below.
        var flags = finishedWork.flags;
        if (flags & ContentReset) commitResetTextContent(finishedWork);
        if (flags & Ref) {
            var current = finishedWork.alternate;
            if (current !== null) commitDetachRef(current);
        }
        if (flags & Visibility) switch(finishedWork.tag){
            case SuspenseComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                if (isHidden) {
                    var _current = finishedWork.alternate;
                    var wasHidden = _current !== null && _current.memoizedState !== null;
                    if (!wasHidden) // TODO: Move to passive phase
                    markCommitTimeOfFallback();
                }
                break;
            case OffscreenComponent:
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var _current2 = finishedWork.alternate;
                var _wasHidden = _current2 !== null && _current2.memoizedState !== null;
                var offscreenBoundary = finishedWork;
                // TODO: This needs to run whenever there's an insertion or update
                // inside a hidden Offscreen tree.
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                if (_isHidden) {
                    if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                            nextEffect = offscreenBoundary;
                            var offscreenChild = offscreenBoundary.child;
                            while(offscreenChild !== null){
                                nextEffect = offscreenChild;
                                disappearLayoutEffects_begin(offscreenChild);
                                offscreenChild = offscreenChild.sibling;
                            }
                        }
                    }
                }
                break;
        }
         // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every possible
        // bitmap value, we remove the secondary effects from the effect tag and
        // switch on that value.
        var primaryFlags = flags & (Placement | Update | Hydrating);
        switch(primaryFlags){
            case Placement:
                commitPlacement(finishedWork); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.
                // TODO: findDOMNode doesn't rely on this any more but isMounted does
                // and isMounted is deprecated anyway so we should be able to kill this.
                finishedWork.flags &= ~Placement;
                break;
            case PlacementAndUpdate:
                // Placement
                commitPlacement(finishedWork); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.
                finishedWork.flags &= ~Placement; // Update
                var _current3 = finishedWork.alternate;
                commitWork(_current3, finishedWork);
                break;
            case Hydrating:
                finishedWork.flags &= ~Hydrating;
                break;
            case HydratingAndUpdate:
                finishedWork.flags &= ~Hydrating; // Update
                var _current4 = finishedWork.alternate;
                commitWork(_current4, finishedWork);
                break;
            case Update:
                var _current5 = finishedWork.alternate;
                commitWork(_current5, finishedWork);
                break;
        }
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                reportUncaughtErrorInDEV(error);
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                ensureCorrectReturnPointer(firstChild, fiber);
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null)
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, fiber.return);
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                ensureCorrectReturnPointer(child, fiber);
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                ensureCorrectReturnPointer(sibling, returnFiber);
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    }
    var didWarnWrongReturnPointer = false;
    function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {
        if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {
            didWarnWrongReturnPointer = true;
            error1("Internal React error: Return pointer is inconsistent with parent.");
        }
        // anything, by checking the warning logs for the above invariant
        fiber.return = expectedReturnFiber;
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error2) {
                    reportUncaughtErrorInDEV(error2);
                    captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    reportUncaughtErrorInDEV(error);
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor('selector.role');
        TEST_NAME_TYPE = symbolFor('selector.test_id');
        TEXT_TYPE = symbolFor('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== 'undefined';
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error1("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress1 = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes1 = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root === null) return null;
         // Mark that the root has a pending update.
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // TODO: Consolidate with `isInterleavedUpdate` check
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
        return root;
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    function isInterleavedUpdate(fiber, lane) {
        return(// Requires some refactoring. Not a big deal though since it's rare for
        // concurrent apps to have more than a single root.
        workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && // then don't treat this as an interleaved update. This pattern is
        // accompanied by a warning but we haven't fully deprecated it yet. We can
        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.
        (executionContext & RenderContext) === NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error1('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if (executionContext === NoContext) // It's only safe to do this conditionally because we always
                // check for pending work before we exit the task.
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error('Root did not complete. This is a bug in React.');
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors);
                break;
            default:
                throw new Error('Unknown root exit status.');
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error('Root did not complete. This is a bug in React.');
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes1, fiber);
        subtreeRenderLanes1 = mergeLanes(subtreeRenderLanes1, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes1 = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress1 !== null) {
            var interruptedWork = workInProgress1.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress1 = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes1 = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        enqueueInterleavedUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress1;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress1 = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress1 === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress1 = erroredWork;
                } else erroredWork = workInProgress1;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress1 !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress1 !== null)performUnitOfWork(workInProgress1);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress1 !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress1 !== null && !shouldYield())performUnitOfWork(workInProgress1);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress1 = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes1);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes1); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress1 = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress1 = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress1 = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress1 = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress1 = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error1("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress1 = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                onRecoverableError(recoverableError);
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Cannot flush passive effects while already rendering.');
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error1("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error1("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current1;
        try {
            setCurrentFiber(fiber);
            error1("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress1 && getComponentNameFromFiber(workInProgress1) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';
                    error1("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error1("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error1("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error1('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {};
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = 'DELETED';
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? 'hydrate()' : 'render()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = '18.0.0-fc46dba67-20220329';
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get1(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get1(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw new Error('Unable to find node on an unmounted component.');
            else {
                var keys = Object.keys(component).join(',');
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current1;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error1("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error1("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current1 !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error1("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current1) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error1("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        var root = scheduleUpdateOnFiber(current$1, lane, eventTime);
        if (root !== null) entangleTransitions(root, current$1, lane);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                var eventTime = requestEventTime();
                flushSync(function() {
                    return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current1;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === 'function' ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console['error'](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error('Cannot update an unmounted root.');
        if (typeof arguments[1] === 'function') error1("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error1("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== 'undefined') error1("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error1("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error1("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error('createRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
            else if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error1("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error('hydrateRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error1("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error1("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error1("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error1("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error1("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate1(element, container, callback) {
        error1("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render1(element, container, callback) {
        error1("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error1("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error('Target container is not a DOM element.');
        if (parentComponent == null || !has1(parentComponent)) throw new Error('parentComponent must be a valid React Component');
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error1("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error('Target container is not a DOM element.');
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint) error1('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint) error1('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error1("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate1;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render1;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"react":"21dqq","scheduler":"juvHo"}],"juvHo":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"RqdIf"}],"RqdIf":[function(require,module,exports) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime1 = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime1;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime1 = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === 'function') // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== 'undefined') {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"fdOAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryRouter", ()=>_reactRouter.MemoryRouter
);
parcelHelpers.export(exports, "Navigate", ()=>_reactRouter.Navigate
);
parcelHelpers.export(exports, "NavigationType", ()=>_reactRouter.NavigationType
);
parcelHelpers.export(exports, "Outlet", ()=>_reactRouter.Outlet
);
parcelHelpers.export(exports, "Route", ()=>_reactRouter.Route
);
parcelHelpers.export(exports, "Router", ()=>_reactRouter.Router
);
parcelHelpers.export(exports, "Routes", ()=>_reactRouter.Routes
);
parcelHelpers.export(exports, "UNSAFE_LocationContext", ()=>_reactRouter.UNSAFE_LocationContext
);
parcelHelpers.export(exports, "UNSAFE_NavigationContext", ()=>_reactRouter.UNSAFE_NavigationContext
);
parcelHelpers.export(exports, "UNSAFE_RouteContext", ()=>_reactRouter.UNSAFE_RouteContext
);
parcelHelpers.export(exports, "createPath", ()=>_reactRouter.createPath
);
parcelHelpers.export(exports, "createRoutesFromChildren", ()=>_reactRouter.createRoutesFromChildren
);
parcelHelpers.export(exports, "generatePath", ()=>_reactRouter.generatePath
);
parcelHelpers.export(exports, "matchPath", ()=>_reactRouter.matchPath
);
parcelHelpers.export(exports, "matchRoutes", ()=>_reactRouter.matchRoutes
);
parcelHelpers.export(exports, "parsePath", ()=>_reactRouter.parsePath
);
parcelHelpers.export(exports, "renderMatches", ()=>_reactRouter.renderMatches
);
parcelHelpers.export(exports, "resolvePath", ()=>_reactRouter.resolvePath
);
parcelHelpers.export(exports, "useHref", ()=>_reactRouter.useHref
);
parcelHelpers.export(exports, "useInRouterContext", ()=>_reactRouter.useInRouterContext
);
parcelHelpers.export(exports, "useLocation", ()=>_reactRouter.useLocation
);
parcelHelpers.export(exports, "useMatch", ()=>_reactRouter.useMatch
);
parcelHelpers.export(exports, "useNavigate", ()=>_reactRouter.useNavigate
);
parcelHelpers.export(exports, "useNavigationType", ()=>_reactRouter.useNavigationType
);
parcelHelpers.export(exports, "useOutlet", ()=>_reactRouter.useOutlet
);
parcelHelpers.export(exports, "useOutletContext", ()=>_reactRouter.useOutletContext
);
parcelHelpers.export(exports, "useParams", ()=>_reactRouter.useParams
);
parcelHelpers.export(exports, "useResolvedPath", ()=>_reactRouter.useResolvedPath
);
parcelHelpers.export(exports, "useRoutes", ()=>_reactRouter.useRoutes
);
parcelHelpers.export(exports, "BrowserRouter", ()=>BrowserRouter
);
parcelHelpers.export(exports, "HashRouter", ()=>HashRouter
);
parcelHelpers.export(exports, "Link", ()=>Link
);
parcelHelpers.export(exports, "NavLink", ()=>NavLink
);
parcelHelpers.export(exports, "createSearchParams", ()=>createSearchParams
);
parcelHelpers.export(exports, "unstable_HistoryRouter", ()=>HistoryRouter
);
parcelHelpers.export(exports, "useLinkClickHandler", ()=>useLinkClickHandler
);
parcelHelpers.export(exports, "useSearchParams", ()=>useSearchParams
);
/**
 * React Router DOM v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ var _react = require("react");
var _history = require("history");
var _reactRouter = require("react-router");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const _excluded = [
    "onClick",
    "reloadDocument",
    "replace",
    "state",
    "target",
    "to"
], _excluded2 = [
    "aria-current",
    "caseSensitive",
    "className",
    "end",
    "style",
    "to",
    "children"
];
function warning(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== "undefined") console.warn(message);
        try {
            // Welcome to debugging React Router!
            //
            // This error is thrown as a convenience so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message); // eslint-disable-next-line no-empty
        } catch (e) {}
    }
} ////////////////////////////////////////////////////////////////////////////////
// COMPONENTS
////////////////////////////////////////////////////////////////////////////////
/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */ function BrowserRouter(_ref) {
    let { basename , children , window  } = _ref;
    let historyRef = _react.useRef();
    if (historyRef.current == null) historyRef.current = _history.createBrowserHistory({
        window
    });
    let history = historyRef.current;
    let [state, setState] = _react.useState({
        action: history.action,
        location: history.location
    });
    _react.useLayoutEffect(()=>history.listen(setState)
    , [
        history
    ]);
    return /*#__PURE__*/ _react.createElement(_reactRouter.Router, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */ function HashRouter(_ref2) {
    let { basename , children , window  } = _ref2;
    let historyRef = _react.useRef();
    if (historyRef.current == null) historyRef.current = _history.createHashHistory({
        window
    });
    let history = historyRef.current;
    let [state, setState] = _react.useState({
        action: history.action,
        location: history.location
    });
    _react.useLayoutEffect(()=>history.listen(setState)
    , [
        history
    ]);
    return /*#__PURE__*/ _react.createElement(_reactRouter.Router, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * to note that using your own history object is highly discouraged and may add
 * two versions of the history library to your bundles unless you use the same
 * version of the history library that React Router uses internally.
 */ function HistoryRouter(_ref3) {
    let { basename , children , history  } = _ref3;
    const [state, setState] = _react.useState({
        action: history.action,
        location: history.location
    });
    _react.useLayoutEffect(()=>history.listen(setState)
    , [
        history
    ]);
    return /*#__PURE__*/ _react.createElement(_reactRouter.Router, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
HistoryRouter.displayName = "unstable_HistoryRouter";
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
/**
 * The public API for rendering a history-aware <a>.
 */ const Link = /*#__PURE__*/ _react.forwardRef(function LinkWithRef(_ref4, ref) {
    let { onClick , reloadDocument , replace =false , state , target , to  } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded);
    let href = _reactRouter.useHref(to);
    let internalOnClick = useLinkClickHandler(to, {
        replace,
        state,
        target
    });
    function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented && !reloadDocument) internalOnClick(event);
    }
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/anchor-has-content
    _react.createElement("a", _extends({}, rest, {
        href: href,
        onClick: handleClick,
        ref: ref,
        target: target
    })));
});
Link.displayName = "Link";
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */ const NavLink = /*#__PURE__*/ _react.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let { "aria-current": ariaCurrentProp = "page" , caseSensitive =false , className: classNameProp = "" , end =false , style: styleProp , to , children  } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);
    let location = _reactRouter.useLocation();
    let path = _reactRouter.useResolvedPath(to);
    let locationPathname = location.pathname;
    let toPathname = path.pathname;
    if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let ariaCurrent = isActive ? ariaCurrentProp : undefined;
    let className;
    if (typeof classNameProp === "function") className = classNameProp({
        isActive
    });
    else // If the className prop is not a function, we use a default `active`
    // class for <NavLink />s that are active. In v5 `active` was the default
    // value for `activeClassName`, but we are removing that API and can still
    // use the old default behavior for a cleaner upgrade path and keep the
    // simple styling rules working as they currently do.
    className = [
        classNameProp,
        isActive ? "active" : null
    ].filter(Boolean).join(" ");
    let style = typeof styleProp === "function" ? styleProp({
        isActive
    }) : styleProp;
    return /*#__PURE__*/ _react.createElement(Link, _extends({}, rest, {
        "aria-current": ariaCurrent,
        className: className,
        ref: ref,
        style: style,
        to: to
    }), typeof children === "function" ? children({
        isActive
    }) : children);
});
NavLink.displayName = "NavLink";
// HOOKS
////////////////////////////////////////////////////////////////////////////////
/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */ function useLinkClickHandler(to, _temp) {
    let { target , replace: replaceProp , state  } = _temp === void 0 ? {} : _temp;
    let navigate = _reactRouter.useNavigate();
    let location = _reactRouter.useLocation();
    let path = _reactRouter.useResolvedPath(to);
    return _react.useCallback((event)=>{
        if (event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event) // Ignore clicks with modifier keys
        ) {
            event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of
            // a push, so do the same here.
            let replace = !!replaceProp || _reactRouter.createPath(location) === _reactRouter.createPath(path);
            navigate(to, {
                replace,
                state
            });
        }
    }, [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to
    ]);
}
/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */ function useSearchParams(defaultInit) {
    warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
    let defaultSearchParamsRef = _react.useRef(createSearchParams(defaultInit));
    let location = _reactRouter.useLocation();
    let searchParams1 = _react.useMemo(()=>{
        let searchParams = createSearchParams(location.search);
        for (let key of defaultSearchParamsRef.current.keys())if (!searchParams.has(key)) defaultSearchParamsRef.current.getAll(key).forEach((value)=>{
            searchParams.append(key, value);
        });
        return searchParams;
    }, [
        location.search
    ]);
    let navigate = _reactRouter.useNavigate();
    let setSearchParams = _react.useCallback((nextInit, navigateOptions)=>{
        navigate("?" + createSearchParams(nextInit), navigateOptions);
    }, [
        navigate
    ]);
    return [
        searchParams1,
        setSearchParams
    ];
}
/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */ function createSearchParams(init) {
    if (init === void 0) init = "";
    return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key)=>{
        let value = init[key];
        return memo.concat(Array.isArray(value) ? value.map((v)=>[
                key,
                v
            ]
        ) : [
            [
                key,
                value
            ]
        ]);
    }, []));
}

},{"react":"21dqq","history":"iE5Zp","react-router":"btA8E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iE5Zp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Action", ()=>Action
);
parcelHelpers.export(exports, "createBrowserHistory", ()=>createBrowserHistory
);
parcelHelpers.export(exports, "createHashHistory", ()=>createHashHistory
);
parcelHelpers.export(exports, "createMemoryHistory", ()=>createMemoryHistory
);
parcelHelpers.export(exports, "createPath", ()=>createPath
);
parcelHelpers.export(exports, "parsePath", ()=>parsePath
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
/**
 * Actions represent the type of change to a location value.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#action
 */ var Action;
(function(Action1) {
    /**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */ Action1["Pop"] = "POP";
    /**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */ Action1["Push"] = "PUSH";
    /**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */ Action1["Replace"] = "REPLACE";
})(Action || (Action = {}));
var readOnly = function(obj) {
    return Object.freeze(obj);
};
function warning(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== 'undefined') console.warn(message);
        try {
            // Welcome to debugging history!
            //
            // This error is thrown as a convenience so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message); // eslint-disable-next-line no-empty
        } catch (e) {}
    }
}
var BeforeUnloadEventType = 'beforeunload';
var HashChangeEventType = 'hashchange';
var PopStateEventType = 'popstate';
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */ function createBrowserHistory(options) {
    if (options === void 0) options = {};
    var _options = options, _options$window = _options.window, window = _options$window === void 0 ? document.defaultView : _options$window;
    var globalHistory = window.history;
    function getIndexAndLocation() {
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var state = globalHistory.state || {};
        return [
            state.idx,
            readOnly({
                pathname: pathname,
                search: search,
                hash: hash,
                state: state.usr || null,
                key: state.key || 'default'
            })
        ];
    }
    var blockedPopTx = null;
    function handlePop() {
        if (blockedPopTx) {
            blockers.call(blockedPopTx);
            blockedPopTx = null;
        } else {
            var nextAction = Action.Pop;
            var _getIndexAndLocation = getIndexAndLocation(), nextIndex = _getIndexAndLocation[0], nextLocation = _getIndexAndLocation[1];
            if (blockers.length) {
                if (nextIndex != null) {
                    var delta = index1 - nextIndex;
                    if (delta) {
                        // Revert the POP
                        blockedPopTx = {
                            action: nextAction,
                            location: nextLocation,
                            retry: function retry() {
                                go(delta * -1);
                            }
                        };
                        go(delta);
                    }
                } else warning(false, // detail and link to it here so people can understand better what
                // is going on and how to avoid it.
                "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation.");
            } else applyTx(nextAction);
        }
    }
    window.addEventListener(PopStateEventType, handlePop);
    var action1 = Action.Pop;
    var _getIndexAndLocation2 = getIndexAndLocation(), index1 = _getIndexAndLocation2[0], location1 = _getIndexAndLocation2[1];
    var listeners = createEvents();
    var blockers = createEvents();
    if (index1 == null) {
        index1 = 0;
        globalHistory.replaceState(_extendsDefault.default({}, globalHistory.state, {
            idx: index1
        }), '');
    }
    function createHref(to) {
        return typeof to === 'string' ? to : createPath(to);
    } // state defaults to `null` because `window.history.state` does
    function getNextLocation(to, state) {
        if (state === void 0) state = null;
        return readOnly(_extendsDefault.default({
            pathname: location1.pathname,
            hash: '',
            search: ''
        }, typeof to === 'string' ? parsePath(to) : to, {
            state: state,
            key: createKey()
        }));
    }
    function getHistoryStateAndUrl(nextLocation, index) {
        return [
            {
                usr: nextLocation.state,
                key: nextLocation.key,
                idx: index
            },
            createHref(nextLocation)
        ];
    }
    function allowTx(action, location, retry) {
        return !blockers.length || (blockers.call({
            action: action,
            location: location,
            retry: retry
        }), false);
    }
    function applyTx(nextAction) {
        action1 = nextAction;
        var _getIndexAndLocation3 = getIndexAndLocation();
        index1 = _getIndexAndLocation3[0];
        location1 = _getIndexAndLocation3[1];
        listeners.call({
            action: action1,
            location: location1
        });
    }
    function push(to, state) {
        var nextAction = Action.Push;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            push(to, state);
        }
        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index1 + 1), historyState = _getHistoryStateAndUr[0], url = _getHistoryStateAndUr[1]; // TODO: Support forced reloading
            // try...catch because iOS limits us to 100 pushState calls :/
            try {
                globalHistory.pushState(historyState, '', url);
            } catch (error) {
                // They are going to lose state here, but there is no real
                // way to warn them about it since the page will refresh...
                window.location.assign(url);
            }
            applyTx(nextAction);
        }
    }
    function replace(to, state) {
        var nextAction = Action.Replace;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            replace(to, state);
        }
        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index1), historyState = _getHistoryStateAndUr2[0], url = _getHistoryStateAndUr2[1]; // TODO: Support forced reloading
            globalHistory.replaceState(historyState, '', url);
            applyTx(nextAction);
        }
    }
    function go(delta) {
        globalHistory.go(delta);
    }
    var history = {
        get action () {
            return action1;
        },
        get location () {
            return location1;
        },
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        back: function back() {
            go(-1);
        },
        forward: function forward() {
            go(1);
        },
        listen: function listen(listener) {
            return listeners.push(listener);
        },
        block: function block(blocker) {
            var unblock = blockers.push(blocker);
            if (blockers.length === 1) window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
            return function() {
                unblock(); // Remove the beforeunload listener so the document may
                // still be salvageable in the pagehide event.
                // See https://html.spec.whatwg.org/#unloading-documents
                if (!blockers.length) window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
            };
        }
    };
    return history;
}
/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */ function createHashHistory(options) {
    if (options === void 0) options = {};
    var _options2 = options, _options2$window = _options2.window, window = _options2$window === void 0 ? document.defaultView : _options2$window;
    var globalHistory = window.history;
    function getIndexAndLocation() {
        var _parsePath = parsePath(window.location.hash.substr(1)), _parsePath$pathname = _parsePath.pathname, pathname = _parsePath$pathname === void 0 ? '/' : _parsePath$pathname, _parsePath$search = _parsePath.search, search = _parsePath$search === void 0 ? '' : _parsePath$search, _parsePath$hash = _parsePath.hash, hash = _parsePath$hash === void 0 ? '' : _parsePath$hash;
        var state = globalHistory.state || {};
        return [
            state.idx,
            readOnly({
                pathname: pathname,
                search: search,
                hash: hash,
                state: state.usr || null,
                key: state.key || 'default'
            })
        ];
    }
    var blockedPopTx = null;
    function handlePop() {
        if (blockedPopTx) {
            blockers.call(blockedPopTx);
            blockedPopTx = null;
        } else {
            var nextAction = Action.Pop;
            var _getIndexAndLocation4 = getIndexAndLocation(), nextIndex = _getIndexAndLocation4[0], nextLocation = _getIndexAndLocation4[1];
            if (blockers.length) {
                if (nextIndex != null) {
                    var delta = index2 - nextIndex;
                    if (delta) {
                        // Revert the POP
                        blockedPopTx = {
                            action: nextAction,
                            location: nextLocation,
                            retry: function retry() {
                                go(delta * -1);
                            }
                        };
                        go(delta);
                    }
                } else warning(false, // detail and link to it here so people can understand better
                // what is going on and how to avoid it.
                "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation.");
            } else applyTx(nextAction);
        }
    }
    window.addEventListener(PopStateEventType, handlePop); // popstate does not fire on hashchange in IE 11 and old (trident) Edge
    // https://developer.mozilla.org/de/docs/Web/API/Window/popstate_event
    window.addEventListener(HashChangeEventType, function() {
        var _getIndexAndLocation5 = getIndexAndLocation(), nextLocation = _getIndexAndLocation5[1]; // Ignore extraneous hashchange events.
        if (createPath(nextLocation) !== createPath(location2)) handlePop();
    });
    var action2 = Action.Pop;
    var _getIndexAndLocation6 = getIndexAndLocation(), index2 = _getIndexAndLocation6[0], location2 = _getIndexAndLocation6[1];
    var listeners = createEvents();
    var blockers = createEvents();
    if (index2 == null) {
        index2 = 0;
        globalHistory.replaceState(_extendsDefault.default({}, globalHistory.state, {
            idx: index2
        }), '');
    }
    function getBaseHref() {
        var base = document.querySelector('base');
        var href = '';
        if (base && base.getAttribute('href')) {
            var url = window.location.href;
            var hashIndex = url.indexOf('#');
            href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href;
    }
    function createHref(to) {
        return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));
    }
    function getNextLocation(to, state) {
        if (state === void 0) state = null;
        return readOnly(_extendsDefault.default({
            pathname: location2.pathname,
            hash: '',
            search: ''
        }, typeof to === 'string' ? parsePath(to) : to, {
            state: state,
            key: createKey()
        }));
    }
    function getHistoryStateAndUrl(nextLocation, index) {
        return [
            {
                usr: nextLocation.state,
                key: nextLocation.key,
                idx: index
            },
            createHref(nextLocation)
        ];
    }
    function allowTx(action, location, retry) {
        return !blockers.length || (blockers.call({
            action: action,
            location: location,
            retry: retry
        }), false);
    }
    function applyTx(nextAction) {
        action2 = nextAction;
        var _getIndexAndLocation7 = getIndexAndLocation();
        index2 = _getIndexAndLocation7[0];
        location2 = _getIndexAndLocation7[1];
        listeners.call({
            action: action2,
            location: location2
        });
    }
    function push(to, state) {
        var nextAction = Action.Push;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            push(to, state);
        }
        warning(nextLocation.pathname.charAt(0) === '/', "Relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr3 = getHistoryStateAndUrl(nextLocation, index2 + 1), historyState = _getHistoryStateAndUr3[0], url = _getHistoryStateAndUr3[1]; // TODO: Support forced reloading
            // try...catch because iOS limits us to 100 pushState calls :/
            try {
                globalHistory.pushState(historyState, '', url);
            } catch (error) {
                // They are going to lose state here, but there is no real
                // way to warn them about it since the page will refresh...
                window.location.assign(url);
            }
            applyTx(nextAction);
        }
    }
    function replace(to, state) {
        var nextAction = Action.Replace;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            replace(to, state);
        }
        warning(nextLocation.pathname.charAt(0) === '/', "Relative pathnames are not supported in hash history.replace(" + JSON.stringify(to) + ")");
        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr4 = getHistoryStateAndUrl(nextLocation, index2), historyState = _getHistoryStateAndUr4[0], url = _getHistoryStateAndUr4[1]; // TODO: Support forced reloading
            globalHistory.replaceState(historyState, '', url);
            applyTx(nextAction);
        }
    }
    function go(delta) {
        globalHistory.go(delta);
    }
    var history = {
        get action () {
            return action2;
        },
        get location () {
            return location2;
        },
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        back: function back() {
            go(-1);
        },
        forward: function forward() {
            go(1);
        },
        listen: function listen(listener) {
            return listeners.push(listener);
        },
        block: function block(blocker) {
            var unblock = blockers.push(blocker);
            if (blockers.length === 1) window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
            return function() {
                unblock(); // Remove the beforeunload listener so the document may
                // still be salvageable in the pagehide event.
                // See https://html.spec.whatwg.org/#unloading-documents
                if (!blockers.length) window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
            };
        }
    };
    return history;
}
/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#creatememoryhistory
 */ function createMemoryHistory(options) {
    if (options === void 0) options = {};
    var _options3 = options, _options3$initialEntr = _options3.initialEntries, initialEntries = _options3$initialEntr === void 0 ? [
        '/'
    ] : _options3$initialEntr, initialIndex = _options3.initialIndex;
    var entries = initialEntries.map(function(entry) {
        var location = readOnly(_extendsDefault.default({
            pathname: '/',
            search: '',
            hash: '',
            state: null,
            key: createKey()
        }, typeof entry === 'string' ? parsePath(entry) : entry));
        warning(location.pathname.charAt(0) === '/', "Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: " + JSON.stringify(entry) + ")");
        return location;
    });
    var index = clamp(initialIndex == null ? entries.length - 1 : initialIndex, 0, entries.length - 1);
    var action3 = Action.Pop;
    var location3 = entries[index];
    var listeners = createEvents();
    var blockers = createEvents();
    function createHref(to) {
        return typeof to === 'string' ? to : createPath(to);
    }
    function getNextLocation(to, state) {
        if (state === void 0) state = null;
        return readOnly(_extendsDefault.default({
            pathname: location3.pathname,
            search: '',
            hash: ''
        }, typeof to === 'string' ? parsePath(to) : to, {
            state: state,
            key: createKey()
        }));
    }
    function allowTx(action, location, retry) {
        return !blockers.length || (blockers.call({
            action: action,
            location: location,
            retry: retry
        }), false);
    }
    function applyTx(nextAction, nextLocation) {
        action3 = nextAction;
        location3 = nextLocation;
        listeners.call({
            action: action3,
            location: location3
        });
    }
    function push(to, state) {
        var nextAction = Action.Push;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            push(to, state);
        }
        warning(location3.pathname.charAt(0) === '/', "Relative pathnames are not supported in memory history.push(" + JSON.stringify(to) + ")");
        if (allowTx(nextAction, nextLocation, retry)) {
            index += 1;
            entries.splice(index, entries.length, nextLocation);
            applyTx(nextAction, nextLocation);
        }
    }
    function replace(to, state) {
        var nextAction = Action.Replace;
        var nextLocation = getNextLocation(to, state);
        function retry() {
            replace(to, state);
        }
        warning(location3.pathname.charAt(0) === '/', "Relative pathnames are not supported in memory history.replace(" + JSON.stringify(to) + ")");
        if (allowTx(nextAction, nextLocation, retry)) {
            entries[index] = nextLocation;
            applyTx(nextAction, nextLocation);
        }
    }
    function go(delta) {
        var nextIndex = clamp(index + delta, 0, entries.length - 1);
        var nextAction = Action.Pop;
        var nextLocation = entries[nextIndex];
        function retry() {
            go(delta);
        }
        if (allowTx(nextAction, nextLocation, retry)) {
            index = nextIndex;
            applyTx(nextAction, nextLocation);
        }
    }
    var history = {
        get index () {
            return index;
        },
        get action () {
            return action3;
        },
        get location () {
            return location3;
        },
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        back: function back() {
            go(-1);
        },
        forward: function forward() {
            go(1);
        },
        listen: function listen(listener) {
            return listeners.push(listener);
        },
        block: function block(blocker) {
            return blockers.push(blocker);
        }
    };
    return history;
} ////////////////////////////////////////////////////////////////////////////////
// UTILS
////////////////////////////////////////////////////////////////////////////////
function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
}
function promptBeforeUnload(event) {
    // Cancel the event.
    event.preventDefault(); // Chrome (and legacy IE) requires returnValue to be set.
    event.returnValue = '';
}
function createEvents() {
    var handlers = [];
    return {
        get length () {
            return handlers.length;
        },
        push: function push(fn) {
            handlers.push(fn);
            return function() {
                handlers = handlers.filter(function(handler) {
                    return handler !== fn;
                });
            };
        },
        call: function call(arg) {
            handlers.forEach(function(fn) {
                return fn && fn(arg);
            });
        }
    };
}
function createKey() {
    return Math.random().toString(36).substr(2, 8);
}
/**
 * Creates a string URL path from the given pathname, search, and hash components.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createpath
 */ function createPath(_ref) {
    var _ref$pathname = _ref.pathname, pathname = _ref$pathname === void 0 ? '/' : _ref$pathname, _ref$search = _ref.search, search = _ref$search === void 0 ? '' : _ref$search, _ref$hash = _ref.hash, hash = _ref$hash === void 0 ? '' : _ref$hash;
    if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search;
    if (hash && hash !== '#') pathname += hash.charAt(0) === '#' ? hash : '#' + hash;
    return pathname;
}
/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#parsepath
 */ function parsePath(path) {
    var parsedPath = {};
    if (path) {
        var hashIndex = path.indexOf('#');
        if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
        }
        var searchIndex = path.indexOf('?');
        if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
        }
        if (path) parsedPath.pathname = path;
    }
    return parsedPath;
}

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTBFS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"btA8E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NavigationType", ()=>_history.Action
);
parcelHelpers.export(exports, "createPath", ()=>_history.createPath
);
parcelHelpers.export(exports, "parsePath", ()=>_history.parsePath
);
parcelHelpers.export(exports, "MemoryRouter", ()=>MemoryRouter
);
parcelHelpers.export(exports, "Navigate", ()=>Navigate
);
parcelHelpers.export(exports, "Outlet", ()=>Outlet
);
parcelHelpers.export(exports, "Route", ()=>Route
);
parcelHelpers.export(exports, "Router", ()=>Router
);
parcelHelpers.export(exports, "Routes", ()=>Routes
);
parcelHelpers.export(exports, "UNSAFE_LocationContext", ()=>LocationContext
);
parcelHelpers.export(exports, "UNSAFE_NavigationContext", ()=>NavigationContext
);
parcelHelpers.export(exports, "UNSAFE_RouteContext", ()=>RouteContext
);
parcelHelpers.export(exports, "createRoutesFromChildren", ()=>createRoutesFromChildren
);
parcelHelpers.export(exports, "generatePath", ()=>generatePath
);
parcelHelpers.export(exports, "matchPath", ()=>matchPath
);
parcelHelpers.export(exports, "matchRoutes", ()=>matchRoutes
);
parcelHelpers.export(exports, "renderMatches", ()=>renderMatches
);
parcelHelpers.export(exports, "resolvePath", ()=>resolvePath
);
parcelHelpers.export(exports, "useHref", ()=>useHref
);
parcelHelpers.export(exports, "useInRouterContext", ()=>useInRouterContext
);
parcelHelpers.export(exports, "useLocation", ()=>useLocation
);
parcelHelpers.export(exports, "useMatch", ()=>useMatch
);
parcelHelpers.export(exports, "useNavigate", ()=>useNavigate
);
parcelHelpers.export(exports, "useNavigationType", ()=>useNavigationType
);
parcelHelpers.export(exports, "useOutlet", ()=>useOutlet
);
parcelHelpers.export(exports, "useOutletContext", ()=>useOutletContext
);
parcelHelpers.export(exports, "useParams", ()=>useParams
);
parcelHelpers.export(exports, "useResolvedPath", ()=>useResolvedPath
);
parcelHelpers.export(exports, "useRoutes", ()=>useRoutes
);
/**
 * React Router v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ var _history = require("history");
var _react = require("react");
const NavigationContext = /*#__PURE__*/ _react.createContext(null);
NavigationContext.displayName = "Navigation";
const LocationContext = /*#__PURE__*/ _react.createContext(null);
LocationContext.displayName = "Location";
const RouteContext = /*#__PURE__*/ _react.createContext({
    outlet: null,
    matches: []
});
RouteContext.displayName = "Route";
function invariant(cond, message) {
    if (!cond) throw new Error(message);
}
function warning(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== "undefined") console.warn(message);
        try {
            // Welcome to debugging React Router!
            //
            // This error is thrown as a convenience so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message); // eslint-disable-next-line no-empty
        } catch (e) {}
    }
}
const alreadyWarned = {};
function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
        alreadyWarned[key] = true;
        warning(false, message);
    }
}
/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/docs/en/v6/api#generatepath
 */ function generatePath(path, params) {
    if (params === void 0) params = {};
    return path.replace(/:(\w+)/g, (_, key)=>{
        !(params[key] != null) && invariant(false, "Missing \":" + key + "\" param");
        return params[key];
    }).replace(/\/*\*$/, (_)=>params["*"] == null ? "" : params["*"].replace(/^\/*/, "/")
    );
}
/**
 * A RouteMatch contains info about how a route matched a URL.
 */ /**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/docs/en/v6/api#matchroutes
 */ function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) basename = "/";
    let location = typeof locationArg === "string" ? _history.parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) return null;
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for(let i = 0; matches == null && i < branches.length; ++i)matches = matchRouteBranch(branches[i], pathname);
    return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) branches = [];
    if (parentsMeta === void 0) parentsMeta = [];
    if (parentPath === void 0) parentPath = "";
    routes.forEach((route, index)=>{
        let meta = {
            relativePath: route.path || "",
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index,
            route
        };
        if (meta.relativePath.startsWith("/")) {
            !meta.relativePath.startsWith(parentPath) && invariant(false, "Absolute route path \"" + meta.relativePath + "\" nested under path " + ("\"" + parentPath + "\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");
            meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = joinPaths([
            parentPath,
            meta.relativePath
        ]);
        let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the
        // route tree depth-first and child routes appear before their parents in
        // the "flattened" version.
        if (route.children && route.children.length > 0) {
            !(route.index !== true) && invariant(false, "Index routes must not have child routes. Please remove " + ("all child routes from route path \"" + path + "\"."));
            flattenRoutes(route.children, branches, routesMeta, path);
        } // Routes without a path shouldn't ever match by themselves unless they are
        // index routes, so don't add them to the list of possible branches.
        if (route.path == null && !route.index) return;
        branches.push({
            path,
            score: computeScore(path, route.index),
            routesMeta
        });
    });
    return branches;
}
function rankRouteBranches(branches) {
    branches.sort((a, b)=>a.score !== b.score ? b.score - a.score // Higher score first
         : compareIndexes(a.routesMeta.map((meta)=>meta.childrenIndex
        ), b.routesMeta.map((meta)=>meta.childrenIndex
        ))
    );
}
const paramRe = /^:\w+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s)=>s === "*"
;
function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) initialScore += splatPenalty;
    if (index) initialScore += indexRouteValue;
    return segments.filter((s)=>!isSplat(s)
    ).reduce((score, segment)=>score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue)
    , initialScore);
}
function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i)=>n === b[i]
    );
    return siblings ? // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1] : // so they sort equally.
    0;
}
function matchRouteBranch(branch, pathname) {
    let { routesMeta  } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for(let i = 0; i < routesMeta.length; ++i){
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = matchPath({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end
        }, remainingPathname);
        if (!match) return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
            params: matchedParams,
            pathname: joinPaths([
                matchedPathname,
                match.pathname
            ]),
            pathnameBase: normalizePathname(joinPaths([
                matchedPathname,
                match.pathnameBase
            ])),
            route
        });
        if (match.pathnameBase !== "/") matchedPathname = joinPaths([
            matchedPathname,
            match.pathnameBase
        ]);
    }
    return matches;
}
/**
 * A PathPattern is used to match on some portion of a URL pathname.
 */ /**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/docs/en/v6/api#matchpath
 */ function matchPath(pattern, pathname) {
    if (typeof pattern === "string") pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
    };
    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = paramNames.reduce((memo, paramName, index)=>{
        // We need to compute the pathnameBase here using the raw splat value
        // instead of using params["*"] later because it will be decoded then
        if (paramName === "*") {
            let splatValue = captureGroups[index] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
        return memo;
    }, {});
    return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
    };
}
function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) caseSensitive = false;
    if (end === void 0) end = true;
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\"."));
    let paramNames = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
    .replace(/^\/*/, "/") // Make sure it has a leading /
    .replace(/[\\.*+^$?{}|()[\]]/g, "\\$&") // Escape special regex chars
    .replace(/:(\w+)/g, (_, paramName)=>{
        paramNames.push(paramName);
        return "([^\\/]+)";
    });
    if (path.endsWith("*")) {
        paramNames.push("*");
        regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
         : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
    } else regexpSource += end ? "\\/*$" // When matching to the end, ignore trailing slashes
     : // parent routes to matching only their own words and nothing more, e.g. parent
    // route "/home" should not match "/home2".
    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,
    // but do not consume the character in the matched path so they can match against
    // nested paths.
    "(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)";
    let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
    return [
        matcher,
        paramNames
    ];
}
function safelyDecodeURIComponent(value, paramName) {
    try {
        return decodeURIComponent(value);
    } catch (error) {
        warning(false, "The value for the URL param \"" + paramName + "\" will not be decoded because" + (" the string \"" + value + "\" is a malformed URL segment. This is probably") + (" due to a bad percent encoding (" + error + ")."));
        return value;
    }
}
/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/docs/en/v6/api#resolvepath
 */ function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) fromPathname = "/";
    let { pathname: toPathname , search ="" , hash =""  } = typeof to === "string" ? _history.parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
    };
}
function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment)=>{
        if (segment === "..") // Keep the root "" segment so the pathname starts at /
        {
            if (segments.length > 1) segments.pop();
        } else if (segment !== ".") segments.push(segment);
    });
    return segments.length > 1 ? segments.join("/") : "/";
}
function resolveTo(toArg, routePathnames, locationPathname) {
    let to = typeof toArg === "string" ? _history.parsePath(toArg) : toArg;
    let toPathname = toArg === "" || to.pathname === "" ? "/" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the
    // route context. This is explained in `Note on `<Link to>` values` in our
    // migration guide from v5 as a means of disambiguation between `to` values
    // that begin with `/` and those that do not. However, this is problematic for
    // `to` values that do not provide a pathname. `to` can simply be a search or
    // hash string, in which case we should assume that the navigation is relative
    // to the current location's pathname and *not* the route pathname.
    let from;
    if (toPathname == null) from = locationPathname;
    else {
        let routePathnameIndex = routePathnames.length - 1;
        if (toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/"); // Each leading .. segment means "go up one route" instead of "go up one
            // URL segment".  This is a key difference from how <a href> works and a
            // major reason we call this a "to" value instead of a "href".
            while(toSegments[0] === ".."){
                toSegments.shift();
                routePathnameIndex -= 1;
            }
            to.pathname = toSegments.join("/");
        } // If there are more ".." segments than parent routes, resolve relative to
        // the root / URL.
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.
    if (toPathname && toPathname !== "/" && toPathname.endsWith("/") && !path.pathname.endsWith("/")) path.pathname += "/";
    return path;
}
function getToPathname(to) {
    // Empty strings should be treated the same as / paths
    return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? _history.parsePath(to).pathname : to.pathname;
}
function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) return null;
    let nextChar = pathname.charAt(basename.length);
    if (nextChar && nextChar !== "/") // pathname does not start with basename/
    return null;
    return pathname.slice(basename.length) || "/";
}
const joinPaths = (paths)=>paths.join("/").replace(/\/\/+/g, "/")
;
const normalizePathname = (pathname)=>pathname.replace(/\/+$/, "").replace(/^\/*/, "/")
;
const normalizeSearch = (search)=>!search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search
;
const normalizeHash = (hash)=>!hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash
;
/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/docs/en/v6/api#usehref
 */ function useHref(to) {
    !useInRouterContext() && invariant(false, // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component.");
    let { basename , navigator  } = _react.useContext(NavigationContext);
    let { hash , pathname , search  } = useResolvedPath(to);
    let joinedPathname = pathname;
    if (basename !== "/") {
        let toPathname = getToPathname(to);
        let endsWithSlash = toPathname != null && toPathname.endsWith("/");
        joinedPathname = pathname === "/" ? basename + (endsWithSlash ? "/" : "") : joinPaths([
            basename,
            pathname
        ]);
    }
    return navigator.createHref({
        pathname: joinedPathname,
        search,
        hash
    });
}
/**
 * Returns true if this component is a descendant of a <Router>.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext
 */ function useInRouterContext() {
    return _react.useContext(LocationContext) != null;
}
/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/docs/en/v6/api#uselocation
 */ function useLocation() {
    !useInRouterContext() && invariant(false, // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component.");
    return _react.useContext(LocationContext).location;
}
/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype
 */ function useNavigationType() {
    return _react.useContext(LocationContext).navigationType;
}
/**
 * Returns true if the URL for the given "to" value matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * <NavLink>.
 *
 * @see https://reactrouter.com/docs/en/v6/api#usematch
 */ function useMatch(pattern) {
    !useInRouterContext() && invariant(false, // router loaded. We can help them understand how to avoid that.
    "useMatch() may be used only in the context of a <Router> component.");
    let { pathname  } = useLocation();
    return _react.useMemo(()=>matchPath(pattern, pathname)
    , [
        pathname,
        pattern
    ]);
}
/**
 * The interface for the navigate() function returned from useNavigate().
 */ /**
 * Returns an imperative method for changing the location. Used by <Link>s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/docs/en/v6/api#usenavigate
 */ function useNavigate() {
    !useInRouterContext() && invariant(false, // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component.");
    let { basename , navigator  } = _react.useContext(NavigationContext);
    let { matches  } = _react.useContext(RouteContext);
    let { pathname: locationPathname  } = useLocation();
    let routePathnamesJson = JSON.stringify(matches.map((match)=>match.pathnameBase
    ));
    let activeRef = _react.useRef(false);
    _react.useEffect(()=>{
        activeRef.current = true;
    });
    let navigate = _react.useCallback(function(to, options) {
        if (options === void 0) options = {};
        warning(activeRef.current, "You should call navigate() in a React.useEffect(), not when your component is first rendered.");
        if (!activeRef.current) return;
        if (typeof to === "number") {
            navigator.go(to);
            return;
        }
        let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);
        if (basename !== "/") path.pathname = joinPaths([
            basename,
            path.pathname
        ]);
        (!!options.replace ? navigator.replace : navigator.push)(path, options.state);
    }, [
        basename,
        navigator,
        routePathnamesJson,
        locationPathname
    ]);
    return navigate;
}
const OutletContext = /*#__PURE__*/ _react.createContext(null);
/**
 * Returns the context (if provided) for the child route at this level of the route
 * hierarchy.
 * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext
 */ function useOutletContext() {
    return _react.useContext(OutletContext);
}
/**
 * Returns the element for the child route at this level of the route
 * hierarchy. Used internally by <Outlet> to render child routes.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useoutlet
 */ function useOutlet(context) {
    let outlet = _react.useContext(RouteContext).outlet;
    if (outlet) return /*#__PURE__*/ _react.createElement(OutletContext.Provider, {
        value: context
    }, outlet);
    return outlet;
}
/**
 * Returns an object of key/value pairs of the dynamic params from the current
 * URL that were matched by the route path.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useparams
 */ function useParams() {
    let { matches  } = _react.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
}
/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath
 */ function useResolvedPath(to) {
    let { matches  } = _react.useContext(RouteContext);
    let { pathname: locationPathname  } = useLocation();
    let routePathnamesJson = JSON.stringify(matches.map((match)=>match.pathnameBase
    ));
    return _react.useMemo(()=>resolveTo(to, JSON.parse(routePathnamesJson), locationPathname)
    , [
        to,
        routePathnamesJson,
        locationPathname
    ]);
}
/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an <Outlet> to render their child route's
 * element.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useroutes
 */ function useRoutes(routes, locationArg) {
    !useInRouterContext() && invariant(false, // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component.");
    let { matches: parentMatches  } = _react.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    {
        // You won't get a warning about 2 different <Routes> under a <Route>
        // without a trailing *, but this is a best-effort warning anyway since we
        // cannot even give the warning unless they land at the parent route.
        //
        // Example:
        //
        // <Routes>
        //   {/* This route path MUST end with /* because otherwise
        //       it will never match /blog/post/123 */}
        //   <Route path="blog" element={<Blog />} />
        //   <Route path="blog/feed" element={<BlogFeed />} />
        // </Routes>
        //
        // function Blog() {
        //   return (
        //     <Routes>
        //       <Route path="post/:id" element={<Post />} />
        //     </Routes>
        //   );
        // }
        let parentPath = parentRoute && parentRoute.path || "";
        warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ("\"" + parentPathname + "\" (under <Route path=\"" + parentPath + "\">) but the ") + "parent route path has no trailing \"*\". This means if you navigate " + "deeper, the parent won't match anymore and therefore the child " + "routes will never render.\n\n" + ("Please change the parent <Route path=\"" + parentPath + "\"> to <Route ") + ("path=\"" + (parentPath === "/" ? "*" : parentPath + "/*") + "\">."));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? _history.parsePath(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) && invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ("matched by all parent routes. The current pathname base is \"" + parentPathnameBase + "\" ") + ("but pathname \"" + parsedLocationArg.pathname + "\" was given in the `location` prop."));
        location = parsedLocationArg;
    } else location = locationFromContext;
    let pathname = location.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
        pathname: remainingPathname
    });
    warning(parentRoute || matches != null, "No routes matched location \"" + location.pathname + location.search + location.hash + "\" ");
    warning(matches == null || matches[matches.length - 1].route.element !== undefined, "Matched leaf route at location \"" + location.pathname + location.search + location.hash + "\" does not have an element. " + "This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.");
    return _renderMatches(matches && matches.map((match)=>Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: joinPaths([
                parentPathnameBase,
                match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
                parentPathnameBase,
                match.pathnameBase
            ])
        })
    ), parentMatches);
}
function _renderMatches(matches, parentMatches) {
    if (parentMatches === void 0) parentMatches = [];
    if (matches == null) return null;
    return matches.reduceRight((outlet, match, index)=>{
        return /*#__PURE__*/ _react.createElement(RouteContext.Provider, {
            children: match.route.element !== undefined ? match.route.element : outlet,
            value: {
                outlet,
                matches: parentMatches.concat(matches.slice(0, index + 1))
            }
        });
    }, null);
}
/**
 * A <Router> that stores all entries in memory.
 *
 * @see https://reactrouter.com/docs/en/v6/api#memoryrouter
 */ function MemoryRouter(_ref) {
    let { basename , children , initialEntries , initialIndex  } = _ref;
    let historyRef = _react.useRef();
    if (historyRef.current == null) historyRef.current = _history.createMemoryHistory({
        initialEntries,
        initialIndex
    });
    let history = historyRef.current;
    let [state, setState] = _react.useState({
        action: history.action,
        location: history.location
    });
    _react.useLayoutEffect(()=>history.listen(setState)
    , [
        history
    ]);
    return /*#__PURE__*/ _react.createElement(Router, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * Changes the current location.
 *
 * Note: This API is mostly useful in React.Component subclasses that are not
 * able to use hooks. In functional components, we recommend you use the
 * `useNavigate` hook instead.
 *
 * @see https://reactrouter.com/docs/en/v6/api#navigate
 */ function Navigate(_ref2) {
    let { to , replace , state  } = _ref2;
    !useInRouterContext() && invariant(false, // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component.");
    warning(!_react.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
    let navigate = useNavigate();
    _react.useEffect(()=>{
        navigate(to, {
            replace,
            state
        });
    });
    return null;
}
/**
 * Renders the child route's element, if there is one.
 *
 * @see https://reactrouter.com/docs/en/v6/api#outlet
 */ function Outlet(props) {
    return useOutlet(props.context);
}
/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/docs/en/v6/api#route
 */ function Route(_props) {
    invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
}
/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a <Router> directly. Instead, you'll render a
 * router that is more specific to your environment such as a <BrowserRouter>
 * in web browsers or a <StaticRouter> for server rendering.
 *
 * @see https://reactrouter.com/docs/en/v6/api#router
 */ function Router(_ref3) {
    let { basename: basenameProp = "/" , children =null , location: locationProp , navigationType =_history.Action.Pop , navigator , static: staticProp = false  } = _ref3;
    !!useInRouterContext() && invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
    let basename = normalizePathname(basenameProp);
    let navigationContext = _react.useMemo(()=>({
            basename,
            navigator,
            static: staticProp
        })
    , [
        basename,
        navigator,
        staticProp
    ]);
    if (typeof locationProp === "string") locationProp = _history.parsePath(locationProp);
    let { pathname ="/" , search ="" , hash ="" , state =null , key ="default"  } = locationProp;
    let location = _react.useMemo(()=>{
        let trailingPathname = stripBasename(pathname, basename);
        if (trailingPathname == null) return null;
        return {
            pathname: trailingPathname,
            search,
            hash,
            state,
            key
        };
    }, [
        basename,
        pathname,
        search,
        hash,
        state,
        key
    ]);
    warning(location != null, "<Router basename=\"" + basename + "\"> is not able to match the URL " + ("\"" + pathname + search + hash + "\" because it does not start with the ") + "basename, so the <Router> won't render anything.");
    if (location == null) return null;
    return /*#__PURE__*/ _react.createElement(NavigationContext.Provider, {
        value: navigationContext
    }, /*#__PURE__*/ _react.createElement(LocationContext.Provider, {
        children: children,
        value: {
            location,
            navigationType
        }
    }));
}
/**
 * A container for a nested tree of <Route> elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/docs/en/v6/api#routes
 */ function Routes(_ref4) {
    let { children , location  } = _ref4;
    return useRoutes(createRoutesFromChildren(children), location);
} ///////////////////////////////////////////////////////////////////////////////
// UTILS
///////////////////////////////////////////////////////////////////////////////
/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren
 */ function createRoutesFromChildren(children) {
    let routes = [];
    _react.Children.forEach(children, (element)=>{
        if (!/*#__PURE__*/ _react.isValidElement(element)) // Ignore non-elements. This allows people to more easily inline
        // conditionals in their route config.
        return;
        if (element.type === _react.Fragment) {
            // Transparently support React.Fragment and its children.
            routes.push.apply(routes, createRoutesFromChildren(element.props.children));
            return;
        }
        !(element.type === Route) && invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>");
        let route = {
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            index: element.props.index,
            path: element.props.path
        };
        if (element.props.children) route.children = createRoutesFromChildren(element.props.children);
        routes.push(route);
    });
    return routes;
}
/**
 * Renders the result of `matchRoutes()` into a React element.
 */ function renderMatches(matches) {
    return _renderMatches(matches);
}

},{"history":"iE5Zp","react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bdVon":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batch", ()=>_reactBatchedUpdates.unstable_batchedUpdates
);
var _reactBatchedUpdates = require("./utils/reactBatchedUpdates");
var _batch = require("./utils/batch"); // Enable batched updates in our subscriptions for use
var _exports = require("./exports");
parcelHelpers.exportAll(_exports, exports);
// with standard React renderers (ReactDOM, React Native)
_batch.setBatch(_reactBatchedUpdates.unstable_batchedUpdates);

},{"./utils/reactBatchedUpdates":"5K86X","./utils/batch":"ikw0G","./exports":"iAa1P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5K86X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable import/no-unresolved */ parcelHelpers.export(exports, "unstable_batchedUpdates", ()=>_reactDom.unstable_batchedUpdates
);
var _reactDom = require("react-dom");

},{"react-dom":"j6uA9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ikw0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setBatch", ()=>setBatch
);
parcelHelpers.export(exports, "getBatch", ()=>getBatch
);
// Default to a dummy "batch" implementation that just runs the callback
function defaultNoopBatch(callback) {
    callback();
}
var batch = defaultNoopBatch; // Allow injecting another batching function later
var setBatch = function setBatch(newBatch) {
    return batch = newBatch;
}; // Supply a getter just to skip dealing with ESM bindings
var getBatch = function getBatch() {
    return batch;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAa1P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Provider", ()=>_providerDefault.default
);
parcelHelpers.export(exports, "connectAdvanced", ()=>_connectAdvancedDefault.default
);
parcelHelpers.export(exports, "ReactReduxContext", ()=>_context.ReactReduxContext
);
parcelHelpers.export(exports, "connect", ()=>_connectDefault.default
);
parcelHelpers.export(exports, "useDispatch", ()=>_useDispatch.useDispatch
);
parcelHelpers.export(exports, "createDispatchHook", ()=>_useDispatch.createDispatchHook
);
parcelHelpers.export(exports, "useSelector", ()=>_useSelector.useSelector
);
parcelHelpers.export(exports, "createSelectorHook", ()=>_useSelector.createSelectorHook
);
parcelHelpers.export(exports, "useStore", ()=>_useStore.useStore
);
parcelHelpers.export(exports, "createStoreHook", ()=>_useStore.createStoreHook
);
parcelHelpers.export(exports, "shallowEqual", ()=>_shallowEqualDefault.default
);
var _provider = require("./components/Provider");
var _providerDefault = parcelHelpers.interopDefault(_provider);
var _connectAdvanced = require("./components/connectAdvanced");
var _connectAdvancedDefault = parcelHelpers.interopDefault(_connectAdvanced);
var _context = require("./components/Context");
var _connect = require("./connect/connect");
var _connectDefault = parcelHelpers.interopDefault(_connect);
var _useDispatch = require("./hooks/useDispatch");
var _useSelector = require("./hooks/useSelector");
var _useStore = require("./hooks/useStore");
var _shallowEqual = require("./utils/shallowEqual");
var _shallowEqualDefault = parcelHelpers.interopDefault(_shallowEqual);

},{"./components/Provider":"bdd6J","./components/connectAdvanced":"1EIOj","./components/Context":"ji81o","./connect/connect":"5Kgic","./hooks/useDispatch":"aOjNn","./hooks/useSelector":"l3rFI","./hooks/useStore":"39JZU","./utils/shallowEqual":"gV5L4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bdd6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _context = require("./Context");
var _subscription = require("../utils/Subscription");
var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");
function Provider(_ref) {
    var store = _ref.store, context = _ref.context, children = _ref.children;
    var contextValue = _react.useMemo(function() {
        var subscription = _subscription.createSubscription(store);
        return {
            store: store,
            subscription: subscription
        };
    }, [
        store
    ]);
    var previousState = _react.useMemo(function() {
        return store.getState();
    }, [
        store
    ]);
    _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(function() {
        var subscription = contextValue.subscription;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store.getState()) subscription.notifyNestedSubs();
        return function() {
            subscription.tryUnsubscribe();
            subscription.onStateChange = null;
        };
    }, [
        contextValue,
        previousState
    ]);
    var Context = context || _context.ReactReduxContext;
    return /*#__PURE__*/ _reactDefault.default.createElement(Context.Provider, {
        value: contextValue
    }, children);
}
Provider.propTypes = {
    store: _propTypesDefault.default.shape({
        subscribe: _propTypesDefault.default.func.isRequired,
        dispatch: _propTypesDefault.default.func.isRequired,
        getState: _propTypesDefault.default.func.isRequired
    }),
    context: _propTypesDefault.default.object,
    children: _propTypesDefault.default.any
};
exports.default = Provider;

},{"react":"21dqq","prop-types":"7wKI2","./Context":"ji81o","../utils/Subscription":"ieuHT","../utils/useIsomorphicLayoutEffect":"kNbVc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wKI2":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"gfIo3","./factoryWithTypeCheckers":"bBUgD"}],"gfIo3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"7GE9i"}],"7GE9i":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"bBUgD":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var has = require('./lib/has');
var checkPropTypes = require('./checkPropTypes');
var printWarning = function() {};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {};
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
            var checker = arrayOfTypeCheckers[i1];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i1 + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, 'expectedType')) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({}, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"gfIo3","object-assign":"7OXxh","./lib/ReactPropTypesSecret":"jZTZJ","./lib/has":"fqKuf","./checkPropTypes":"5VwyJ"}],"7OXxh":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"jZTZJ":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"fqKuf":[function(require,module,exports) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

},{}],"5VwyJ":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {};
var has = require('./lib/has');
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {};
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"jZTZJ","./lib/has":"fqKuf"}],"ji81o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReactReduxContext", ()=>ReactReduxContext
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var ReactReduxContext = /*#__PURE__*/ _reactDefault.default.createContext(null);
ReactReduxContext.displayName = 'ReactRedux';
exports.default = ReactReduxContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ieuHT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubscription", ()=>createSubscription
);
var _batch = require("./batch"); // encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
function createListenerCollection() {
    var batch = _batch.getBatch();
    var first = null;
    var last = null;
    return {
        clear: function clear() {
            first = null;
            last = null;
        },
        notify: function notify() {
            batch(function() {
                var listener = first;
                while(listener){
                    listener.callback();
                    listener = listener.next;
                }
            });
        },
        get: function get() {
            var listeners = [];
            var listener = first;
            while(listener){
                listeners.push(listener);
                listener = listener.next;
            }
            return listeners;
        },
        subscribe: function subscribe(callback) {
            var isSubscribed = true;
            var listener = last = {
                callback: callback,
                next: null,
                prev: last
            };
            if (listener.prev) listener.prev.next = listener;
            else first = listener;
            return function unsubscribe() {
                if (!isSubscribed || first === null) return;
                isSubscribed = false;
                if (listener.next) listener.next.prev = listener.prev;
                else last = listener.prev;
                if (listener.prev) listener.prev.next = listener.next;
                else first = listener.next;
            };
        }
    };
}
var nullListeners = {
    notify: function notify() {},
    get: function get() {
        return [];
    }
};
function createSubscription(store, parentSub) {
    var unsubscribe;
    var listeners = nullListeners;
    function addNestedSub(listener) {
        trySubscribe();
        return listeners.subscribe(listener);
    }
    function notifyNestedSubs() {
        listeners.notify();
    }
    function handleChangeWrapper() {
        if (subscription.onStateChange) subscription.onStateChange();
    }
    function isSubscribed() {
        return Boolean(unsubscribe);
    }
    function trySubscribe() {
        if (!unsubscribe) {
            unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
            listeners = createListenerCollection();
        }
    }
    function tryUnsubscribe() {
        if (unsubscribe) {
            unsubscribe();
            unsubscribe = undefined;
            listeners.clear();
            listeners = nullListeners;
        }
    }
    var subscription = {
        addNestedSub: addNestedSub,
        notifyNestedSubs: notifyNestedSubs,
        handleChangeWrapper: handleChangeWrapper,
        isSubscribed: isSubscribed,
        trySubscribe: trySubscribe,
        tryUnsubscribe: tryUnsubscribe,
        getListeners: function getListeners() {
            return listeners;
        }
    };
    return subscription;
}

},{"./batch":"ikw0G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kNbVc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useIsomorphicLayoutEffect", ()=>useIsomorphicLayoutEffect
);
var _react = require("react"); // React currently throws a warning when using useLayoutEffect on the server.
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1EIOj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactIs = require("react-is");
var _subscription = require("../utils/Subscription");
var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");
var _context = require("./Context"); // Define some constant arrays just to avoid re-creating these
var _excluded = [
    "getDisplayName",
    "methodName",
    "renderCountProp",
    "shouldHandleStateChanges",
    "storeKey",
    "withRef",
    "forwardRef",
    "context"
], _excluded2 = [
    "reactReduxForwardedRef"
];
var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [
    null,
    null
];
var stringifyComponent = function stringifyComponent(Comp) {
    try {
        return JSON.stringify(Comp);
    } catch (err) {
        return String(Comp);
    }
};
function storeStateUpdatesReducer(state, action) {
    var updateCount = state[1];
    return [
        action.payload,
        updateCount + 1
    ];
}
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
    _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(function() {
        return effectFunc.apply(void 0, effectArgs);
    }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
    // We want to capture the wrapper props and child props we used for later comparisons
    lastWrapperProps.current = wrapperProps;
    lastChildProps.current = actualChildProps;
    renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update
    if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
    }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
    // If we're not subscribed to the store, nothing to do here
    if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts
    var didUnsubscribe = false;
    var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component
    var checkForUpdates = function checkForUpdates() {
        if (didUnsubscribe) // Don't run stale listeners.
        // Redux doesn't guarantee unsubscriptions happen until next dispatch.
        return;
        var latestStoreState = store.getState();
        var newChildProps, error;
        try {
            // Actually run the selector with the most recent store state and wrapper props
            // to determine what the child props should be
            newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e) {
            error = e;
            lastThrownError = e;
        }
        if (!error) lastThrownError = null;
         // If the child props haven't changed, nothing to do here - cascade the subscription update
        if (newChildProps === lastChildProps.current) {
            if (!renderIsScheduled.current) notifyNestedSubs();
        } else {
            // Save references to the new child props.  Note that we track the "child props from store update"
            // as a ref instead of a useState/useReducer because we need a way to determine if that value has
            // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
            // forcing another re-render, which we don't want.
            lastChildProps.current = newChildProps;
            childPropsFromStoreUpdate.current = newChildProps;
            renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render
            forceComponentUpdateDispatch({
                type: 'STORE_UPDATED',
                payload: {
                    error: error
                }
            });
        }
    }; // Actually subscribe to the nearest connected ancestor (or store)
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe(); // Pull data from the store after first render in case the store has
    // changed since we began.
    checkForUpdates();
    var unsubscribeWrapper = function unsubscribeWrapper() {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
        if (lastThrownError) // It's possible that we caught an error due to a bad mapState function, but the
        // parent re-rendered without this component and we're about to unmount.
        // This shouldn't happen as long as we do top-down subscriptions correctly, but
        // if we ever do those wrong, this throw will surface the error in our tests.
        // In that case, throw the error from here so it doesn't get lost.
        throw lastThrownError;
    };
    return unsubscribeWrapper;
}
var initStateUpdates = function initStateUpdates() {
    return [
        null,
        0
    ];
};
function connectAdvanced(/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/ selectorFactory, _ref) {
    if (_ref === void 0) _ref = {};
    var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
        return "ConnectAdvanced(" + name + ")";
    } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? _context.ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLooseDefault.default(_ref2, _excluded);
    if (renderCountProp !== undefined) throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    if (withRef) throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
    var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    if (storeKey !== 'store') throw new Error('storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
    var Context = context;
    return function wrapWithConnect(WrappedComponent) {
        if (!_reactIs.isValidElementType(WrappedComponent)) throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
        var displayName = getDisplayName(wrappedComponentName);
        var selectorFactoryOptions = _extendsDefault.default({}, connectOptions, {
            getDisplayName: getDisplayName,
            methodName: methodName,
            renderCountProp: renderCountProp,
            shouldHandleStateChanges: shouldHandleStateChanges,
            storeKey: storeKey,
            displayName: displayName,
            wrappedComponentName: wrappedComponentName,
            WrappedComponent: WrappedComponent
        });
        var pure = connectOptions.pure;
        function createChildSelector(store) {
            return selectorFactory(store.dispatch, selectorFactoryOptions);
        } // If we aren't running in "pure" mode, we don't want to memoize values.
        // To avoid conditionally calling hooks, we fall back to a tiny wrapper
        // that just executes the given callback immediately.
        var usePureOnlyMemo = pure ? _react.useMemo : function(callback) {
            return callback();
        };
        function ConnectFunction(props) {
            var _useMemo = _react.useMemo(function() {
                // Distinguish between actual "data" props that were passed to the wrapper component,
                // and values needed to control behavior (forwarded refs, alternate context instances).
                // To maintain the wrapperProps object reference, memoize this destructuring.
                var reactReduxForwardedRef = props.reactReduxForwardedRef, wrapperProps = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
                return [
                    props.context,
                    reactReduxForwardedRef,
                    wrapperProps
                ];
            }, [
                props
            ]), propsContext = _useMemo[0], reactReduxForwardedRef1 = _useMemo[1], wrapperProps1 = _useMemo[2];
            var ContextToUse = _react.useMemo(function() {
                // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
                // Memoize the check that determines which context instance we should use.
                return propsContext && propsContext.Consumer && _reactIs.isContextConsumer(/*#__PURE__*/ _reactDefault.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
            }, [
                propsContext,
                Context
            ]); // Retrieve the store and ancestor subscription via context, if available
            var contextValue = _react.useContext(ContextToUse); // The store _must_ exist as either a prop or in context.
            // We'll check to see if it _looks_ like a Redux store first.
            // This allows us to pass through a `store` prop that is just a plain value.
            var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
            var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
            if (!didStoreComeFromProps && !didStoreComeFromContext) throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
             // Based on the previous check, one of these must be true
            var store = didStoreComeFromProps ? props.store : contextValue.store;
            var childPropsSelector = _react.useMemo(function() {
                // The child props selector needs the store reference as an input.
                // Re-create this selector whenever the store changes.
                return createChildSelector(store);
            }, [
                store
            ]);
            var _useMemo2 = _react.useMemo(function() {
                if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
                // connected to the store via props shouldn't use subscription from context, or vice versa.
                // This Subscription's source should match where store came from: props vs. context. A component
                // connected to the store via props shouldn't use subscription from context, or vice versa.
                var subscription = _subscription.createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
                // the middle of the notification loop, where `subscription` will then be null. This can
                // probably be avoided if Subscription's listeners logic is changed to not call listeners
                // that have been unsubscribed in the  middle of the notification loop.
                // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
                // the middle of the notification loop, where `subscription` will then be null. This can
                // probably be avoided if Subscription's listeners logic is changed to not call listeners
                // that have been unsubscribed in the  middle of the notification loop.
                var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
                return [
                    subscription,
                    notifyNestedSubs
                ];
            }, [
                store,
                didStoreComeFromProps,
                contextValue
            ]), subscription1 = _useMemo2[0], notifyNestedSubs1 = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
            // and memoize that value to avoid unnecessary context updates.
            var overriddenContextValue = _react.useMemo(function() {
                if (didStoreComeFromProps) // This component is directly subscribed to a store from props.
                // We don't want descendants reading from this store - pass down whatever
                // the existing context value is from the nearest connected ancestor.
                return contextValue;
                 // Otherwise, put this component's subscription instance into context, so that
                // connected descendants won't update until after this component is done
                return _extendsDefault.default({}, contextValue, {
                    subscription: subscription1
                });
            }, [
                didStoreComeFromProps,
                contextValue,
                subscription1
            ]); // We need to force this wrapper component to re-render whenever a Redux store update
            // causes a change to the calculated child component props (or we caught an error in mapState)
            var _useReducer = _react.useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards
            if (previousStateUpdateResult && previousStateUpdateResult.error) throw previousStateUpdateResult.error;
             // Set up refs to coordinate values between the subscription effect and the render logic
            var lastChildProps = _react.useRef();
            var lastWrapperProps = _react.useRef(wrapperProps1);
            var childPropsFromStoreUpdate = _react.useRef();
            var renderIsScheduled = _react.useRef(false);
            var actualChildProps = usePureOnlyMemo(function() {
                // Tricky logic here:
                // - This render may have been triggered by a Redux store update that produced new child props
                // - However, we may have gotten new wrapper props after that
                // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
                // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
                // So, we'll use the child props from store update only if the wrapper props are the same as last time.
                if (childPropsFromStoreUpdate.current && wrapperProps1 === lastWrapperProps.current) return childPropsFromStoreUpdate.current;
                 // TODO We're reading the store directly in render() here. Bad idea?
                // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
                // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
                // to determine what the child props should be.
                return childPropsSelector(store.getState(), wrapperProps1);
            }, [
                store,
                previousStateUpdateResult,
                wrapperProps1
            ]); // We need this to execute synchronously every time we re-render. However, React warns
            // about useLayoutEffect in SSR, so we try to detect environment and fall back to
            // just useEffect instead to avoid the warning, since neither will run anyway.
            useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [
                lastWrapperProps,
                lastChildProps,
                renderIsScheduled,
                wrapperProps1,
                actualChildProps,
                childPropsFromStoreUpdate,
                notifyNestedSubs1
            ]); // Our re-subscribe logic only runs when the store/subscription setup changes
            useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [
                shouldHandleStateChanges,
                store,
                subscription1,
                childPropsSelector,
                lastWrapperProps,
                lastChildProps,
                renderIsScheduled,
                childPropsFromStoreUpdate,
                notifyNestedSubs1,
                forceComponentUpdateDispatch
            ], [
                store,
                subscription1,
                childPropsSelector
            ]); // Now that all that's done, we can finally try to actually render the child component.
            // We memoize the elements for the rendered child component as an optimization.
            var renderedWrappedComponent = _react.useMemo(function() {
                return /*#__PURE__*/ _reactDefault.default.createElement(WrappedComponent, _extendsDefault.default({}, actualChildProps, {
                    ref: reactReduxForwardedRef1
                }));
            }, [
                reactReduxForwardedRef1,
                WrappedComponent,
                actualChildProps
            ]); // If React sees the exact same element reference as last time, it bails out of re-rendering
            // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.
            var renderedChild = _react.useMemo(function() {
                if (shouldHandleStateChanges) // If this component is subscribed to store updates, we need to pass its own
                // subscription instance down to our descendants. That means rendering the same
                // Context instance, and putting a different value into the context.
                return /*#__PURE__*/ _reactDefault.default.createElement(ContextToUse.Provider, {
                    value: overriddenContextValue
                }, renderedWrappedComponent);
                return renderedWrappedComponent;
            }, [
                ContextToUse,
                renderedWrappedComponent,
                overriddenContextValue
            ]);
            return renderedChild;
        } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.
        var Connect = pure ? _reactDefault.default.memo(ConnectFunction) : ConnectFunction;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = ConnectFunction.displayName = displayName;
        if (forwardRef) {
            var forwarded = _reactDefault.default.forwardRef(function forwardConnectRef(props, ref) {
                return /*#__PURE__*/ _reactDefault.default.createElement(Connect, _extendsDefault.default({}, props, {
                    reactReduxForwardedRef: ref
                }));
            });
            forwarded.displayName = displayName;
            forwarded.WrappedComponent = WrappedComponent;
            return _hoistNonReactStaticsDefault.default(forwarded, WrappedComponent);
        }
        return _hoistNonReactStaticsDefault.default(Connect, WrappedComponent);
    };
}
exports.default = connectAdvanced;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","hoist-non-react-statics":"1GfsB","react":"21dqq","react-is":"7EuwB","../utils/Subscription":"ieuHT","../utils/useIsomorphicLayoutEffect":"kNbVc","./Context":"ji81o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adHgr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GfsB":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"8V70c"}],"8V70c":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"drjfK"}],"drjfK":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"7EuwB":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"5DsXl"}],"5DsXl":[function(require,module,exports) {
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                        case REACT_SUSPENSE_LIST_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
        }
        return false;
    }
    function isConcurrentMode(object) {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
        }
        return false;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"5Kgic":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// different options opens up some testing and extensibility scenarios
parcelHelpers.export(exports, "createConnect", ()=>createConnect
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _connectAdvanced = require("../components/connectAdvanced");
var _connectAdvancedDefault = parcelHelpers.interopDefault(_connectAdvanced);
var _shallowEqual = require("../utils/shallowEqual");
var _shallowEqualDefault = parcelHelpers.interopDefault(_shallowEqual);
var _mapDispatchToProps = require("./mapDispatchToProps");
var _mapDispatchToPropsDefault = parcelHelpers.interopDefault(_mapDispatchToProps);
var _mapStateToProps = require("./mapStateToProps");
var _mapStateToPropsDefault = parcelHelpers.interopDefault(_mapStateToProps);
var _mergeProps = require("./mergeProps");
var _mergePropsDefault = parcelHelpers.interopDefault(_mergeProps);
var _selectorFactory = require("./selectorFactory");
var _selectorFactoryDefault = parcelHelpers.interopDefault(_selectorFactory);
var _excluded = [
    "pure",
    "areStatesEqual",
    "areOwnPropsEqual",
    "areStatePropsEqual",
    "areMergedPropsEqual"
];
/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */ function match(arg, factories, name) {
    for(var i = factories.length - 1; i >= 0; i--){
        var result = factories[i](arg);
        if (result) return result;
    }
    return function(dispatch, options) {
        throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
    };
}
function strictEqual(a, b) {
    return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
function createConnect(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? _connectAdvancedDefault.default : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToPropsDefault.default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToPropsDefault.default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergePropsDefault.default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactoryDefault.default : _ref$selectorFactory;
    return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
        if (_ref2 === void 0) _ref2 = {};
        var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqualDefault.default : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqualDefault.default : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqualDefault.default : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLooseDefault.default(_ref3, _excluded);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
        var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
        return connectHOC(selectorFactory, _extendsDefault.default({
            // used in error messages
            methodName: 'connect',
            // used to compute Connect's displayName from the wrapped component's displayName.
            getDisplayName: function getDisplayName(name) {
                return "Connect(" + name + ")";
            },
            // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
            shouldHandleStateChanges: Boolean(mapStateToProps),
            // passed through to selectorFactory
            initMapStateToProps: initMapStateToProps,
            initMapDispatchToProps: initMapDispatchToProps,
            initMergeProps: initMergeProps,
            pure: pure,
            areStatesEqual: areStatesEqual,
            areOwnPropsEqual: areOwnPropsEqual,
            areStatePropsEqual: areStatePropsEqual,
            areMergedPropsEqual: areMergedPropsEqual
        }, extraOptions));
    };
}
exports.default = /*#__PURE__*/ createConnect();

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","../components/connectAdvanced":"1EIOj","../utils/shallowEqual":"gV5L4","./mapDispatchToProps":"5QhPl","./mapStateToProps":"4Hl4c","./mergeProps":"hQpBj","./selectorFactory":"e9uH3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gV5L4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function is(x, y) {
    if (x === y) return x !== 0 || y !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
}
function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for(var i = 0; i < keysA.length; i++){
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) return false;
    }
    return true;
}
exports.default = shallowEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QhPl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "whenMapDispatchToPropsIsFunction", ()=>whenMapDispatchToPropsIsFunction
);
parcelHelpers.export(exports, "whenMapDispatchToPropsIsMissing", ()=>whenMapDispatchToPropsIsMissing
);
parcelHelpers.export(exports, "whenMapDispatchToPropsIsObject", ()=>whenMapDispatchToPropsIsObject
);
var _bindActionCreators = require("../utils/bindActionCreators");
var _bindActionCreatorsDefault = parcelHelpers.interopDefault(_bindActionCreators);
var _wrapMapToProps = require("./wrapMapToProps");
function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
    return typeof mapDispatchToProps === 'function' ? _wrapMapToProps.wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
    return !mapDispatchToProps ? _wrapMapToProps.wrapMapToPropsConstant(function(dispatch) {
        return {
            dispatch: dispatch
        };
    }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
    return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? _wrapMapToProps.wrapMapToPropsConstant(function(dispatch) {
        return _bindActionCreatorsDefault.default(mapDispatchToProps, dispatch);
    }) : undefined;
}
exports.default = [
    whenMapDispatchToPropsIsFunction,
    whenMapDispatchToPropsIsMissing,
    whenMapDispatchToPropsIsObject
];

},{"../utils/bindActionCreators":"afPZO","./wrapMapToProps":"bSgjL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afPZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function bindActionCreators(actionCreators, dispatch) {
    var boundActionCreators = {};
    var _loop = function _loop(key) {
        var actionCreator = actionCreators[key];
        if (typeof actionCreator === 'function') boundActionCreators[key] = function() {
            return dispatch(actionCreator.apply(void 0, arguments));
        };
    };
    for(var key1 in actionCreators)_loop(key1);
    return boundActionCreators;
}
exports.default = bindActionCreators;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSgjL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapMapToPropsConstant", ()=>wrapMapToPropsConstant
) // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
;
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
//
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
parcelHelpers.export(exports, "getDependsOnOwnProps", ()=>getDependsOnOwnProps
) // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
;
// this function wraps mapToProps in a proxy function which does several things:
//
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//
parcelHelpers.export(exports, "wrapMapToPropsFunc", ()=>wrapMapToPropsFunc
);
var _verifyPlainObject = require("../utils/verifyPlainObject");
var _verifyPlainObjectDefault = parcelHelpers.interopDefault(_verifyPlainObject);
function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch, options) {
        var constant = getConstant(dispatch, options);
        function constantSelector() {
            return constant;
        }
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
    };
}
function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, _ref) {
        var displayName = _ref.displayName;
        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
            return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        }; // allow detectFactoryAndVerify to get ownProps
        proxy.dependsOnOwnProps = true;
        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
            proxy.mapToProps = mapToProps;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
            var props = proxy(stateOrDispatch, ownProps);
            if (typeof props === 'function') {
                proxy.mapToProps = props;
                proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
                props = proxy(stateOrDispatch, ownProps);
            }
            _verifyPlainObjectDefault.default(props, displayName, methodName);
            return props;
        };
        return proxy;
    };
}

},{"../utils/verifyPlainObject":"f6LbZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6LbZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPlainObject = require("./isPlainObject");
var _isPlainObjectDefault = parcelHelpers.interopDefault(_isPlainObject);
var _warning = require("./warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
function verifyPlainObject(value, displayName, methodName) {
    if (!_isPlainObjectDefault.default(value)) _warningDefault.default(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
}
exports.default = verifyPlainObject;

},{"./isPlainObject":"lM8m6","./warning":"cUQUw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lM8m6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = Object.getPrototypeOf(obj);
    if (proto === null) return true;
    var baseProto = proto;
    while(Object.getPrototypeOf(baseProto) !== null)baseProto = Object.getPrototypeOf(baseProto);
    return proto === baseProto;
}
exports.default = isPlainObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUQUw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function warning(message) {
    /* eslint-disable no-console */ if (typeof console !== 'undefined' && typeof console.error === 'function') console.error(message);
    /* eslint-enable no-console */ try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
    /* eslint-disable no-empty */ } catch (e) {}
/* eslint-enable no-empty */ }
exports.default = warning;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Hl4c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "whenMapStateToPropsIsFunction", ()=>whenMapStateToPropsIsFunction
);
parcelHelpers.export(exports, "whenMapStateToPropsIsMissing", ()=>whenMapStateToPropsIsMissing
);
var _wrapMapToProps = require("./wrapMapToProps");
function whenMapStateToPropsIsFunction(mapStateToProps) {
    return typeof mapStateToProps === 'function' ? _wrapMapToProps.wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
    return !mapStateToProps ? _wrapMapToProps.wrapMapToPropsConstant(function() {
        return {};
    }) : undefined;
}
exports.default = [
    whenMapStateToPropsIsFunction,
    whenMapStateToPropsIsMissing
];

},{"./wrapMapToProps":"bSgjL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQpBj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultMergeProps", ()=>defaultMergeProps
);
parcelHelpers.export(exports, "wrapMergePropsFunc", ()=>wrapMergePropsFunc
);
parcelHelpers.export(exports, "whenMergePropsIsFunction", ()=>whenMergePropsIsFunction
);
parcelHelpers.export(exports, "whenMergePropsIsOmitted", ()=>whenMergePropsIsOmitted
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _verifyPlainObject = require("../utils/verifyPlainObject");
var _verifyPlainObjectDefault = parcelHelpers.interopDefault(_verifyPlainObject);
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return _extendsDefault.default({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, _ref) {
        var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
        var hasRunOnce = false;
        var mergedProps;
        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
            var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            if (hasRunOnce) {
                if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
            } else {
                hasRunOnce = true;
                mergedProps = nextMergedProps;
                _verifyPlainObjectDefault.default(mergedProps, displayName, 'mergeProps');
            }
            return mergedProps;
        };
    };
}
function whenMergePropsIsFunction(mergeProps) {
    return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
    return !mergeProps ? function() {
        return defaultMergeProps;
    } : undefined;
}
exports.default = [
    whenMergePropsIsFunction,
    whenMergePropsIsOmitted
];

},{"@babel/runtime/helpers/esm/extends":"fTBFS","../utils/verifyPlainObject":"f6LbZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e9uH3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "impureFinalPropsSelectorFactory", ()=>impureFinalPropsSelectorFactory
);
parcelHelpers.export(exports, "pureFinalPropsSelectorFactory", ()=>pureFinalPropsSelectorFactory
) // TODO: Add more comments
;
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _verifySubselectors = require("./verifySubselectors");
var _verifySubselectorsDefault = parcelHelpers.interopDefault(_verifySubselectors);
var _excluded = [
    "initMapStateToProps",
    "initMapDispatchToProps",
    "initMergeProps"
];
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
    return function impureFinalPropsSelector(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
    };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
    var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
    var hasRunAtLeastOnce = false;
    var state;
    var ownProps;
    var stateProps;
    var dispatchProps;
    var mergedProps;
    function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
    }
    function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
    }
    function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
    }
    function handleNewState() {
        var nextStateProps = mapStateToProps(state, ownProps);
        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
    }
    function handleSubsequentCalls(nextState, nextOwnProps) {
        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        var stateChanged = !areStatesEqual(nextState, state);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged) return handleNewPropsAndNewState();
        if (propsChanged) return handleNewProps();
        if (stateChanged) return handleNewState();
        return mergedProps;
    }
    return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
    var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLooseDefault.default(_ref2, _excluded);
    var mapStateToProps = initMapStateToProps(dispatch, options);
    var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
    var mergeProps = initMergeProps(dispatch, options);
    _verifySubselectorsDefault.default(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
    return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
exports.default = finalPropsSelectorFactory;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","./verifySubselectors":"10wWL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"10wWL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _warning = require("../utils/warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
function verify(selector, methodName, displayName) {
    if (!selector) throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
    else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
        if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) _warningDefault.default("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
    verify(mapStateToProps, 'mapStateToProps', displayName);
    verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
    verify(mergeProps, 'mergeProps', displayName);
}
exports.default = verifySubselectors;

},{"../utils/warning":"cUQUw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aOjNn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */ parcelHelpers.export(exports, "createDispatchHook", ()=>createDispatchHook
);
parcelHelpers.export(exports, "useDispatch", ()=>useDispatch
);
var _context = require("../components/Context");
var _useStore = require("./useStore");
function createDispatchHook(context) {
    if (context === void 0) context = _context.ReactReduxContext;
    var useStore = context === _context.ReactReduxContext ? _useStore.useStore : _useStore.createStoreHook(context);
    return function useDispatch() {
        var store = useStore();
        return store.dispatch;
    };
}
var useDispatch = /*#__PURE__*/ createDispatchHook();

},{"../components/Context":"ji81o","./useStore":"39JZU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"39JZU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */ parcelHelpers.export(exports, "createStoreHook", ()=>createStoreHook
);
parcelHelpers.export(exports, "useStore", ()=>useStore
);
var _react = require("react");
var _context = require("../components/Context");
var _useReduxContext = require("./useReduxContext");
function createStoreHook(context) {
    if (context === void 0) context = _context.ReactReduxContext;
    var useReduxContext = context === _context.ReactReduxContext ? _useReduxContext.useReduxContext : function() {
        return _react.useContext(context);
    };
    return function useStore() {
        var _useReduxContext1 = useReduxContext(), store = _useReduxContext1.store;
        return store;
    };
}
var useStore = /*#__PURE__*/ createStoreHook();

},{"react":"21dqq","../components/Context":"ji81o","./useReduxContext":"3828k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3828k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */ parcelHelpers.export(exports, "useReduxContext", ()=>useReduxContext
);
var _react = require("react");
var _context = require("../components/Context");
function useReduxContext() {
    var contextValue = _react.useContext(_context.ReactReduxContext);
    if (!contextValue) throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
    return contextValue;
}

},{"react":"21dqq","../components/Context":"ji81o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3rFI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */ parcelHelpers.export(exports, "createSelectorHook", ()=>createSelectorHook
);
parcelHelpers.export(exports, "useSelector", ()=>useSelector
);
var _react = require("react");
var _useReduxContext = require("./useReduxContext");
var _subscription = require("../utils/Subscription");
var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");
var _context = require("../components/Context");
var refEquality = function refEquality(a, b) {
    return a === b;
};
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
    var _useReducer = _react.useReducer(function(s) {
        return s + 1;
    }, 0), forceRender = _useReducer[1];
    var subscription = _react.useMemo(function() {
        return _subscription.createSubscription(store, contextSub);
    }, [
        store,
        contextSub
    ]);
    var latestSubscriptionCallbackError = _react.useRef();
    var latestSelector = _react.useRef();
    var latestStoreState = _react.useRef();
    var latestSelectedState = _react.useRef();
    var storeState = store.getState();
    var selectedState;
    try {
        if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
            var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references
            if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) selectedState = newSelectedState;
            else selectedState = latestSelectedState.current;
        } else selectedState = latestSelectedState.current;
    } catch (err1) {
        if (latestSubscriptionCallbackError.current) err1.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
        throw err1;
    }
    _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(function() {
        latestSelector.current = selector;
        latestStoreState.current = storeState;
        latestSelectedState.current = selectedState;
        latestSubscriptionCallbackError.current = undefined;
    });
    _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(function() {
        function checkForUpdates() {
            try {
                var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed
                if (newStoreState === latestStoreState.current) return;
                var _newSelectedState = latestSelector.current(newStoreState);
                if (equalityFn(_newSelectedState, latestSelectedState.current)) return;
                latestSelectedState.current = _newSelectedState;
                latestStoreState.current = newStoreState;
            } catch (err) {
                // we ignore all errors here, since when the component
                // is re-rendered, the selectors are called again, and
                // will throw again, if neither props nor store state
                // changed
                latestSubscriptionCallbackError.current = err;
            }
            forceRender();
        }
        subscription.onStateChange = checkForUpdates;
        subscription.trySubscribe();
        checkForUpdates();
        return function() {
            return subscription.tryUnsubscribe();
        };
    }, [
        store,
        subscription
    ]);
    return selectedState;
}
function createSelectorHook(context) {
    if (context === void 0) context = _context.ReactReduxContext;
    var useReduxContext = context === _context.ReactReduxContext ? _useReduxContext.useReduxContext : function() {
        return _react.useContext(context);
    };
    return function useSelector(selector, equalityFn) {
        if (equalityFn === void 0) equalityFn = refEquality;
        if (!selector) throw new Error("You must pass a selector to useSelector");
        if (typeof selector !== 'function') throw new Error("You must pass a function as a selector to useSelector");
        if (typeof equalityFn !== 'function') throw new Error("You must pass a function as an equality function to useSelector");
        var _useReduxContext1 = useReduxContext(), store = _useReduxContext1.store, contextSub = _useReduxContext1.subscription;
        var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
        _react.useDebugValue(selectedState);
        return selectedState;
    };
}
var useSelector = /*#__PURE__*/ createSelectorHook();

},{"react":"21dqq","./useReduxContext":"3828k","../utils/Subscription":"ieuHT","../utils/useIsomorphicLayoutEffect":"kNbVc","../components/Context":"ji81o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeOzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_useMediaQueryDefault.default
);
var _useMediaQuery = require("./useMediaQuery");
var _useMediaQueryDefault = parcelHelpers.interopDefault(_useMediaQuery);

},{"./useMediaQuery":"3eg5d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3eg5d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _system = require("@mui/system");
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
/**
 * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
 */ function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
    const [match, setMatch] = _react.useState(()=>{
        if (noSsr && supportMatchMedia) return matchMedia(query).matches;
        if (ssrMatchMedia) return ssrMatchMedia(query).matches;
         // Once the component is mounted, we rely on the
        // event listeners to return the correct matches value.
        return defaultMatches;
    });
    _useEnhancedEffectDefault.default(()=>{
        let active = true;
        if (!supportMatchMedia) return undefined;
        const queryList = matchMedia(query);
        const updateMatch = ()=>{
            // Workaround Safari wrong implementation of matchMedia
            // TODO can we remove it?
            // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
            if (active) setMatch(queryList.matches);
        };
        updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped
        queryList.addListener(updateMatch);
        return ()=>{
            active = false;
            queryList.removeListener(updateMatch);
        };
    }, [
        query,
        matchMedia,
        supportMatchMedia
    ]);
    return match;
} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
const maybeReactUseSyncExternalStore = _react["useSyncExternalStore"];
function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {
    const getDefaultSnapshot = _react.useCallback(()=>defaultMatches
    , [
        defaultMatches
    ]);
    const getServerSnapshot = _react.useMemo(()=>{
        if (ssrMatchMedia !== null) {
            const { matches  } = ssrMatchMedia(query);
            return ()=>matches
            ;
        }
        return getDefaultSnapshot;
    }, [
        getDefaultSnapshot,
        query,
        ssrMatchMedia
    ]);
    const [getSnapshot, subscribe] = _react.useMemo(()=>{
        if (matchMedia === null) return [
            getDefaultSnapshot,
            ()=>()=>{}
        ];
        const mediaQueryList = matchMedia(query);
        return [
            ()=>mediaQueryList.matches
            ,
            (notify)=>{
                // TODO: Use `addEventListener` once support for Safari < 14 is dropped
                mediaQueryList.addListener(notify);
                return ()=>{
                    mediaQueryList.removeListener(notify);
                };
            }
        ];
    }, [
        getDefaultSnapshot,
        matchMedia,
        query
    ]);
    const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    return match;
}
function useMediaQuery(queryInput, options = {}) {
    const theme = _system.useThemeWithoutDefault(); // Wait for jsdom to support the match media feature.
    // All the browsers MUI support have this built-in.
    // This defensive check is here for simplicity.
    // Most of the time, the match media logic isn't central to people tests.
    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
    const { defaultMatches =false , matchMedia =supportMatchMedia ? window.matchMedia : null , ssrMatchMedia =null , noSsr  } = _system.getThemeProps({
        name: 'MuiUseMediaQuery',
        props: options,
        theme
    });
    if (typeof queryInput === 'function' && theme === null) console.error([
        'MUI: The `query` argument provided is invalid.',
        'You are providing a function without a theme in the context.',
        'One of the parent elements needs to use a ThemeProvider.'
    ].join('\n'));
    let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
    const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useDebugValue({
        query,
        match
    });
    return match;
}
exports.default = useMediaQuery;

},{"react":"21dqq","@mui/system":"Q0Zql","../utils/useEnhancedEffect":"jIOpS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Q0Zql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "css", ()=>_styledEngine.css
);
parcelHelpers.export(exports, "keyframes", ()=>_styledEngine.keyframes
);
parcelHelpers.export(exports, "GlobalStyles", ()=>_styledEngine.GlobalStyles
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_styledEngine.StyledEngineProvider
);
parcelHelpers.export(exports, "borders", ()=>_bordersDefault.default
);
parcelHelpers.export(exports, "breakpoints", ()=>_breakpointsDefault.default
);
parcelHelpers.export(exports, "handleBreakpoints", ()=>_breakpoints.handleBreakpoints
);
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>_breakpoints.mergeBreakpointsInOrder
);
parcelHelpers.export(exports, "unstable_resolveBreakpointValues", ()=>_breakpoints.resolveBreakpointValues
);
parcelHelpers.export(exports, "compose", ()=>_composeDefault.default
);
parcelHelpers.export(exports, "display", ()=>_displayDefault.default
);
parcelHelpers.export(exports, "flexbox", ()=>_flexboxDefault.default
);
parcelHelpers.export(exports, "grid", ()=>_gridDefault.default
);
parcelHelpers.export(exports, "palette", ()=>_paletteDefault.default
);
parcelHelpers.export(exports, "positions", ()=>_positionsDefault.default
);
parcelHelpers.export(exports, "shadows", ()=>_shadowsDefault.default
);
parcelHelpers.export(exports, "sizing", ()=>_sizingDefault.default
);
parcelHelpers.export(exports, "spacing", ()=>_spacingDefault.default
);
parcelHelpers.export(exports, "style", ()=>_styleDefault.default
);
parcelHelpers.export(exports, "getPath", ()=>_style.getPath
);
parcelHelpers.export(exports, "typography", ()=>_typographyDefault.default
);
parcelHelpers.export(exports, "unstable_styleFunctionSx", ()=>_styleFunctionSxDefault.default
);
parcelHelpers.export(exports, "unstable_createStyleFunctionSx", ()=>_styleFunctionSx.unstable_createStyleFunctionSx
);
parcelHelpers.export(exports, "unstable_extendSxProp", ()=>_styleFunctionSx.extendSxProp
);
parcelHelpers.export(exports, "experimental_sx", ()=>_sxDefault.default
);
parcelHelpers.export(exports, "unstable_getThemeValue", ()=>_getThemeValueDefault.default
);
parcelHelpers.export(exports, "Box", ()=>_boxDefault.default
);
parcelHelpers.export(exports, "createBox", ()=>_createBoxDefault.default
);
parcelHelpers.export(exports, "createStyled", ()=>_createStyledDefault.default
);
parcelHelpers.export(exports, "styled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "createTheme", ()=>_createThemeDefault.default
);
parcelHelpers.export(exports, "createBreakpoints", ()=>_createBreakpointsDefault.default
);
parcelHelpers.export(exports, "createSpacing", ()=>_createSpacingDefault.default
);
parcelHelpers.export(exports, "shape", ()=>_shapeDefault.default
);
parcelHelpers.export(exports, "useThemeProps", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "getThemeProps", ()=>_useThemeProps.getThemeProps
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
parcelHelpers.export(exports, "useThemeWithoutDefault", ()=>_useThemeWithoutDefaultDefault.default
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "unstable_createCssVarsProvider", ()=>_createCssVarsProviderDefault.default
);
parcelHelpers.export(exports, "unstable_createGetCssVar", ()=>_createGetCssVarDefault.default
);
var _styledEngine = require("@mui/styled-engine");
var _borders = require("./borders");
var _bordersDefault = parcelHelpers.interopDefault(_borders);
parcelHelpers.exportAll(_borders, exports);
var _breakpoints = require("./breakpoints");
var _breakpointsDefault = parcelHelpers.interopDefault(_breakpoints);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _display = require("./display");
var _displayDefault = parcelHelpers.interopDefault(_display);
var _flexbox = require("./flexbox");
var _flexboxDefault = parcelHelpers.interopDefault(_flexbox);
parcelHelpers.exportAll(_flexbox, exports);
var _grid = require("./grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
parcelHelpers.exportAll(_grid, exports);
var _palette = require("./palette");
var _paletteDefault = parcelHelpers.interopDefault(_palette);
parcelHelpers.exportAll(_palette, exports);
var _positions = require("./positions");
var _positionsDefault = parcelHelpers.interopDefault(_positions);
parcelHelpers.exportAll(_positions, exports);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _sizing = require("./sizing");
var _sizingDefault = parcelHelpers.interopDefault(_sizing);
parcelHelpers.exportAll(_sizing, exports);
var _spacing = require("./spacing");
var _spacingDefault = parcelHelpers.interopDefault(_spacing);
parcelHelpers.exportAll(_spacing, exports);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _typography = require("./typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
parcelHelpers.exportAll(_typography, exports);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _sx = require("./sx");
var _sxDefault = parcelHelpers.interopDefault(_sx);
var _getThemeValue = require("./getThemeValue");
var _getThemeValueDefault = parcelHelpers.interopDefault(_getThemeValue);
var _box = require("./Box");
var _boxDefault = parcelHelpers.interopDefault(_box);
var _createBox = require("./createBox");
var _createBoxDefault = parcelHelpers.interopDefault(_createBox);
var _createStyled = require("./createStyled");
var _createStyledDefault = parcelHelpers.interopDefault(_createStyled);
parcelHelpers.exportAll(_createStyled, exports);
var _styled = require("./styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _createBreakpoints = require("./createTheme/createBreakpoints");
var _createBreakpointsDefault = parcelHelpers.interopDefault(_createBreakpoints);
var _createSpacing = require("./createTheme/createSpacing");
var _createSpacingDefault = parcelHelpers.interopDefault(_createSpacing);
var _shape = require("./createTheme/shape");
var _shapeDefault = parcelHelpers.interopDefault(_shape);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeWithoutDefault = require("./useThemeWithoutDefault");
var _useThemeWithoutDefaultDefault = parcelHelpers.interopDefault(_useThemeWithoutDefault);
var _colorManipulator = require("./colorManipulator");
parcelHelpers.exportAll(_colorManipulator, exports);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _createCssVarsProvider = require("./cssVars/createCssVarsProvider");
var _createCssVarsProviderDefault = parcelHelpers.interopDefault(_createCssVarsProvider);
var _createGetCssVar = require("./cssVars/createGetCssVar");
var _createGetCssVarDefault = parcelHelpers.interopDefault(_createGetCssVar);

},{"@mui/styled-engine":"eTow5","./borders":"9eacX","./breakpoints":"jN5Vx","./compose":"artaj","./display":"bgIcY","./flexbox":"lGtSW","./grid":"aC2XZ","./palette":"c15rV","./positions":"bH84e","./shadows":"jc1Oh","./sizing":"IHjMz","./spacing":"5kYt9","./style":"juhi3","./typography":"6oSjI","./styleFunctionSx":"bRwpN","./sx":"7BCm2","./getThemeValue":"bPAAB","./Box":false,"./createBox":"bc03s","./createStyled":"csGHh","./styled":false,"./createTheme":"dmLcy","./createTheme/createBreakpoints":"ldxey","./createTheme/createSpacing":"8dFgL","./createTheme/shape":"43LHe","./useThemeProps":"eZlKz","./useTheme":"h9QTR","./useThemeWithoutDefault":"9Xcu1","./colorManipulator":"cIbr0","./ThemeProvider":"4OCq3","./cssVars/createCssVarsProvider":false,"./cssVars/createGetCssVar":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eTow5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThemeContext", ()=>_react.ThemeContext
);
parcelHelpers.export(exports, "keyframes", ()=>_react.keyframes
);
parcelHelpers.export(exports, "css", ()=>_react.css
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_styledEngineProviderDefault.default
);
parcelHelpers.export(exports, "GlobalStyles", ()=>_globalStylesDefault.default
);
/** @license MUI v5.5.2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var _styled = require("@emotion/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _react = require("@emotion/react");
var _styledEngineProvider = require("./StyledEngineProvider");
var _styledEngineProviderDefault = parcelHelpers.interopDefault(_styledEngineProvider);
var _globalStyles = require("./GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);
function styled(tag, options) {
    const stylesFactory = _styledDefault.default(tag, options);
    return (...styles)=>{
        const component = typeof tag === 'string' ? `"${tag}"` : 'component';
        if (styles.length === 0) console.error([
            `MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`,
            'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'
        ].join('\n'));
        else if (styles.some((style)=>style === undefined
        )) console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        return stylesFactory(...styles);
    };
}
exports.default = styled;

},{"@emotion/styled":"99PmY","@emotion/react":"9qiaY","./StyledEngineProvider":"75u97","./GlobalStyles":"GH0SO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99PmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/extends");
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _emotionStyledBaseBrowserEsmJs = require("../base/dist/emotion-styled-base.browser.esm.js");
var _emotionStyledBaseBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionStyledBaseBrowserEsmJs);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var tags = [
    'a',
    'abbr',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'base',
    'bdi',
    'bdo',
    'big',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'embed',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'legend',
    'li',
    'link',
    'main',
    'map',
    'mark',
    'marquee',
    'menu',
    'menuitem',
    'meta',
    'meter',
    'nav',
    'noscript',
    'object',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'param',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'script',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'track',
    'u',
    'ul',
    'var',
    'video',
    'wbr',
    'circle',
    'clipPath',
    'defs',
    'ellipse',
    'foreignObject',
    'g',
    'image',
    'line',
    'linearGradient',
    'mask',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'stop',
    'svg',
    'text',
    'tspan'
];
var newStyled = _emotionStyledBaseBrowserEsmJsDefault.default.bind();
tags.forEach(function(tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
});
exports.default = newStyled;

},{"@babel/runtime/helpers/extends":"vw3vn","react":"21dqq","@emotion/is-prop-valid":"6uRZg","../base/dist/emotion-styled-base.browser.esm.js":"aUeJ5","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vw3vn":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"6uRZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ _memoizeDefault.default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
exports.default = isPropValid;

},{"@emotion/memoize":"WW7h8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"WW7h8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aUeJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _isPropValidDefault = parcelHelpers.interopDefault(_isPropValid);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var testOmitPropsOnStringTag = _isPropValidDefault.default;
var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== 'theme';
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === 'string' && // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== 'function' && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : function useInsertionEffect(create) {
    create();
};
function useInsertionEffectMaybe(create) {
    useInsertionEffect(create);
}
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    _utils.registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectMaybe(function() {
        return _utils.insertStyles(cache, serialized, isStringTag);
    });
    return null;
};
var createStyled = function createStyled1(tag, options) {
    if (tag === undefined) throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) styles.push.apply(styles, args);
        else {
            if (args[0][0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++){
                if (args[0][i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
                styles.push(args[i], args[0][i]);
            }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class
        var Styled = _react1.withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = '';
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {};
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = _react.useContext(_react1.ThemeContext);
            }
            if (typeof props.className === 'string') className = _utils.getRegisteredStyles(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = _serialize.serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for(var _key in props){
                if (shouldUseAs && _key === 'as') continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            newProps.ref = ref;
            return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
                cache: cache,
                serialized: serialized,
                isStringTag: typeof FinalTag === 'string'
            }), /*#__PURE__*/ _react.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
            value: function value() {
                if (targetClassName === undefined && true) return 'NO_COMPONENT_SELECTOR';
                 // $FlowFixMe: coerce undefined to string
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled1(nextTag, _extendsDefault.default({}, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
        };
        return Styled;
    };
};
exports.default = createStyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@emotion/is-prop-valid":"6uRZg","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qiaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheProvider", ()=>_emotionElementCbed451FBrowserEsmJs.C
);
parcelHelpers.export(exports, "ThemeContext", ()=>_emotionElementCbed451FBrowserEsmJs.T
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_emotionElementCbed451FBrowserEsmJs.b
);
parcelHelpers.export(exports, "__unsafe_useEmotionCache", ()=>_emotionElementCbed451FBrowserEsmJs._
);
parcelHelpers.export(exports, "useTheme", ()=>_emotionElementCbed451FBrowserEsmJs.a
);
parcelHelpers.export(exports, "withEmotionCache", ()=>_emotionElementCbed451FBrowserEsmJs.w
);
parcelHelpers.export(exports, "withTheme", ()=>_emotionElementCbed451FBrowserEsmJs.d
);
parcelHelpers.export(exports, "ClassNames", ()=>ClassNames
);
parcelHelpers.export(exports, "Global", ()=>Global
);
parcelHelpers.export(exports, "createElement", ()=>jsx
);
parcelHelpers.export(exports, "css", ()=>css
);
parcelHelpers.export(exports, "jsx", ()=>jsx
);
parcelHelpers.export(exports, "keyframes", ()=>keyframes
);
var _react = require("react");
var _cache = require("@emotion/cache");
var _emotionElementCbed451FBrowserEsmJs = require("./emotion-element-cbed451f.browser.esm.js");
var _extends = require("@babel/runtime/helpers/extends");
var _weakMemoize = require("@emotion/weak-memoize");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var global = arguments[3];
var pkg = {
    name: "@emotion/react",
    version: "11.8.2",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.13.10",
        "@emotion/babel-plugin": "^11.7.1",
        "@emotion/cache": "^11.7.1",
        "@emotion/serialize": "^1.0.2",
        "@emotion/utils": "^1.1.0",
        "@emotion/weak-memoize": "^0.2.5",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@babel/core": {
            optional: true
        },
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@babel/core": "^7.13.10",
        "@emotion/css": "11.7.1",
        "@emotion/css-prettifier": "1.0.1",
        "@emotion/server": "11.4.0",
        "@emotion/styled": "11.8.1",
        "@types/react": "^16.9.11",
        dtslint: "^4.2.1",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact"
    }
};
var jsx = function jsx(type, props) {
    var args = arguments;
    if (props == null || !_emotionElementCbed451FBrowserEsmJs.h.call(props, 'css')) // $FlowFixMe
    return _react.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = _emotionElementCbed451FBrowserEsmJs.E;
    createElementArgArray[1] = _emotionElementCbed451FBrowserEsmJs.c(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
     // $FlowFixMe
    return _react.createElement.apply(null, createElementArgArray);
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : _react.useLayoutEffect;
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ _emotionElementCbed451FBrowserEsmJs.w(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = _serialize.serializeStyles([
        styles
    ], undefined, _react.useContext(_emotionElementCbed451FBrowserEsmJs.T));
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = _react.useRef();
    useInsertionEffect(function() {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675
        var sheet = new cache.sheet.constructor({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
        if (cache.sheet.tags.length) sheet.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute('data-emotion', key);
            sheet.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet,
            rehydrating
        ];
        return function() {
            sheet.flush();
        };
    }, [
        cache
    ]);
    useInsertionEffect(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        _utils.insertStyles(cache, serialized.next, true);
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
Global.displayName = 'EmotionGlobal';
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return _serialize.serializeStyles(args);
}
var keyframes = function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames1(args) {
    var len = args.length;
    var i = 0;
    var cls = '';
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case 'boolean':
                break;
            case 'object':
                if (Array.isArray(arg)) toAdd = classnames1(arg);
                else {
                    if (arg.styles !== undefined && arg.name !== undefined) console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                    toAdd = '';
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += ' ');
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += ' ');
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css1, className) {
    var registeredStyles = [];
    var rawClassName = _utils.getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css1(registeredStyles);
}
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    var rules = _emotionElementCbed451FBrowserEsmJs.u(function() {
        for(var i = 0; i < serializedArr.length; i++)var res = _utils.insertStyles(cache, serializedArr[i], false);
    });
    return null;
};
var ClassNames = /* #__PURE__ */ _emotionElementCbed451FBrowserEsmJs.w(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css2 = function css() {
        if (hasRendered && true) throw new Error('css can only be used during render');
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = _serialize.serializeStyles(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`
        _utils.registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx() {
        if (hasRendered && true) throw new Error('cx can only be used during render');
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css2, classnames(args));
    };
    var content = {
        css: css2,
        cx: cx,
        theme: _react.useContext(_emotionElementCbed451FBrowserEsmJs.T)
    };
    var ele = props.children(content);
    hasRendered = true;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serializedArr: serializedArr
    }), ele);
});
ClassNames.displayName = 'EmotionClassNames';
var isBrowser = true; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock
var isJest = typeof jest !== 'undefined';
if (isBrowser && !isJest) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    var globalContext = typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
     : isBrowser ? window : global;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";
    if (globalContext[globalKey]) console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    globalContext[globalKey] = true;
}

},{"react":"21dqq","@emotion/cache":"3Umtj","./emotion-element-cbed451f.browser.esm.js":"2bTfE","@babel/runtime/helpers/extends":"vw3vn","@emotion/weak-memoize":"iicyL","hoist-non-react-statics":"1GfsB","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Umtj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sheet = require("@emotion/sheet");
var _stylis = require("stylis");
var _weakMemoize = require("@emotion/weak-memoize");
var _memoize = require("@emotion/memoize");
var last = function last(arr) {
    return arr.length ? arr[arr.length - 1] : null;
}; // based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;
    while(true){
        previous = character;
        character = _stylis.peek(); // &\f
        if (previous === 38 && character === 12) points[index] = 1;
        if (_stylis.token(character)) break;
        _stylis.next();
    }
    return _stylis.slice(begin, _stylis.position);
};
var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch(_stylis.token(character)){
        case 0:
            // &\f
            if (character === 38 && _stylis.peek() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += identifierWithPointTracking(_stylis.position - 1, points, index);
            break;
        case 2:
            parsed[index] += _stylis.delimit(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = _stylis.peek() === 58 ? '&\f' : '';
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += _stylis.from(character);
    }
    while (character = _stylis.next())
    return parsed;
};
var getRules = function getRules(value, points) {
    return _stylis.dealloc(toRules(_stylis.alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat(element) {
    if (element.type !== 'rule' || !element.parent || // negative .length indicates that this rule has been already prefixed
    element.length < 1) return;
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== 'rule'){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel(element) {
    if (element.type === 'decl') {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = '';
            element.value = '';
        }
    }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
var isIgnoringComment = function isIgnoringComment(element) {
    return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
    return function(element, index, children) {
        if (element.type !== 'rule') return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses && cache.compat !== true) {
            var prevElement = index > 0 ? children[index - 1] : null;
            if (prevElement && isIgnoringComment(last(prevElement.children))) return;
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
            });
        }
    };
};
var isImportRule = function isImportRule(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
    for(var i = index - 1; i >= 0; i--){
        if (!isImportRule(children[i])) return true;
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement(element) {
    element.type = '';
    element.value = '';
    element["return"] = '';
    element.children = '';
    element.props = '';
};
var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
    if (!isImportRule(element)) return;
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
var defaultStylisPlugins = [
    _stylis.prefixer
];
var createCache = function createCache(options) {
    var key = options.key;
    if (!key) throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    if (key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute('data-emotion');
            if (dataEmotionAttribute.indexOf(' ') === -1) return;
            document.head.appendChild(node);
            node.setAttribute('data-s', '');
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    var inserted = {}; // $FlowFixMe
    var container;
    var nodesToHydrate = [];
    container = options.container || document.head;
    Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function(node) {
        var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe
        for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
        nodesToHydrate.push(node);
    });
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat () {
            return cache.compat;
        }
    }), incorrectImportAlarm);
    var currentSheet;
    var finalizingPlugins = [
        _stylis.stringify,
        function(element) {
            if (!element.root) {
                if (element["return"]) currentSheet.insert(element["return"]);
                else if (element.value && element.type !== _stylis.COMMENT) // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(element.value + "{}");
            }
        }
    ];
    var serializer = _stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis(styles) {
        return _stylis.serialize(_stylis.compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== undefined) currentSheet = {
            insert: function insert(rule) {
                sheet.insert(rule + serialized.map);
            }
        };
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) cache.inserted[serialized.name] = true;
    };
    var cache = {
        key: key,
        sheet: new _sheet.StyleSheet({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};
exports.default = createCache;

},{"@emotion/sheet":"1BWeq","stylis":"bMCXt","@emotion/weak-memoize":"iicyL","@emotion/memoize":"WW7h8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BWeq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyleSheet", ()=>StyleSheet
);
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ // $FlowFixMe
function sheetForTag(tag) {
    if (tag.sheet) // $FlowFixMe
    return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) // $FlowFixMe
        return document.styleSheets[i];
    }
}
function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);
    if (options.nonce !== undefined) tag.setAttribute('nonce', options.nonce);
    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
}
var StyleSheet = /*#__PURE__*/ function() {
    function StyleSheet1(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) before = _this.insertionPoint.nextSibling;
                else if (_this.prepend) before = _this.container.firstChild;
                else before = _this.before;
            } else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
    }
    var _proto = StyleSheet1.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
                if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
            }
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        this._alreadyInsertedOrderInsensitiveRule = false;
    };
    return StyleSheet1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bMCXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHARSET", ()=>f
);
parcelHelpers.export(exports, "COMMENT", ()=>c
);
parcelHelpers.export(exports, "COUNTER_STYLE", ()=>w
);
parcelHelpers.export(exports, "DECLARATION", ()=>t
);
parcelHelpers.export(exports, "DOCUMENT", ()=>v
);
parcelHelpers.export(exports, "FONT_FACE", ()=>b
);
parcelHelpers.export(exports, "FONT_FEATURE_VALUES", ()=>$
);
parcelHelpers.export(exports, "IMPORT", ()=>i
);
parcelHelpers.export(exports, "KEYFRAMES", ()=>p
);
parcelHelpers.export(exports, "MEDIA", ()=>u
);
parcelHelpers.export(exports, "MOZ", ()=>r
);
parcelHelpers.export(exports, "MS", ()=>e
);
parcelHelpers.export(exports, "NAMESPACE", ()=>h
);
parcelHelpers.export(exports, "PAGE", ()=>s
);
parcelHelpers.export(exports, "RULESET", ()=>n
);
parcelHelpers.export(exports, "SUPPORTS", ()=>l
);
parcelHelpers.export(exports, "VIEWPORT", ()=>o
);
parcelHelpers.export(exports, "WEBKIT", ()=>a
);
parcelHelpers.export(exports, "abs", ()=>k
);
parcelHelpers.export(exports, "alloc", ()=>U
);
parcelHelpers.export(exports, "append", ()=>S
);
parcelHelpers.export(exports, "assign", ()=>g
);
parcelHelpers.export(exports, "caret", ()=>Q
);
parcelHelpers.export(exports, "char", ()=>K
);
parcelHelpers.export(exports, "character", ()=>G
);
parcelHelpers.export(exports, "characters", ()=>H
);
parcelHelpers.export(exports, "charat", ()=>z
);
parcelHelpers.export(exports, "column", ()=>D
);
parcelHelpers.export(exports, "combine", ()=>q
);
parcelHelpers.export(exports, "comment", ()=>se
);
parcelHelpers.export(exports, "commenter", ()=>re
);
parcelHelpers.export(exports, "compile", ()=>ce
);
parcelHelpers.export(exports, "copy", ()=>J
);
parcelHelpers.export(exports, "dealloc", ()=>V
);
parcelHelpers.export(exports, "declaration", ()=>ue
);
parcelHelpers.export(exports, "delimit", ()=>W
);
parcelHelpers.export(exports, "delimiter", ()=>ee
);
parcelHelpers.export(exports, "escaping", ()=>_
);
parcelHelpers.export(exports, "from", ()=>d
);
parcelHelpers.export(exports, "hash", ()=>m
);
parcelHelpers.export(exports, "identifier", ()=>ae
);
parcelHelpers.export(exports, "indexof", ()=>C
);
parcelHelpers.export(exports, "length", ()=>E
);
parcelHelpers.export(exports, "line", ()=>B
);
parcelHelpers.export(exports, "match", ()=>y
);
parcelHelpers.export(exports, "middleware", ()=>le
);
parcelHelpers.export(exports, "namespace", ()=>pe
);
parcelHelpers.export(exports, "next", ()=>N
);
parcelHelpers.export(exports, "node", ()=>I
);
parcelHelpers.export(exports, "parse", ()=>ne
);
parcelHelpers.export(exports, "peek", ()=>P
);
parcelHelpers.export(exports, "position", ()=>F
);
parcelHelpers.export(exports, "prefix", ()=>ie
);
parcelHelpers.export(exports, "prefixer", ()=>he
);
parcelHelpers.export(exports, "prev", ()=>L
);
parcelHelpers.export(exports, "replace", ()=>j
);
parcelHelpers.export(exports, "ruleset", ()=>te
);
parcelHelpers.export(exports, "rulesheet", ()=>ve
);
parcelHelpers.export(exports, "serialize", ()=>fe
);
parcelHelpers.export(exports, "sizeof", ()=>M
);
parcelHelpers.export(exports, "slice", ()=>R
);
parcelHelpers.export(exports, "stringify", ()=>oe
);
parcelHelpers.export(exports, "strlen", ()=>O
);
parcelHelpers.export(exports, "substr", ()=>A
);
parcelHelpers.export(exports, "token", ()=>T
);
parcelHelpers.export(exports, "tokenize", ()=>X
);
parcelHelpers.export(exports, "tokenizer", ()=>Z
);
parcelHelpers.export(exports, "trim", ()=>x
);
parcelHelpers.export(exports, "whitespace", ()=>Y
);
var e = "-ms-";
var r = "-moz-";
var a = "-webkit-";
var c = "comm";
var n = "rule";
var t = "decl";
var s = "@page";
var u = "@media";
var i = "@import";
var f = "@charset";
var o = "@viewport";
var l = "@supports";
var v = "@document";
var h = "@namespace";
var p = "@keyframes";
var b = "@font-face";
var w = "@counter-style";
var $ = "@font-feature-values";
var k = Math.abs;
var d = String.fromCharCode;
var g = Object.assign;
function m(e1, r1) {
    return (((r1 << 2 ^ z(e1, 0)) << 2 ^ z(e1, 1)) << 2 ^ z(e1, 2)) << 2 ^ z(e1, 3);
}
function x(e2) {
    return e2.trim();
}
function y(e3, r2) {
    return (e3 = r2.exec(e3)) ? e3[0] : e3;
}
function j(e4, r3, a1) {
    return e4.replace(r3, a1);
}
function C(e5, r4) {
    return e5.indexOf(r4);
}
function z(e6, r5) {
    return e6.charCodeAt(r5) | 0;
}
function A(e7, r6, a2) {
    return e7.slice(r6, a2);
}
function O(e8) {
    return e8.length;
}
function M(e9) {
    return e9.length;
}
function S(e10, r7) {
    return r7.push(e10), e10;
}
function q(e11, r8) {
    return e11.map(r8).join("");
}
var B = 1;
var D = 1;
var E = 0;
var F = 0;
var G = 0;
var H = "";
function I(e12, r9, a3, c1, n1, t1, s1) {
    return {
        value: e12,
        root: r9,
        parent: a3,
        type: c1,
        props: n1,
        children: t1,
        line: B,
        column: D,
        length: s1,
        return: ""
    };
}
function J(e13, r10) {
    return g(I("", null, null, "", null, null, 0), e13, {
        length: -e13.length
    }, r10);
}
function K() {
    return G;
}
function L() {
    G = F > 0 ? z(H, --F) : 0;
    if (D--, G === 10) D = 1, B--;
    return G;
}
function N() {
    G = F < E ? z(H, F++) : 0;
    if (D++, G === 10) D = 1, B++;
    return G;
}
function P() {
    return z(H, F);
}
function Q() {
    return F;
}
function R(e14, r11) {
    return A(H, e14, r11);
}
function T(e15) {
    switch(e15){
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
            return 4;
        case 58:
            return 3;
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function U(e16) {
    return B = D = 1, E = O(H = e16), F = 0, [];
}
function V(e17) {
    return H = "", e17;
}
function W(e18) {
    return x(R(F - 1, ee(e18 === 91 ? e18 + 2 : e18 === 40 ? e18 + 1 : e18)));
}
function X(e19) {
    return V(Z(U(e19)));
}
function Y(e20) {
    while(G = P())if (G < 33) N();
    else break;
    return T(e20) > 2 || T(G) > 3 ? "" : " ";
}
function Z(e21) {
    while(N())switch(T(G)){
        case 0:
            S(ae(F - 1), e21);
            break;
        case 2:
            S(W(G), e21);
            break;
        default:
            S(d(G), e21);
    }
    return e21;
}
function _(e22, r12) {
    while(--r12 && N())if (G < 48 || G > 102 || G > 57 && G < 65 || G > 70 && G < 97) break;
    return R(e22, Q() + (r12 < 6 && P() == 32 && N() == 32));
}
function ee(e23) {
    while(N())switch(G){
        case e23:
            return F;
        case 34:
        case 39:
            if (e23 !== 34 && e23 !== 39) ee(G);
            break;
        case 40:
            if (e23 === 41) ee(e23);
            break;
        case 92:
            N();
            break;
    }
    return F;
}
function re(e24, r13) {
    while(N())if (e24 + G === 57) break;
    else if (e24 + G === 84 && P() === 47) break;
    return "/*" + R(r13, F - 1) + "*" + d(e24 === 47 ? e24 : N());
}
function ae(e25) {
    while(!T(P()))N();
    return R(e25, F);
}
function ce(e26) {
    return V(ne("", null, null, null, [
        ""
    ], e26 = U(e26), 0, [
        0
    ], e26));
}
function ne(e27, r14, a4, c2, n2, t2, s2, u1, i1) {
    var f1 = 0;
    var o1 = 0;
    var l1 = s2;
    var v1 = 0;
    var h1 = 0;
    var p1 = 0;
    var b1 = 1;
    var w1 = 1;
    var $1 = 1;
    var k1 = 0;
    var g1 = "";
    var m1 = n2;
    var x1 = t2;
    var y1 = c2;
    var z1 = g1;
    while(w1)switch(p1 = k1, k1 = N()){
        case 40:
            if (p1 != 108 && z1.charCodeAt(l1 - 1) == 58) {
                if (C(z1 += j(W(k1), "&", "&\f"), "&\f") != -1) $1 = -1;
                break;
            }
        case 34:
        case 39:
        case 91:
            z1 += W(k1);
            break;
        case 9:
        case 10:
        case 13:
        case 32:
            z1 += Y(p1);
            break;
        case 92:
            z1 += _(Q() - 1, 7);
            continue;
        case 47:
            switch(P()){
                case 42:
                case 47:
                    S(se(re(N(), Q()), r14, a4), i1);
                    break;
                default:
                    z1 += "/";
            }
            break;
        case 123 * b1:
            u1[f1++] = O(z1) * $1;
        case 125 * b1:
        case 59:
        case 0:
            switch(k1){
                case 0:
                case 125:
                    w1 = 0;
                case 59 + o1:
                    if (h1 > 0 && O(z1) - l1) S(h1 > 32 ? ue(z1 + ";", c2, a4, l1 - 1) : ue(j(z1, " ", "") + ";", c2, a4, l1 - 2), i1);
                    break;
                case 59:
                    z1 += ";";
                default:
                    S(y1 = te(z1, r14, a4, f1, o1, n2, u1, g1, m1 = [], x1 = [], l1), t2);
                    if (k1 === 123) {
                        if (o1 === 0) ne(z1, r14, y1, y1, m1, t2, l1, u1, x1);
                        else switch(v1){
                            case 100:
                            case 109:
                            case 115:
                                ne(e27, y1, y1, c2 && S(te(e27, y1, y1, 0, 0, n2, u1, g1, n2, m1 = [], l1), x1), n2, x1, l1, u1, c2 ? m1 : x1);
                                break;
                            default:
                                ne(z1, y1, y1, y1, [
                                    ""
                                ], x1, 0, u1, x1);
                        }
                    }
            }
            f1 = o1 = h1 = 0, b1 = $1 = 1, g1 = z1 = "", l1 = s2;
            break;
        case 58:
            l1 = 1 + O(z1), h1 = p1;
        default:
            if (b1 < 1) {
                if (k1 == 123) --b1;
                else if (k1 == 125 && (b1++) == 0 && L() == 125) continue;
            }
            switch(z1 += d(k1), k1 * b1){
                case 38:
                    $1 = o1 > 0 ? 1 : (z1 += "\f", -1);
                    break;
                case 44:
                    u1[f1++] = (O(z1) - 1) * $1, $1 = 1;
                    break;
                case 64:
                    if (P() === 45) z1 += W(N());
                    v1 = P(), o1 = l1 = O(g1 = z1 += ae(Q())), k1++;
                    break;
                case 45:
                    if (p1 === 45 && O(z1) == 2) b1 = 0;
            }
    }
    return t2;
}
function te(e28, r15, a5, c3, t3, s3, u2, i2, f2, o2, l2) {
    var v2 = t3 - 1;
    var h2 = t3 === 0 ? s3 : [
        ""
    ];
    var p2 = M(h2);
    for(var b2 = 0, w2 = 0, $2 = 0; b2 < c3; ++b2)for(var d1 = 0, g2 = A(e28, v2 + 1, v2 = k(w2 = u2[b2])), m2 = e28; d1 < p2; ++d1)if (m2 = x(w2 > 0 ? h2[d1] + " " + g2 : j(g2, /&\f/g, h2[d1]))) f2[$2++] = m2;
    return I(e28, r15, a5, t3 === 0 ? n : i2, f2, o2, l2);
}
function se(e29, r16, a6) {
    return I(e29, r16, a6, c, d(K()), A(e29, 2, -2), 0);
}
function ue(e30, r17, a7, c4) {
    return I(e30, r17, a7, t, A(e30, 0, c4), A(e30, c4 + 1, -1), c4);
}
function ie(c5, n3) {
    switch(m(c5, n3)){
        case 5103:
            return a + "print-" + c5 + c5;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return a + c5 + c5;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return a + c5 + r + c5 + e + c5 + c5;
        case 6828:
        case 4268:
            return a + c5 + e + c5 + c5;
        case 6165:
            return a + c5 + e + "flex-" + c5 + c5;
        case 5187:
            return a + c5 + j(c5, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + c5;
        case 5443:
            return a + c5 + e + "flex-item-" + j(c5, /flex-|-self/, "") + c5;
        case 4675:
            return a + c5 + e + "flex-line-pack" + j(c5, /align-content|flex-|-self/, "") + c5;
        case 5548:
            return a + c5 + e + j(c5, "shrink", "negative") + c5;
        case 5292:
            return a + c5 + e + j(c5, "basis", "preferred-size") + c5;
        case 6060:
            return a + "box-" + j(c5, "-grow", "") + a + c5 + e + j(c5, "grow", "positive") + c5;
        case 4554:
            return a + j(c5, /([^-])(transform)/g, "$1" + a + "$2") + c5;
        case 6187:
            return j(j(j(c5, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), c5, "") + c5;
        case 5495:
        case 3959:
            return j(c5, /(image-set\([^]*)/, a + "$1" + "$`$1");
        case 4968:
            return j(j(c5, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + c5 + c5;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return j(c5, /(.+)-inline(.+)/, a + "$1$2") + c5;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (O(c5) - 1 - n3 > 6) switch(z(c5, n3 + 1)){
                case 109:
                    if (z(c5, n3 + 4) !== 45) break;
                case 102:
                    return j(c5, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (z(c5, n3 + 3) == 108 ? "$3" : "$2-$3")) + c5;
                case 115:
                    return ~C(c5, "stretch") ? ie(j(c5, "stretch", "fill-available"), n3) + c5 : c5;
            }
            break;
        case 4949:
            if (z(c5, n3 + 1) !== 115) break;
        case 6444:
            switch(z(c5, O(c5) - 3 - (~C(c5, "!important") && 10))){
                case 107:
                    return j(c5, ":", ":" + a) + c5;
                case 101:
                    return j(c5, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (z(c5, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + c5;
            }
            break;
        case 5936:
            switch(z(c5, n3 + 11)){
                case 114:
                    return a + c5 + e + j(c5, /[svh]\w+-[tblr]{2}/, "tb") + c5;
                case 108:
                    return a + c5 + e + j(c5, /[svh]\w+-[tblr]{2}/, "tb-rl") + c5;
                case 45:
                    return a + c5 + e + j(c5, /[svh]\w+-[tblr]{2}/, "lr") + c5;
            }
            return a + c5 + e + c5 + c5;
    }
    return c5;
}
function fe(e31, r18) {
    var a8 = "";
    var c6 = M(e31);
    for(var n4 = 0; n4 < c6; n4++)a8 += r18(e31[n4], n4, e31, r18) || "";
    return a8;
}
function oe(e32, r, a9, s4) {
    switch(e32.type){
        case i:
        case t:
            return e32.return = e32.return || e32.value;
        case c:
            return "";
        case p:
            return e32.return = e32.value + "{" + fe(e32.children, s4) + "}";
        case n:
            e32.value = e32.props.join(",");
    }
    return O(a9 = fe(e32.children, s4)) ? e32.return = e32.value + "{" + a9 + "}" : "";
}
function le(e33) {
    var r19 = M(e33);
    return function(a10, c7, n5, t4) {
        var s5 = "";
        for(var u3 = 0; u3 < r19; u3++)s5 += e33[u3](a10, c7, n5, t4) || "";
        return s5;
    };
}
function ve(e34) {
    return function(r20) {
        if (!r20.root) {
            if (r20 = r20.return) e34(r20);
        }
    };
}
function he(c8, s, u, i3) {
    if (c8.length > -1) {
        if (!c8.return) switch(c8.type){
            case t:
                c8.return = ie(c8.value, c8.length);
                break;
            case p:
                return fe([
                    J(c8, {
                        value: j(c8.value, "@", "@" + a)
                    })
                ], i3);
            case n:
                if (c8.length) return q(c8.props, function(n6) {
                    switch(y(n6, /(::plac\w+|:read-\w+)/)){
                        case ":read-only":
                        case ":read-write":
                            return fe([
                                J(c8, {
                                    props: [
                                        j(n6, /:(read-\w+)/, ":" + r + "$1")
                                    ]
                                })
                            ], i3);
                        case "::placeholder":
                            return fe([
                                J(c8, {
                                    props: [
                                        j(n6, /:(plac\w+)/, ":" + a + "input-$1")
                                    ]
                                }),
                                J(c8, {
                                    props: [
                                        j(n6, /:(plac\w+)/, ":" + r + "$1")
                                    ]
                                }),
                                J(c8, {
                                    props: [
                                        j(n6, /:(plac\w+)/, e + "input-$1")
                                    ]
                                })
                            ], i3);
                    }
                    return "";
                });
        }
    }
}
function pe(e35) {
    switch(e35.type){
        case n:
            e35.props = e35.props.map(function(r21) {
                return q(X(r21), function(r22, a11, c9) {
                    switch(z(r22, 0)){
                        case 12:
                            return A(r22, 1, O(r22));
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return r22;
                        case 58:
                            if (c9[++a11] === "global") c9[a11] = "", c9[++a11] = "\f" + A(c9[a11], a11 = 1, -1);
                        case 32:
                            return a11 === 1 ? "" : r22;
                        default:
                            switch(a11){
                                case 0:
                                    e35 = r22;
                                    return M(c9) > 1 ? "" : r22;
                                case a11 = M(c9) - 1:
                                case 2:
                                    return a11 === 2 ? r22 + e35 + e35 : r22 + e35;
                                default:
                                    return r22;
                            }
                    }
                });
            });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iicyL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // $FlowFixMe
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};
exports.default = weakMemoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bTfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>CacheProvider
);
parcelHelpers.export(exports, "E", ()=>Emotion
);
parcelHelpers.export(exports, "T", ()=>ThemeContext
);
parcelHelpers.export(exports, "_", ()=>__unsafe_useEmotionCache
);
parcelHelpers.export(exports, "a", ()=>useTheme
);
parcelHelpers.export(exports, "b", ()=>ThemeProvider
);
parcelHelpers.export(exports, "c", ()=>createEmotionProps
);
parcelHelpers.export(exports, "d", ()=>withTheme
);
parcelHelpers.export(exports, "h", ()=>hasOwnProperty
);
parcelHelpers.export(exports, "u", ()=>useInsertionEffectMaybe
);
parcelHelpers.export(exports, "w", ()=>withEmotionCache
);
var _react = require("react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _emotionReactIsolatedHnrsBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionReactIsolatedHnrsBrowserEsmJs);
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ _react.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */ _cacheDefault.default({
    key: 'css'
}) : null);
EmotionCacheContext.displayName = 'EmotionCacheContext';
var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
    return _react.useContext(EmotionCacheContext);
};
var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/ _react.forwardRef(function(props, ref) {
        // the cache will never be null in the browser
        var cache = _react.useContext(EmotionCacheContext);
        return func(props, cache, ref);
    });
};
var ThemeContext = /* #__PURE__ */ _react.createContext({});
ThemeContext.displayName = 'EmotionThemeContext';
var useTheme = function useTheme() {
    return _react.useContext(ThemeContext);
};
var getTheme = function getTheme(outerTheme, theme) {
    if (typeof theme === 'function') {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme)) throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
        return mergedTheme;
    }
    if (theme == null || typeof theme !== 'object' || Array.isArray(theme)) throw new Error('[ThemeProvider] Please make your theme prop a plain object');
    return _extendsDefault.default({}, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ _weakMemoizeDefault.default(function(outerTheme) {
    return _weakMemoizeDefault.default(function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider(props) {
    var theme = _react.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return /*#__PURE__*/ _react.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children);
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || 'Component';
    var render = function render(props, ref) {
        var theme = _react.useContext(ThemeContext);
        return /*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
            theme: theme,
            ref: ref
        }, props));
    }; // $FlowFixMe
    var WithTheme = /*#__PURE__*/ _react.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return _emotionReactIsolatedHnrsBrowserEsmJsDefault.default(WithTheme, Component);
}
var getLastPart = function getLastPart(functionName) {
    // The match may be something like 'Object.createEmotionProps' or
    // 'Loader.prototype.render'
    var parts = functionName.split('.');
    return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
    // V8
    var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
    if (match) return getLastPart(match[1]); // Safari / Firefox
    match = /^([A-Za-z0-9$.]+)@/.exec(line);
    if (match) return getLastPart(match[1]);
    return undefined;
};
var internalReactFunctionNames = /* #__PURE__ */ new Set([
    'renderWithHooks',
    'processChild',
    'finishClassComponent',
    'renderToString'
]); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.
var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
    return identifier.replace(/\$/g, '-');
};
var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
    if (!stackTrace) return undefined;
    var lines = stackTrace.split('\n');
    for(var i = 0; i < lines.length; i++){
        var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"
        if (!functionName) continue; // If we reach one of these, we have gone too far and should quit
        if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
        // uppercase letter
        if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
    }
    return undefined;
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : function useInsertionEffect(create) {
    create();
};
function useInsertionEffectMaybe(create) {
    useInsertionEffect(create);
}
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
    if (typeof props.css === 'string' && props.css.indexOf(':') !== -1) throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key)) newProps[key] = props[key];
    newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
    // the label hasn't already been computed
    if (!!props.css && (typeof props.css !== 'object' || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {
        var label = getLabelFromStackTrace(new Error().stack);
        if (label) newProps[labelPropName] = label;
    }
    return newProps;
};
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    _utils.registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectMaybe(function() {
        return _utils.insertStyles(cache, serialized, isStringTag);
    });
    return null;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var WrappedComponent = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = '';
    if (typeof props.className === 'string') className = _utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = _serialize.serializeStyles(registeredStyles, undefined, _react.useContext(ThemeContext));
    if (serialized.name.indexOf('-') === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) serialized = _serialize.serializeStyles([
            serialized,
            'label:' + labelFromStack + ';'
        ]);
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && key !== labelPropName) newProps[key] = props[key];
    newProps.ref = ref;
    newProps.className = className;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === 'string'
    }), /*#__PURE__*/ _react.createElement(WrappedComponent, newProps));
});
Emotion.displayName = 'EmotionCssPropInternal';

},{"react":"21dqq","@emotion/cache":"3Umtj","@babel/runtime/helpers/esm/extends":"fTBFS","@emotion/weak-memoize":"iicyL","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUsDD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return _hoistNonReactStaticsDefault.default(targetComponent, sourceComponent);
};
exports.default = hoistNonReactStatics;

},{"hoist-non-react-statics":"1GfsB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UI8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegisteredStyles", ()=>getRegisteredStyles
);
parcelHelpers.export(exports, "insertStyles", ()=>insertStyles
);
parcelHelpers.export(exports, "registerStyles", ()=>registerStyles
);
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else rawClassName += className + " ";
    });
    return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;
        do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
            current = current.next;
        }while (current !== undefined)
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kS2E2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeStyles", ()=>serializeStyles
);
var _hash = require("@emotion/hash");
var _hashDefault = parcelHelpers.interopDefault(_hash);
var _unitless = require("@emotion/unitless");
var _unitlessDefault = parcelHelpers.interopDefault(_unitless);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */ _memoizeDefault.default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
    switch(key){
        case 'animation':
        case 'animationName':
            if (typeof value === 'string') return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if (_unitlessDefault.default[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) return value + 'px';
    return value;
};
var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
var contentValues = [
    'normal',
    'none',
    'initial',
    'inherit',
    'unset'
];
var oldProcessStyleValue = processStyleValue;
var msPattern = /^-ms-/;
var hyphenPattern = /-(.)/g;
var hyphenatedCache = {};
processStyleValue = function processStyleValue(key, value) {
    if (key === 'content') {
        if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
        }) + "?");
    }
    return processed;
};
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return '';
    if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
        return interpolation;
    }
    switch(typeof interpolation){
        case 'boolean':
            return '';
        case 'object':
            if (interpolation.anim === 1) {
                cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                };
                return interpolation.name;
            }
            if (interpolation.styles !== undefined) {
                var next = interpolation.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = interpolation.styles + ";";
                if (interpolation.map !== undefined) styles += interpolation.map;
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case 'function':
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            break;
        case 'string':
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
                return "${" + fakeVarName + "}";
            });
            if (matched.length) console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, [
                "`" + replaced + "`"
            ]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) return interpolation;
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = '';
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var _key in obj){
        var value = obj[_key];
        if (typeof value !== 'object') {
            if (registered != null && registered[value] !== undefined) string += _key + "{" + registered[value] + "}";
            else if (isProcessableValue(value)) string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        } else {
            if (_key === 'NO_COMPONENT_SELECTOR' && true) throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(_key){
                    case 'animation':
                    case 'animationName':
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                    default:
                        if (_key === 'undefined') console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                        string += _key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        if (strings[0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (strings[i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles += strings[i];
        }
    }
    var sourceMap;
    styles = styles.replace(sourceMapPattern, function(match) {
        sourceMap = match;
        return '';
    });
    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match1; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match1 = labelPattern.exec(styles)) !== null)identifierName += '-' + match1[1];
    var name = _hashDefault.default(styles) + identifierName;
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
    };
};

},{"@emotion/hash":"h4XqR","@emotion/unitless":"pVndT","@emotion/memoize":"WW7h8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4XqR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 255;
            h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}
exports.default = murmur2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"pVndT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
exports.default = unitlessKeys;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75u97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_styledEngineProviderDefault.default
);
var _styledEngineProvider = require("./StyledEngineProvider");
var _styledEngineProviderDefault = parcelHelpers.interopDefault(_styledEngineProvider);

},{"./StyledEngineProvider":"gFFvH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFFvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _cache = require("@emotion/cache"); // prepend: true moves MUI styles to the top of the <head> so they're loaded first.
var _cacheDefault = parcelHelpers.interopDefault(_cache);
// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.
var _jsxRuntime = require("react/jsx-runtime");
const cache = _cacheDefault.default({
    key: 'css',
    prepend: true
});
function StyledEngineProvider(props) {
    const { injectFirst , children  } = props;
    return injectFirst ? /*#__PURE__*/ _jsxRuntime.jsx(_react1.CacheProvider, {
        value: cache,
        children: children
    }) : children;
}
exports.default = StyledEngineProvider;
StyledEngineProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */ injectFirst: _propTypesDefault.default.bool
};

},{"react":"21dqq","prop-types":"7wKI2","@emotion/react":"9qiaY","@emotion/cache":"3Umtj","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AEwr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"kujY4"}],"kujY4":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = '' + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"21dqq"}],"GH0SO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_globalStylesDefault.default
);
var _globalStyles = require("./GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);

},{"./GlobalStyles":"amlow","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amlow":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _jsxRuntime = require("react/jsx-runtime");
function isEmpty(obj) {
    return obj === undefined || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles(props) {
    const { styles , defaultTheme ={}  } = props;
    const globalStyles = typeof styles === 'function' ? (themeInput)=>styles(isEmpty(themeInput) ? defaultTheme : themeInput)
     : styles;
    return /*#__PURE__*/ _jsxRuntime.jsx(_react1.Global, {
        styles: globalStyles
    });
}
exports.default = GlobalStyles;
GlobalStyles.propTypes = {
    defaultTheme: _propTypesDefault.default.object,
    styles: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ])
};

},{"react":"21dqq","prop-types":"7wKI2","@emotion/react":"9qiaY","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9eacX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "border", ()=>border
);
parcelHelpers.export(exports, "borderTop", ()=>borderTop
);
parcelHelpers.export(exports, "borderRight", ()=>borderRight
);
parcelHelpers.export(exports, "borderBottom", ()=>borderBottom
);
parcelHelpers.export(exports, "borderLeft", ()=>borderLeft
);
parcelHelpers.export(exports, "borderColor", ()=>borderColor
);
parcelHelpers.export(exports, "borderTopColor", ()=>borderTopColor
);
parcelHelpers.export(exports, "borderRightColor", ()=>borderRightColor
);
parcelHelpers.export(exports, "borderBottomColor", ()=>borderBottomColor
);
parcelHelpers.export(exports, "borderLeftColor", ()=>borderLeftColor
);
parcelHelpers.export(exports, "borderRadius", ()=>borderRadius
);
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _spacing = require("./spacing");
var _breakpoints = require("./breakpoints");
function getBorder(value) {
    if (typeof value !== 'number') return value;
    return `${value}px solid`;
}
const border = _styleDefault.default({
    prop: 'border',
    themeKey: 'borders',
    transform: getBorder
});
const borderTop = _styleDefault.default({
    prop: 'borderTop',
    themeKey: 'borders',
    transform: getBorder
});
const borderRight = _styleDefault.default({
    prop: 'borderRight',
    themeKey: 'borders',
    transform: getBorder
});
const borderBottom = _styleDefault.default({
    prop: 'borderBottom',
    themeKey: 'borders',
    transform: getBorder
});
const borderLeft = _styleDefault.default({
    prop: 'borderLeft',
    themeKey: 'borders',
    transform: getBorder
});
const borderColor = _styleDefault.default({
    prop: 'borderColor',
    themeKey: 'palette'
});
const borderTopColor = _styleDefault.default({
    prop: 'borderTopColor',
    themeKey: 'palette'
});
const borderRightColor = _styleDefault.default({
    prop: 'borderRightColor',
    themeKey: 'palette'
});
const borderBottomColor = _styleDefault.default({
    prop: 'borderBottomColor',
    themeKey: 'palette'
});
const borderLeftColor = _styleDefault.default({
    prop: 'borderLeftColor',
    themeKey: 'palette'
});
const borderRadius = (props)=>{
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
        const styleFromPropValue = (propValue)=>({
                borderRadius: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
};
borderRadius.propTypes = {
    borderRadius: _responsivePropTypeDefault.default
};
borderRadius.filterProps = [
    'borderRadius'
];
const borders = _composeDefault.default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
exports.default = borders;

},{"./responsivePropType":"1dM4b","./style":"juhi3","./compose":"artaj","./spacing":"5kYt9","./breakpoints":"jN5Vx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dM4b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const responsivePropType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.string,
    _propTypesDefault.default.object,
    _propTypesDefault.default.array
]);
exports.default = responsivePropType;

},{"prop-types":"7wKI2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juhi3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPath", ()=>getPath
);
var _utils = require("@mui/utils");
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _breakpoints = require("./breakpoints");
function getPath(obj, path) {
    if (!path || typeof path !== 'string') return null;
    return path.split('.').reduce((acc, item)=>acc && acc[item] ? acc[item] : null
    , obj);
}
function getValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === 'function') value = themeMapping(propValueFinal);
    else if (Array.isArray(themeMapping)) value = themeMapping[propValueFinal] || userValue;
    else value = getPath(themeMapping, propValueFinal) || userValue;
    if (transform) value = transform(value);
    return value;
}
function style(options) {
    const { prop , cssProperty =options.prop , themeKey , transform  } = options;
    const fn = (props)=>{
        if (props[prop] == null) return null;
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = (propValueFinal)=>{
            let value = getValue(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = getValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : _utils.unstable_capitalize(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return _breakpoints.handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
        [prop]: _responsivePropTypeDefault.default
    };
    fn.filterProps = [
        prop
    ];
    return fn;
}
exports.default = style;

},{"@mui/utils":"cttLn","./responsivePropType":"1dM4b","./breakpoints":"jN5Vx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cttLn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chainPropTypes", ()=>_chainPropTypesDefault.default
);
parcelHelpers.export(exports, "deepmerge", ()=>_deepmergeDefault.default
);
parcelHelpers.export(exports, "isPlainObject", ()=>_deepmerge.isPlainObject
);
parcelHelpers.export(exports, "elementAcceptingRef", ()=>_elementAcceptingRefDefault.default
);
parcelHelpers.export(exports, "elementTypeAcceptingRef", ()=>_elementTypeAcceptingRefDefault.default
);
parcelHelpers.export(exports, "exactProp", ()=>_exactPropDefault.default
);
parcelHelpers.export(exports, "formatMuiErrorMessage", ()=>_formatMuiErrorMessageDefault.default
);
parcelHelpers.export(exports, "getDisplayName", ()=>_getDisplayNameDefault.default
);
parcelHelpers.export(exports, "HTMLElementType", ()=>_htmlelementTypeDefault.default
);
parcelHelpers.export(exports, "ponyfillGlobal", ()=>_ponyfillGlobalDefault.default
);
parcelHelpers.export(exports, "refType", ()=>_refTypeDefault.default
);
parcelHelpers.export(exports, "unstable_capitalize", ()=>_capitalizeDefault.default
);
parcelHelpers.export(exports, "unstable_createChainedFunction", ()=>_createChainedFunctionDefault.default
);
parcelHelpers.export(exports, "unstable_debounce", ()=>_debounceDefault.default
);
parcelHelpers.export(exports, "unstable_deprecatedPropType", ()=>_deprecatedPropTypeDefault.default
);
parcelHelpers.export(exports, "unstable_isMuiElement", ()=>_isMuiElementDefault.default
);
parcelHelpers.export(exports, "unstable_ownerDocument", ()=>_ownerDocumentDefault.default
);
parcelHelpers.export(exports, "unstable_ownerWindow", ()=>_ownerWindowDefault.default
);
parcelHelpers.export(exports, "unstable_requirePropFactory", ()=>_requirePropFactoryDefault.default
);
parcelHelpers.export(exports, "unstable_setRef", ()=>_setRefDefault.default
);
parcelHelpers.export(exports, "unstable_useEnhancedEffect", ()=>_useEnhancedEffectDefault.default
);
parcelHelpers.export(exports, "unstable_useId", ()=>_useIdDefault.default
);
parcelHelpers.export(exports, "unstable_unsupportedProp", ()=>_unsupportedPropDefault.default
);
parcelHelpers.export(exports, "unstable_useControlled", ()=>_useControlledDefault.default
);
parcelHelpers.export(exports, "unstable_useEventCallback", ()=>_useEventCallbackDefault.default
);
parcelHelpers.export(exports, "unstable_useForkRef", ()=>_useForkRefDefault.default
);
parcelHelpers.export(exports, "unstable_useIsFocusVisible", ()=>_useIsFocusVisibleDefault.default
);
parcelHelpers.export(exports, "unstable_getScrollbarSize", ()=>_getScrollbarSizeDefault.default
);
parcelHelpers.export(exports, "unstable_detectScrollType", ()=>_scrollLeft.detectScrollType
);
parcelHelpers.export(exports, "unstable_getNormalizedScrollLeft", ()=>_scrollLeft.getNormalizedScrollLeft
);
parcelHelpers.export(exports, "usePreviousProps", ()=>_usePreviousPropsDefault.default
);
parcelHelpers.export(exports, "visuallyHidden", ()=>_visuallyHiddenDefault.default
);
parcelHelpers.export(exports, "integerPropType", ()=>_integerPropTypeDefault.default
);
parcelHelpers.export(exports, "internal_resolveProps", ()=>_resolvePropsDefault.default
);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
var _deepmerge = require("./deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _elementAcceptingRef = require("./elementAcceptingRef");
var _elementAcceptingRefDefault = parcelHelpers.interopDefault(_elementAcceptingRef);
var _elementTypeAcceptingRef = require("./elementTypeAcceptingRef");
var _elementTypeAcceptingRefDefault = parcelHelpers.interopDefault(_elementTypeAcceptingRef);
var _exactProp = require("./exactProp");
var _exactPropDefault = parcelHelpers.interopDefault(_exactProp);
var _formatMuiErrorMessage = require("./formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _getDisplayName = require("./getDisplayName");
var _getDisplayNameDefault = parcelHelpers.interopDefault(_getDisplayName);
var _htmlelementType = require("./HTMLElementType");
var _htmlelementTypeDefault = parcelHelpers.interopDefault(_htmlelementType);
var _ponyfillGlobal = require("./ponyfillGlobal");
var _ponyfillGlobalDefault = parcelHelpers.interopDefault(_ponyfillGlobal);
var _refType = require("./refType");
var _refTypeDefault = parcelHelpers.interopDefault(_refType);
var _capitalize = require("./capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _debounce = require("./debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _deprecatedPropType = require("./deprecatedPropType");
var _deprecatedPropTypeDefault = parcelHelpers.interopDefault(_deprecatedPropType);
var _isMuiElement = require("./isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
var _requirePropFactory = require("./requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useId = require("./useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
var _unsupportedProp = require("./unsupportedProp");
var _unsupportedPropDefault = parcelHelpers.interopDefault(_unsupportedProp);
var _useControlled = require("./useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useForkRef = require("./useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useIsFocusVisible = require("./useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _getScrollbarSize = require("./getScrollbarSize");
var _getScrollbarSizeDefault = parcelHelpers.interopDefault(_getScrollbarSize);
var _scrollLeft = require("./scrollLeft");
var _usePreviousProps = require("./usePreviousProps");
var _usePreviousPropsDefault = parcelHelpers.interopDefault(_usePreviousProps);
var _visuallyHidden = require("./visuallyHidden");
var _visuallyHiddenDefault = parcelHelpers.interopDefault(_visuallyHidden);
var _integerPropType = require("./integerPropType");
var _integerPropTypeDefault = parcelHelpers.interopDefault(_integerPropType);
var _resolveProps = require("./resolveProps");
var _resolvePropsDefault = parcelHelpers.interopDefault(_resolveProps);

},{"./chainPropTypes":"cdHT5","./deepmerge":"dV1xi","./elementAcceptingRef":"7mSsm","./elementTypeAcceptingRef":"i0q2k","./exactProp":"sE2kt","./formatMuiErrorMessage":"eDaDr","./getDisplayName":"hBdXv","./HTMLElementType":"duudh","./ponyfillGlobal":false,"./refType":"3gz5q","./capitalize":"dtvxM","./createChainedFunction":"2BCeo","./debounce":"lgGqk","./deprecatedPropType":"h19pf","./isMuiElement":"17Vaj","./ownerDocument":"7mpJb","./ownerWindow":"kbdyH","./requirePropFactory":"h2dzQ","./setRef":"bbvuy","./useEnhancedEffect":"1AnmA","./useId":"gNhWM","./unsupportedProp":"8DC5y","./useControlled":"kiY49","./useEventCallback":"dMwX7","./useForkRef":"aH9PA","./useIsFocusVisible":"dX6sE","./getScrollbarSize":"6IiaY","./scrollLeft":false,"./usePreviousProps":"akE0D","./visuallyHidden":"afSLk","./integerPropType":"7se3E","./resolveProps":"54id4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdHT5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function chainPropTypes(propType1, propType2) {
    return function validate(...args) {
        return propType1(...args) || propType2(...args);
    };
}
exports.default = chainPropTypes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dV1xi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function isPlainObject(item) {
    return item !== null && typeof item === 'object' && item.constructor === Object;
}
function deepmerge(target, source, options = {
    clone: true
}) {
    const output = options.clone ? _extendsDefault.default({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) Object.keys(source).forEach((key)=>{
        // Avoid prototype pollution
        if (key === '__proto__') return;
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge(target[key], source[key], options);
        else output[key] = source[key];
    });
    return output;
}
exports.default = deepmerge;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mSsm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const { prototype ={}  } = elementType;
    return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') return null;
    let warningHint;
    const elementType = element.type;
    /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */ if (typeof elementType === 'function' && !isClassComponent(elementType)) warningHint = 'Did you accidentally use a plain function component for an element instead?';
    if (warningHint !== undefined) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    return null;
}
const elementAcceptingRef = _chainPropTypesDefault.default(_propTypesDefault.default.element, acceptingRef);
elementAcceptingRef.isRequired = _chainPropTypesDefault.default(_propTypesDefault.default.element.isRequired, acceptingRef);
exports.default = elementAcceptingRef;

},{"prop-types":"7wKI2","./chainPropTypes":"cdHT5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i0q2k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const { prototype ={}  } = elementType;
    return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') return null;
    let warningHint;
    /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */ if (typeof propValue === 'function' && !isClassComponent(propValue)) warningHint = 'Did you accidentally provide a plain function component instead?';
    if (warningHint !== undefined) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    return null;
}
exports.default = _chainPropTypesDefault.default(_propTypesDefault.default.elementType, elementTypeAcceptingRef);

},{"prop-types":"7wKI2","./chainPropTypes":"cdHT5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sE2kt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.
const specialProperty = 'exact-prop: \u200b';
function exactProp(propTypes) {
    return _extendsDefault.default({}, propTypes, {
        [specialProperty]: (props)=>{
            const unsupportedProps = Object.keys(props).filter((prop)=>!propTypes.hasOwnProperty(prop)
            );
            if (unsupportedProps.length > 0) return new Error(`The following props are not supported: ${unsupportedProps.map((prop)=>`\`${prop}\``
            ).join(', ')}. Please remove them.`);
            return null;
        }
    });
}
exports.default = exactProp;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eDaDr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function formatMuiErrorMessage(code) {
    // Apply babel-plugin-transform-template-literals in loose mode
    // loose mode is safe iff we're concatenating primitives
    // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
    /* eslint-disable prefer-template */ let url = 'https://mui.com/production-error/?code=' + code;
    for(let i = 1; i < arguments.length; i += 1)// rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += '&args[]=' + encodeURIComponent(arguments[i]);
    return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
/* eslint-enable prefer-template */ }
exports.default = formatMuiErrorMessage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBdXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFunctionName", ()=>getFunctionName
);
var _reactIs = require("react-is"); // Simplified polyfill for IE11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function getFunctionName(fn) {
    const match = `${fn}`.match(fnNameMatchRegex);
    const name = match && match[1];
    return name || '';
}
function getFunctionComponentName(Component, fallback = '') {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}
function getDisplayName(Component) {
    if (Component == null) return undefined;
    if (typeof Component === 'string') return Component;
    if (typeof Component === 'function') return getFunctionComponentName(Component, 'Component');
     // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
    if (typeof Component === 'object') switch(Component.$$typeof){
        case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');
        case _reactIs.Memo:
            return getWrappedName(Component, Component.type, 'memo');
        default:
            return undefined;
    }
    return undefined;
}
exports.default = getDisplayName;

},{"react-is":"7EuwB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duudh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function HTMLElementType(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) return null;
    if (propValue && propValue.nodeType !== 1) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
    return null;
}
exports.default = HTMLElementType;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gz5q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const refType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.func,
    _propTypesDefault.default.object
]);
exports.default = refType;

},{"prop-types":"7wKI2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dtvxM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatMuiErrorMessage = require("./formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
function capitalize(string) {
    if (typeof string !== 'string') throw new Error(`MUI: \`capitalize(string)\` expects a string argument.`);
    return string.charAt(0).toUpperCase() + string.slice(1);
}
exports.default = capitalize;

},{"./formatMuiErrorMessage":"eDaDr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BCeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func)=>{
        if (func == null) return acc;
        return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
        };
    }, ()=>{});
}
exports.default = createChainedFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgGqk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(func, wait = 166) {
    let timeout;
    function debounced(...args) {
        const later = ()=>{
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    }
    debounced.clear = ()=>{
        clearTimeout(timeout);
    };
    return debounced;
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h19pf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function deprecatedPropType(validator, reason) {
    return (props, propName, componentName, location, propFullName)=>{
        const componentNameSafe = componentName || '<<anonymous>>';
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== 'undefined') return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
        return null;
    };
}
exports.default = deprecatedPropType;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"17Vaj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function isMuiElement(element, muiNames) {
    return /*#__PURE__*/ _react.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}
exports.default = isMuiElement;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mpJb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ownerDocument(node) {
    return node && node.ownerDocument || document;
}
exports.default = ownerDocument;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbdyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function ownerWindow(node) {
    const doc = _ownerDocumentDefault.default(node);
    return doc.defaultView || window;
}
exports.default = ownerWindow;

},{"./ownerDocument":"7mpJb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2dzQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function requirePropFactory(componentNameInError, Component) {
    const prevPropTypes = Component ? _extendsDefault.default({}, Component.propTypes) : null;
    const requireProp = (requiredProp)=>(props, propName, componentName, location, propFullName, ...args)=>{
            const propFullNameSafe = propFullName || propName;
            const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
            if (defaultTypeChecker) {
                const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
                if (typeCheckerResult) return typeCheckerResult;
            }
            if (typeof props[propName] !== 'undefined' && !props[requiredProp]) return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
            return null;
        }
    ;
    return requireProp;
}
exports.default = requirePropFactory;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bbvuy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function setRef(ref, value) {
    if (typeof ref === 'function') ref(value);
    else if (ref) ref.current = value;
}
exports.default = setRef;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AnmA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const useEnhancedEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;
exports.default = useEnhancedEffect;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gNhWM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
let globalId = 0;
function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = _react.useState(idOverride);
    const id = idOverride || defaultId;
    _react.useEffect(()=>{
        if (defaultId == null) {
            // Fallback to this default id when possible.
            // Use the incrementing value for client-side rendering only.
            // We can't use it server-side.
            // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
        }
    }, [
        defaultId
    ]);
    return id;
} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
const maybeReactUseId = _react["useId"];
function useId(idOverride) {
    if (maybeReactUseId !== undefined) {
        const reactId = maybeReactUseId();
        return idOverride != null ? idOverride : reactId;
    } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
    return useGlobalId(idOverride);
}
exports.default = useId;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8DC5y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function unsupportedProp(props, propName, componentName, location, propFullName) {
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== 'undefined') return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    return null;
}
exports.default = unsupportedProp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kiY49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */ var _react = require("react");
function useControlled({ controlled , default: defaultProp , name , state ='value'  }) {
    // isControlled is ignored in the hook dependency lists as it should never change.
    const { current: isControlled  } = _react.useRef(controlled !== undefined);
    const [valueState, setValue] = _react.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    {
        _react.useEffect(()=>{
            if (isControlled !== (controlled !== undefined)) console.error([
                `MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`,
                'Elements should not switch from uncontrolled to controlled (or vice versa).',
                `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.',
                "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.",
                'More info: https://fb.me/react-controlled-components'
            ].join('\n'));
        }, [
            state,
            name,
            controlled
        ]);
        const { current: defaultValue  } = _react.useRef(defaultProp);
        _react.useEffect(()=>{
            if (!isControlled && defaultValue !== defaultProp) console.error([
                `MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`
            ].join('\n'));
        }, [
            JSON.stringify(defaultProp)
        ]);
    }
    const setValueIfUncontrolled = _react.useCallback((newValue)=>{
        if (!isControlled) setValue(newValue);
    }, []);
    return [
        value,
        setValueIfUncontrolled
    ];
}
exports.default = useControlled;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMwX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
function useEventCallback(fn) {
    const ref = _react.useRef(fn);
    _useEnhancedEffectDefault.default(()=>{
        ref.current = fn;
    });
    return _react.useCallback((...args)=>// tslint:disable-next-line:ban-comma-operator
        (0, ref.current)(...args)
    , []);
}
exports.default = useEventCallback;

},{"react":"21dqq","./useEnhancedEffect":"1AnmA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aH9PA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
function useForkRef(refA, refB) {
    /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */ return _react.useMemo(()=>{
        if (refA == null && refB == null) return null;
        return (refValue)=>{
            _setRefDefault.default(refA, refValue);
            _setRefDefault.default(refB, refValue);
        };
    }, [
        refA,
        refB
    ]);
}
exports.default = useForkRef;

},{"react":"21dqq","./setRef":"bbvuy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dX6sE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "teardown", ()=>teardown
);
// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
var _react = require("react");
let hadKeyboardEvent = true;
let hadFocusVisibleRecently = false;
let hadFocusVisibleRecentlyTimeout;
const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    'datetime-local': true
};
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @returns {boolean}
 */ function focusTriggersKeyboardModality(node) {
    const { type , tagName  } = node;
    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) return true;
    if (tagName === 'TEXTAREA' && !node.readOnly) return true;
    if (node.isContentEditable) return true;
    return false;
}
/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */ function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) return;
    hadKeyboardEvent = true;
}
/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */ function handlePointerDown() {
    hadKeyboardEvent = false;
}
function handleVisibilityChange() {
    if (this.visibilityState === 'hidden') // If the tab becomes active again, the browser will handle calling focus
    // on the element (Safari actually calls it twice).
    // If this tab change caused a blur on an element with focus-visible,
    // re-apply the class when the user switches back to the tab.
    {
        if (hadFocusVisibleRecently) hadKeyboardEvent = true;
    }
}
function prepare(doc) {
    doc.addEventListener('keydown', handleKeyDown, true);
    doc.addEventListener('mousedown', handlePointerDown, true);
    doc.addEventListener('pointerdown', handlePointerDown, true);
    doc.addEventListener('touchstart', handlePointerDown, true);
    doc.addEventListener('visibilitychange', handleVisibilityChange, true);
}
function teardown(doc) {
    doc.removeEventListener('keydown', handleKeyDown, true);
    doc.removeEventListener('mousedown', handlePointerDown, true);
    doc.removeEventListener('pointerdown', handlePointerDown, true);
    doc.removeEventListener('touchstart', handlePointerDown, true);
    doc.removeEventListener('visibilitychange', handleVisibilityChange, true);
}
function isFocusVisible(event) {
    const { target  } = event;
    try {
        return target.matches(':focus-visible');
    } catch (error) {
    // We use our own heuristic for those browsers.
    // Rethrow might be better if it's not the expected error but do we really
    // want to crash if focus-visible malfunctioned?
    } // No need for validFocusTarget check. The user does that by attaching it to
    // focusable events only.
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function useIsFocusVisible() {
    const ref = _react.useCallback((node)=>{
        if (node != null) prepare(node.ownerDocument);
    }, []);
    const isFocusVisibleRef = _react.useRef(false);
    /**
   * Should be called if a blur event is fired
   */ function handleBlurVisible() {
        // checking against potential state variable does not suffice if we focus and blur synchronously.
        // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
        // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
        // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
        // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
        if (isFocusVisibleRef.current) {
            // To detect a tab/window switch, we look for a blur event followed
            // rapidly by a visibility change.
            // If we don't see a visibility change within 100ms, it's probably a
            // regular focus change.
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(()=>{
                hadFocusVisibleRecently = false;
            }, 100);
            isFocusVisibleRef.current = false;
            return true;
        }
        return false;
    }
    /**
   * Should be called if a blur event is fired
   */ function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
        }
        return false;
    }
    return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
    };
}
exports.default = useIsFocusVisible;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6IiaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getScrollbarSize(doc) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
}
exports.default = getScrollbarSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akE0D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const usePreviousProps = (value)=>{
    const ref = _react.useRef({});
    _react.useEffect(()=>{
        ref.current = value;
    });
    return ref.current;
};
exports.default = usePreviousProps;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afSLk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const visuallyHidden = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    whiteSpace: 'nowrap',
    width: '1px'
};
exports.default = visuallyHidden;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7se3E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTypeByValue", ()=>getTypeByValue
) // IE 11 support
;
function getTypeByValue(value) {
    const valueType = typeof value;
    switch(valueType){
        case 'number':
            if (Number.isNaN(value)) return 'NaN';
            if (!Number.isFinite(value)) return 'Infinity';
            if (value !== Math.floor(value)) return 'float';
            return 'number';
        case 'object':
            if (value === null) return 'null';
            return value.constructor.name;
        default:
            return valueType;
    }
}
function ponyfillIsInteger(x) {
    // eslint-disable-next-line no-restricted-globals
    return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
}
const isInteger = Number.isInteger || ponyfillIsInteger;
function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
}
function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === undefined) return null;
    return requiredInteger(props, propName, ...other);
}
function validatorNoop() {
    return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
exports.default = validator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"54id4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function resolveProps(defaultProps, props) {
    const output = _extendsDefault.default({}, props);
    Object.keys(defaultProps).forEach((propName)=>{
        if (output[propName] === undefined) output[propName] = defaultProps[propName];
    });
    return output;
}
exports.default = resolveProps;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jN5Vx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "values", ()=>values
);
parcelHelpers.export(exports, "handleBreakpoints", ()=>handleBreakpoints
);
parcelHelpers.export(exports, "createEmptyBreakpointObject", ()=>createEmptyBreakpointObject
);
parcelHelpers.export(exports, "removeUnusedBreakpoints", ()=>removeUnusedBreakpoints
);
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>mergeBreakpointsInOrder
) // compute base for responsive values; e.g.,
;
// [1,2,3] => {xs: true, sm: true, md: true}
// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
parcelHelpers.export(exports, "computeBreakpointsBase", ()=>computeBreakpointsBase
);
parcelHelpers.export(exports, "resolveBreakpointValues", ()=>resolveBreakpointValues
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _merge = require("./merge"); // The breakpoint **start** at this value.
var _mergeDefault = parcelHelpers.interopDefault(_merge);
const values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screen
};
const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: [
        'xs',
        'sm',
        'md',
        'lg',
        'xl'
    ],
    up: (key)=>`@media (min-width:${values[key]}px)`
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index)=>{
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
        }, {});
    }
    if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint)=>{
            // key is breakpoint
            if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
                const mediaKey = themeBreakpoints.up(breakpoint);
                acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
                const cssKey = breakpoint;
                acc[cssKey] = propValue[cssKey];
            }
            return acc;
        }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
}
function breakpoints(styleFunction) {
    const newStyleFunction = (props)=>{
        const theme = props.theme || {};
        const base = styleFunction(props);
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key)=>{
            if (props[key]) {
                acc = acc || {};
                acc[themeBreakpoints.up(key)] = styleFunction(_extendsDefault.default({
                    theme
                }, props[key]));
            }
            return acc;
        }, null);
        return _mergeDefault.default(base, extended);
    };
    newStyleFunction.propTypes = _extendsDefault.default({}, styleFunction.propTypes, {
        xs: _propTypesDefault.default.object,
        sm: _propTypesDefault.default.object,
        md: _propTypesDefault.default.object,
        lg: _propTypesDefault.default.object,
        xl: _propTypesDefault.default.object
    });
    newStyleFunction.filterProps = [
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        ...styleFunction.filterProps
    ];
    return newStyleFunction;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key)=>{
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
    }, {});
    return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce((acc, key)=>{
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) delete acc[key];
        return acc;
    }, style);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [
        emptyBreakpoints,
        ...styles
    ].reduce((prev, next)=>_utils.deepmerge(prev, next)
    , {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    // fixed value
    if (typeof breakpointValues !== 'object') return {};
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) breakpointsKeys.forEach((breakpoint, i)=>{
        if (i < breakpointValues.length) base[breakpoint] = true;
    });
    else breakpointsKeys.forEach((breakpoint)=>{
        if (breakpointValues[breakpoint] != null) base[breakpoint] = true;
    });
    return base;
}
function resolveBreakpointValues({ values: breakpointValues , breakpoints: themeBreakpoints , base: customBase  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) return breakpointValues;
    let previous;
    return keys.reduce((acc, breakpoint, i)=>{
        if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
        } else {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous] || breakpointValues;
            previous = breakpoint;
        }
        return acc;
    }, {});
}
exports.default = breakpoints;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","prop-types":"7wKI2","@mui/utils":"cttLn","./merge":"dtrXI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dtrXI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function merge(acc, item) {
    if (!item) return acc;
    return _utils.deepmerge(acc, item, {
        clone: false // No need to clone deep, it's way faster.
    });
}
exports.default = merge;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"artaj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _merge = require("./merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
function compose(...styles) {
    const handlers = styles.reduce((acc, style)=>{
        style.filterProps.forEach((prop)=>{
            acc[prop] = style;
        });
        return acc;
    }, {});
    const fn = (props)=>{
        return Object.keys(props).reduce((acc, prop)=>{
            if (handlers[prop]) return _mergeDefault.default(acc, handlers[prop](props));
            return acc;
        }, {});
    };
    fn.propTypes = styles.reduce((acc, style)=>Object.assign(acc, style.propTypes)
    , {});
    fn.filterProps = styles.reduce((acc, style)=>acc.concat(style.filterProps)
    , []);
    return fn;
}
exports.default = compose;

},{"./merge":"dtrXI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5kYt9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnaryUnit", ()=>createUnaryUnit
);
parcelHelpers.export(exports, "createUnarySpacing", ()=>createUnarySpacing
);
parcelHelpers.export(exports, "getValue", ()=>getValue
);
parcelHelpers.export(exports, "getStyleFromPropValue", ()=>getStyleFromPropValue
);
parcelHelpers.export(exports, "margin", ()=>margin
);
parcelHelpers.export(exports, "padding", ()=>padding
);
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _breakpoints = require("./breakpoints");
var _style = require("./style");
var _merge = require("./merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
var _memoize = require("./memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
const properties = {
    m: 'margin',
    p: 'padding'
};
const directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: [
        'Left',
        'Right'
    ],
    y: [
        'Top',
        'Bottom'
    ]
};
const aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
}; // memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = _memoizeDefault.default((prop)=>{
    // It's not a shorthand notation.
    if (prop.length > 2) {
        if (aliases[prop]) prop = aliases[prop];
        else return [
            prop
        ];
    }
    const [a, b] = prop.split('');
    const property = properties[a];
    const direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map((dir)=>property + dir
    ) : [
        property + direction
    ];
});
const marginKeys = [
    'm',
    'mt',
    'mr',
    'mb',
    'ml',
    'mx',
    'my',
    'margin',
    'marginTop',
    'marginRight',
    'marginBottom',
    'marginLeft',
    'marginX',
    'marginY',
    'marginInline',
    'marginInlineStart',
    'marginInlineEnd',
    'marginBlock',
    'marginBlockStart',
    'marginBlockEnd'
];
const paddingKeys = [
    'p',
    'pt',
    'pr',
    'pb',
    'pl',
    'px',
    'py',
    'padding',
    'paddingTop',
    'paddingRight',
    'paddingBottom',
    'paddingLeft',
    'paddingX',
    'paddingY',
    'paddingInline',
    'paddingInlineStart',
    'paddingInlineEnd',
    'paddingBlock',
    'paddingBlockStart',
    'paddingBlockEnd'
];
const spacingKeys = [
    ...marginKeys,
    ...paddingKeys
];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = _style.getPath(theme, themeKey) || defaultValue;
    if (typeof themeSpacing === 'number') return (abs)=>{
        if (typeof abs === 'string') return abs;
        if (typeof abs !== 'number') console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
        return themeSpacing * abs;
    };
    if (Array.isArray(themeSpacing)) return (abs)=>{
        if (typeof abs === 'string') return abs;
        if (!Number.isInteger(abs)) console.error([
            `MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`
        ].join('\n'));
        else if (abs > themeSpacing.length - 1) console.error([
            `MUI: The value provided (${abs}) overflows.`,
            `The supported values are: ${JSON.stringify(themeSpacing)}.`,
            `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`
        ].join('\n'));
        return themeSpacing[abs];
    };
    if (typeof themeSpacing === 'function') return themeSpacing;
    console.error([
        `MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`,
        'It should be a number, an array or a function.'
    ].join('\n'));
    return ()=>undefined
    ;
}
function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) return propValue;
    const abs = Math.abs(propValue);
    const transformed = transformer(abs);
    if (propValue >= 0) return transformed;
    if (typeof transformed === 'number') return -transformed;
    return `-${transformed}`;
}
function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue)=>cssProperties.reduce((acc, cssProperty)=>{
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
        }, {})
    ;
}
function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (keys.indexOf(prop) === -1) return null;
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return _breakpoints.handleBreakpoints(props, propValue, styleFromPropValue);
}
function style(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop)=>resolveCssProperty(props, keys, prop, transformer)
    ).reduce(_mergeDefault.default, {});
}
function margin(props) {
    return style(props, marginKeys);
}
margin.propTypes = marginKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {});
margin.filterProps = marginKeys;
function padding(props) {
    return style(props, paddingKeys);
}
padding.propTypes = paddingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {});
padding.filterProps = paddingKeys;
function spacing(props) {
    return style(props, spacingKeys);
}
spacing.propTypes = spacingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {});
spacing.filterProps = spacingKeys;
exports.default = spacing;

},{"./responsivePropType":"1dM4b","./breakpoints":"jN5Vx","./style":"juhi3","./merge":"dtrXI","./memoize":"etq03","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etq03":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize(fn) {
    const cache = {};
    return (arg)=>{
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgIcY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "displayPrint", ()=>displayPrint
);
parcelHelpers.export(exports, "displayRaw", ()=>displayRaw
);
parcelHelpers.export(exports, "overflow", ()=>overflow
);
parcelHelpers.export(exports, "textOverflow", ()=>textOverflow
);
parcelHelpers.export(exports, "visibility", ()=>visibility
);
parcelHelpers.export(exports, "whiteSpace", ()=>whiteSpace
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const displayPrint = _styleDefault.default({
    prop: 'displayPrint',
    cssProperty: false,
    transform: (value)=>({
            '@media print': {
                display: value
            }
        })
});
const displayRaw = _styleDefault.default({
    prop: 'display'
});
const overflow = _styleDefault.default({
    prop: 'overflow'
});
const textOverflow = _styleDefault.default({
    prop: 'textOverflow'
});
const visibility = _styleDefault.default({
    prop: 'visibility'
});
const whiteSpace = _styleDefault.default({
    prop: 'whiteSpace'
});
exports.default = _composeDefault.default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

},{"./style":"juhi3","./compose":"artaj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGtSW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flexBasis", ()=>flexBasis
);
parcelHelpers.export(exports, "flexDirection", ()=>flexDirection
);
parcelHelpers.export(exports, "flexWrap", ()=>flexWrap
);
parcelHelpers.export(exports, "justifyContent", ()=>justifyContent
);
parcelHelpers.export(exports, "alignItems", ()=>alignItems
);
parcelHelpers.export(exports, "alignContent", ()=>alignContent
);
parcelHelpers.export(exports, "order", ()=>order
);
parcelHelpers.export(exports, "flex", ()=>flex
);
parcelHelpers.export(exports, "flexGrow", ()=>flexGrow
);
parcelHelpers.export(exports, "flexShrink", ()=>flexShrink
);
parcelHelpers.export(exports, "alignSelf", ()=>alignSelf
);
parcelHelpers.export(exports, "justifyItems", ()=>justifyItems
);
parcelHelpers.export(exports, "justifySelf", ()=>justifySelf
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const flexBasis = _styleDefault.default({
    prop: 'flexBasis'
});
const flexDirection = _styleDefault.default({
    prop: 'flexDirection'
});
const flexWrap = _styleDefault.default({
    prop: 'flexWrap'
});
const justifyContent = _styleDefault.default({
    prop: 'justifyContent'
});
const alignItems = _styleDefault.default({
    prop: 'alignItems'
});
const alignContent = _styleDefault.default({
    prop: 'alignContent'
});
const order = _styleDefault.default({
    prop: 'order'
});
const flex = _styleDefault.default({
    prop: 'flex'
});
const flexGrow = _styleDefault.default({
    prop: 'flexGrow'
});
const flexShrink = _styleDefault.default({
    prop: 'flexShrink'
});
const alignSelf = _styleDefault.default({
    prop: 'alignSelf'
});
const justifyItems = _styleDefault.default({
    prop: 'justifyItems'
});
const justifySelf = _styleDefault.default({
    prop: 'justifySelf'
});
const flexbox = _composeDefault.default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
exports.default = flexbox;

},{"./style":"juhi3","./compose":"artaj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aC2XZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gap", ()=>gap
);
parcelHelpers.export(exports, "columnGap", ()=>columnGap
);
parcelHelpers.export(exports, "rowGap", ()=>rowGap
);
parcelHelpers.export(exports, "gridColumn", ()=>gridColumn
);
parcelHelpers.export(exports, "gridRow", ()=>gridRow
);
parcelHelpers.export(exports, "gridAutoFlow", ()=>gridAutoFlow
);
parcelHelpers.export(exports, "gridAutoColumns", ()=>gridAutoColumns
);
parcelHelpers.export(exports, "gridAutoRows", ()=>gridAutoRows
);
parcelHelpers.export(exports, "gridTemplateColumns", ()=>gridTemplateColumns
);
parcelHelpers.export(exports, "gridTemplateRows", ()=>gridTemplateRows
);
parcelHelpers.export(exports, "gridTemplateAreas", ()=>gridTemplateAreas
);
parcelHelpers.export(exports, "gridArea", ()=>gridArea
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _spacing = require("./spacing");
var _breakpoints = require("./breakpoints");
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({
                gap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};
gap.propTypes = {
    gap: _responsivePropTypeDefault.default
};
gap.filterProps = [
    'gap'
];
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({
                columnGap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
columnGap.propTypes = {
    columnGap: _responsivePropTypeDefault.default
};
columnGap.filterProps = [
    'columnGap'
];
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({
                rowGap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
rowGap.propTypes = {
    rowGap: _responsivePropTypeDefault.default
};
rowGap.filterProps = [
    'rowGap'
];
const gridColumn = _styleDefault.default({
    prop: 'gridColumn'
});
const gridRow = _styleDefault.default({
    prop: 'gridRow'
});
const gridAutoFlow = _styleDefault.default({
    prop: 'gridAutoFlow'
});
const gridAutoColumns = _styleDefault.default({
    prop: 'gridAutoColumns'
});
const gridAutoRows = _styleDefault.default({
    prop: 'gridAutoRows'
});
const gridTemplateColumns = _styleDefault.default({
    prop: 'gridTemplateColumns'
});
const gridTemplateRows = _styleDefault.default({
    prop: 'gridTemplateRows'
});
const gridTemplateAreas = _styleDefault.default({
    prop: 'gridTemplateAreas'
});
const gridArea = _styleDefault.default({
    prop: 'gridArea'
});
const grid = _composeDefault.default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
exports.default = grid;

},{"./style":"juhi3","./compose":"artaj","./spacing":"5kYt9","./breakpoints":"jN5Vx","./responsivePropType":"1dM4b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c15rV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>color
);
parcelHelpers.export(exports, "bgcolor", ()=>bgcolor
);
parcelHelpers.export(exports, "backgroundColor", ()=>backgroundColor
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const color = _styleDefault.default({
    prop: 'color',
    themeKey: 'palette'
});
const bgcolor = _styleDefault.default({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette'
});
const backgroundColor = _styleDefault.default({
    prop: 'backgroundColor',
    themeKey: 'palette'
});
const palette = _composeDefault.default(color, bgcolor, backgroundColor);
exports.default = palette;

},{"./style":"juhi3","./compose":"artaj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bH84e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "position", ()=>position
);
parcelHelpers.export(exports, "zIndex", ()=>zIndex
);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "left", ()=>left
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const position = _styleDefault.default({
    prop: 'position'
});
const zIndex = _styleDefault.default({
    prop: 'zIndex',
    themeKey: 'zIndex'
});
const top = _styleDefault.default({
    prop: 'top'
});
const right = _styleDefault.default({
    prop: 'right'
});
const bottom = _styleDefault.default({
    prop: 'bottom'
});
const left = _styleDefault.default({
    prop: 'left'
});
exports.default = _composeDefault.default(position, zIndex, top, right, bottom, left);

},{"./style":"juhi3","./compose":"artaj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jc1Oh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
const boxShadow = _styleDefault.default({
    prop: 'boxShadow',
    themeKey: 'shadows'
});
exports.default = boxShadow;

},{"./style":"juhi3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"IHjMz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "width", ()=>width
);
parcelHelpers.export(exports, "maxWidth", ()=>maxWidth
);
parcelHelpers.export(exports, "minWidth", ()=>minWidth
);
parcelHelpers.export(exports, "height", ()=>height
);
parcelHelpers.export(exports, "maxHeight", ()=>maxHeight
);
parcelHelpers.export(exports, "minHeight", ()=>minHeight
);
parcelHelpers.export(exports, "sizeWidth", ()=>sizeWidth
);
parcelHelpers.export(exports, "sizeHeight", ()=>sizeHeight
);
parcelHelpers.export(exports, "boxSizing", ()=>boxSizing
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _breakpoints = require("./breakpoints");
function transform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = _styleDefault.default({
    prop: 'width',
    transform
});
const maxWidth = (props)=>{
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = (propValue)=>{
            var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
            const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints.values[propValue];
            return {
                maxWidth: breakpoint || transform(propValue)
            };
        };
        return _breakpoints.handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
};
maxWidth.filterProps = [
    'maxWidth'
];
const minWidth = _styleDefault.default({
    prop: 'minWidth',
    transform
});
const height = _styleDefault.default({
    prop: 'height',
    transform
});
const maxHeight = _styleDefault.default({
    prop: 'maxHeight',
    transform
});
const minHeight = _styleDefault.default({
    prop: 'minHeight',
    transform
});
const sizeWidth = _styleDefault.default({
    prop: 'size',
    cssProperty: 'width',
    transform
});
const sizeHeight = _styleDefault.default({
    prop: 'size',
    cssProperty: 'height',
    transform
});
const boxSizing = _styleDefault.default({
    prop: 'boxSizing'
});
const sizing = _composeDefault.default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
exports.default = sizing;

},{"./style":"juhi3","./compose":"artaj","./breakpoints":"jN5Vx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6oSjI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fontFamily", ()=>fontFamily
);
parcelHelpers.export(exports, "fontSize", ()=>fontSize
);
parcelHelpers.export(exports, "fontStyle", ()=>fontStyle
);
parcelHelpers.export(exports, "fontWeight", ()=>fontWeight
);
parcelHelpers.export(exports, "letterSpacing", ()=>letterSpacing
);
parcelHelpers.export(exports, "textTransform", ()=>textTransform
);
parcelHelpers.export(exports, "lineHeight", ()=>lineHeight
);
parcelHelpers.export(exports, "textAlign", ()=>textAlign
);
parcelHelpers.export(exports, "typographyVariant", ()=>typographyVariant
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const fontFamily = _styleDefault.default({
    prop: 'fontFamily',
    themeKey: 'typography'
});
const fontSize = _styleDefault.default({
    prop: 'fontSize',
    themeKey: 'typography'
});
const fontStyle = _styleDefault.default({
    prop: 'fontStyle',
    themeKey: 'typography'
});
const fontWeight = _styleDefault.default({
    prop: 'fontWeight',
    themeKey: 'typography'
});
const letterSpacing = _styleDefault.default({
    prop: 'letterSpacing'
});
const textTransform = _styleDefault.default({
    prop: 'textTransform'
});
const lineHeight = _styleDefault.default({
    prop: 'lineHeight'
});
const textAlign = _styleDefault.default({
    prop: 'textAlign'
});
const typographyVariant = _styleDefault.default({
    prop: 'typography',
    cssProperty: false,
    themeKey: 'typography'
});
const typography = _composeDefault.default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
exports.default = typography;

},{"./style":"juhi3","./compose":"artaj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRwpN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_styleFunctionSxDefault.default
);
parcelHelpers.export(exports, "unstable_createStyleFunctionSx", ()=>_styleFunctionSx.unstable_createStyleFunctionSx
);
parcelHelpers.export(exports, "extendSxProp", ()=>_extendSxPropDefault.default
);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _extendSxProp = require("./extendSxProp");
var _extendSxPropDefault = parcelHelpers.interopDefault(_extendSxProp);

},{"./styleFunctionSx":"fUwPJ","./extendSxProp":"aJA1s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUwPJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unstable_createStyleFunctionSx", ()=>unstable_createStyleFunctionSx
);
var _merge = require("../merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
var _getThemeValue = require("../getThemeValue");
var _breakpoints = require("../breakpoints");
function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object)=>keys.concat(Object.keys(object))
    , []);
    const union = new Set(allKeys);
    return objects.every((object)=>union.size === Object.keys(object).length
    );
}
function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
} // eslint-disable-next-line @typescript-eslint/naming-convention
function unstable_createStyleFunctionSx(styleFunctionMapping = _getThemeValue.styleFunctionMapping) {
    const propToStyleFunction = Object.keys(styleFunctionMapping).reduce((acc, styleFnName)=>{
        styleFunctionMapping[styleFnName].filterProps.forEach((propName)=>{
            acc[propName] = styleFunctionMapping[styleFnName];
        });
        return acc;
    }, {});
    function getThemeValue(prop, value, theme) {
        const inputProps = {
            [prop]: value,
            theme
        };
        const styleFunction = propToStyleFunction[prop];
        return styleFunction ? styleFunction(inputProps) : {
            [prop]: value
        };
    }
    function styleFunctionSx1(props) {
        const { sx , theme ={}  } = props || {};
        if (!sx) return null; // emotion & styled-components will neglect null
        /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */ function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === 'function') sxObject = sxInput(theme);
            else if (typeof sxInput !== 'object') // value
            return sxInput;
            if (!sxObject) return null;
            const emptyBreakpoints = _breakpoints.createEmptyBreakpointObject(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey)=>{
                const value = callIfFn(sxObject[styleKey], theme);
                if (value !== null && value !== undefined) {
                    if (typeof value === 'object') {
                        if (propToStyleFunction[styleKey]) css = _mergeDefault.default(css, getThemeValue(styleKey, value, theme));
                        else {
                            const breakpointsValues = _breakpoints.handleBreakpoints({
                                theme
                            }, value, (x)=>({
                                    [styleKey]: x
                                })
                            );
                            if (objectsHaveSameKeys(breakpointsValues, value)) css[styleKey] = styleFunctionSx1({
                                sx: value,
                                theme
                            });
                            else css = _mergeDefault.default(css, breakpointsValues);
                        }
                    } else css = _mergeDefault.default(css, getThemeValue(styleKey, value, theme));
                }
            });
            return _breakpoints.removeUnusedBreakpoints(breakpointsKeys, css);
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx1;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = [
    'sx'
];
exports.default = styleFunctionSx;

},{"../merge":"dtrXI","../getThemeValue":"bPAAB","../breakpoints":"jN5Vx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPAAB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleFunctionMapping", ()=>styleFunctionMapping
);
parcelHelpers.export(exports, "propToStyleFunction", ()=>propToStyleFunction
);
var _borders = require("./borders");
var _bordersDefault = parcelHelpers.interopDefault(_borders);
var _display = require("./display");
var _displayDefault = parcelHelpers.interopDefault(_display);
var _flexbox = require("./flexbox");
var _flexboxDefault = parcelHelpers.interopDefault(_flexbox);
var _grid = require("./grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _positions = require("./positions");
var _positionsDefault = parcelHelpers.interopDefault(_positions);
var _palette = require("./palette");
var _paletteDefault = parcelHelpers.interopDefault(_palette);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _sizing = require("./sizing");
var _sizingDefault = parcelHelpers.interopDefault(_sizing);
var _spacing = require("./spacing");
var _spacingDefault = parcelHelpers.interopDefault(_spacing);
var _typography = require("./typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
const filterPropsMapping = {
    borders: _bordersDefault.default.filterProps,
    display: _displayDefault.default.filterProps,
    flexbox: _flexboxDefault.default.filterProps,
    grid: _gridDefault.default.filterProps,
    positions: _positionsDefault.default.filterProps,
    palette: _paletteDefault.default.filterProps,
    shadows: _shadowsDefault.default.filterProps,
    sizing: _sizingDefault.default.filterProps,
    spacing: _spacingDefault.default.filterProps,
    typography: _typographyDefault.default.filterProps
};
const styleFunctionMapping = {
    borders: _bordersDefault.default,
    display: _displayDefault.default,
    flexbox: _flexboxDefault.default,
    grid: _gridDefault.default,
    positions: _positionsDefault.default,
    palette: _paletteDefault.default,
    shadows: _shadowsDefault.default,
    sizing: _sizingDefault.default,
    spacing: _spacingDefault.default,
    typography: _typographyDefault.default
};
const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName)=>{
    filterPropsMapping[styleFnName].forEach((propName)=>{
        acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
}, {});
function getThemeValue(prop, value, theme) {
    const inputProps = {
        [prop]: value,
        theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
        [prop]: value
    };
}
exports.default = getThemeValue;

},{"./borders":"9eacX","./display":"bgIcY","./flexbox":"lGtSW","./grid":"aC2XZ","./positions":"bH84e","./palette":"c15rV","./shadows":"jc1Oh","./sizing":"IHjMz","./spacing":"5kYt9","./typography":"6oSjI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aJA1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _getThemeValue = require("../getThemeValue");
const _excluded = [
    "sx"
];
const splitProps = (props)=>{
    const result = {
        systemProps: {},
        otherProps: {}
    };
    Object.keys(props).forEach((prop)=>{
        if (_getThemeValue.propToStyleFunction[prop]) result.systemProps[prop] = props[prop];
        else result.otherProps[prop] = props[prop];
    });
    return result;
};
function extendSxProp(props) {
    const { sx: inSx  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { systemProps , otherProps  } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) finalSx = [
        systemProps,
        ...inSx
    ];
    else if (typeof inSx === 'function') finalSx = (...args)=>{
        const result = inSx(...args);
        if (!_utils.isPlainObject(result)) return systemProps;
        return _extendsDefault.default({}, systemProps, result);
    };
    else finalSx = _extendsDefault.default({}, systemProps, inSx);
    return _extendsDefault.default({}, otherProps, {
        sx: finalSx
    });
}
exports.default = extendSxProp;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","../getThemeValue":"bPAAB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7BCm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_sxDefault.default
);
var _sx = require("./sx");
var _sxDefault = parcelHelpers.interopDefault(_sx);

},{"./sx":"eDjGM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eDjGM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _styleFunctionSx = require("../styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
function sx(styles) {
    return ({ theme  })=>_styleFunctionSxDefault.default({
            sx: styles,
            theme
        })
    ;
}
exports.default = sx;

},{"../styleFunctionSx":"bRwpN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bc03s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _styledEngine = require("@mui/styled-engine");
var _styledEngineDefault = parcelHelpers.interopDefault(_styledEngine);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component"
];
function createBox(options = {}) {
    const { defaultTheme , defaultClassName ='MuiBox-root' , generateClassName , styleFunctionSx =_styleFunctionSxDefault.default  } = options;
    const BoxRoot = _styledEngineDefault.default('div')(styleFunctionSx);
    const Box = /*#__PURE__*/ _react.forwardRef(function Box(inProps, ref) {
        const theme = _useThemeDefault.default(defaultTheme);
        const _extendSxProp = _styleFunctionSx.extendSxProp(inProps), { className , component ='div'  } = _extendSxProp, other = _objectWithoutPropertiesLooseDefault.default(_extendSxProp, _excluded);
        return /*#__PURE__*/ _jsxRuntime.jsx(BoxRoot, _extendsDefault.default({
            as: component,
            ref: ref,
            className: _clsxDefault.default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
            theme: theme
        }, other));
    });
    Box.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
     * @ignore
     */ children: _propTypesDefault.default.node,
        /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */ component: _propTypesDefault.default.elementType,
        /**
     * @ignore
     */ sx: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.object,
            _propTypesDefault.default.array,
            _propTypesDefault.default.func
        ])
    };
    return Box;
}
exports.default = createBox;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/styled-engine":"eTow5","./styleFunctionSx":"bRwpN","./useTheme":"h9QTR","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83C22":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function toVal(mix) {
    var k, y, str = '';
    if (typeof mix === 'string' || typeof mix === 'number') str += mix;
    else if (typeof mix === 'object') {
        if (Array.isArray(mix)) for(k = 0; k < mix.length; k++){
            if (mix[k]) {
                if (y = toVal(mix[k])) {
                    str && (str += ' ');
                    str += y;
                }
            }
        }
        else {
            for(k in mix)if (mix[k]) {
                str && (str += ' ');
                str += k;
            }
        }
    }
    return str;
}
exports.default = function() {
    var i = 0, tmp, x, str = '';
    while(i < arguments.length){
        if (tmp = arguments[i++]) {
            if (x = toVal(tmp)) {
                str && (str += ' ');
                str += x;
            }
        }
    }
    return str;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9QTR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "systemDefaultTheme", ()=>systemDefaultTheme
);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _useThemeWithoutDefault = require("./useThemeWithoutDefault");
var _useThemeWithoutDefaultDefault = parcelHelpers.interopDefault(_useThemeWithoutDefault);
const systemDefaultTheme = _createThemeDefault.default();
function useTheme(defaultTheme = systemDefaultTheme) {
    return _useThemeWithoutDefaultDefault.default(defaultTheme);
}
exports.default = useTheme;

},{"./createTheme":"dmLcy","./useThemeWithoutDefault":"9Xcu1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmLcy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_createThemeDefault.default
);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);

},{"./createTheme":"LoTke","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"LoTke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _createBreakpoints = require("./createBreakpoints");
var _createBreakpointsDefault = parcelHelpers.interopDefault(_createBreakpoints);
var _shape = require("./shape");
var _shapeDefault = parcelHelpers.interopDefault(_shape);
var _createSpacing = require("./createSpacing");
var _createSpacingDefault = parcelHelpers.interopDefault(_createSpacing);
const _excluded = [
    "breakpoints",
    "palette",
    "spacing",
    "shape"
];
function createTheme(options = {}, ...args) {
    const { breakpoints: breakpointsInput = {} , palette: paletteInput = {} , spacing: spacingInput , shape: shapeInput = {}  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
    const breakpoints = _createBreakpointsDefault.default(breakpointsInput);
    const spacing = _createSpacingDefault.default(spacingInput);
    let muiTheme = _utils.deepmerge({
        breakpoints,
        direction: 'ltr',
        components: {},
        // Inject component definitions.
        palette: _extendsDefault.default({
            mode: 'light'
        }, paletteInput),
        spacing,
        shape: _extendsDefault.default({}, _shapeDefault.default, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument)=>_utils.deepmerge(acc, argument)
    , muiTheme);
    return muiTheme;
}
exports.default = createTheme;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","./createBreakpoints":"ldxey","./shape":"43LHe","./createSpacing":"8dFgL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ldxey":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breakpointKeys", ()=>breakpointKeys
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const _excluded = [
    "values",
    "unit",
    "step"
];
const breakpointKeys = [
    'xs',
    'sm',
    'md',
    'lg',
    'xl'
];
const sortBreakpointsValues = (values)=>{
    const breakpointsAsArray = Object.keys(values).map((key)=>({
            key,
            val: values[key]
        })
    ) || []; // Sort in ascending order
    breakpointsAsArray.sort((breakpoint1, breakpoint2)=>breakpoint1.val - breakpoint2.val
    );
    return breakpointsAsArray.reduce((acc, obj)=>{
        return _extendsDefault.default({}, acc, {
            [obj.key]: obj.val
        });
    }, {});
}; // Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
    const { // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values ={
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen
    } , unit ='px' , step =5  } = breakpoints, other = _objectWithoutPropertiesLooseDefault.default(breakpoints, _excluded);
    const sortedValues = sortBreakpointsValues(values);
    const keys = Object.keys(sortedValues);
    function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) return between(key, keys[keys.indexOf(key) + 1]);
        return up(key);
    }
    function not(key) {
        // handle first and last key separately, for better readability
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) return up(keys[1]);
        if (keyIndex === keys.length - 1) return down(keys[keyIndex]);
        return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
    }
    return _extendsDefault.default({
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit
    }, other);
}
exports.default = createBreakpoints;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43LHe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shape = {
    borderRadius: 4
};
exports.default = shape;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8dFgL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _spacing = require("../spacing");
function createSpacing(spacingInput = 8) {
    // Already transformed.
    if (spacingInput.mui) return spacingInput;
     // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
    // Smaller components, such as icons, can align to a 4dp grid.
    // https://material.io/design/layout/understanding-layout.html#usage
    const transform = _spacing.createUnarySpacing({
        spacing: spacingInput
    });
    const spacing = (...argsInput)=>{
        if (!(argsInput.length <= 4)) console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        const args = argsInput.length === 0 ? [
            1
        ] : argsInput;
        return args.map((argument)=>{
            const output = transform(argument);
            return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
    };
    spacing.mui = true;
    return spacing;
}
exports.default = createSpacing;

},{"../spacing":"5kYt9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Xcu1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _privateTheming = require("@mui/private-theming");
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
function useTheme(defaultTheme = null) {
    const contextTheme = _privateTheming.useTheme();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}
exports.default = useTheme;

},{"@mui/private-theming":"61Imq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61Imq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @license MUI v5.5.3
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
parcelHelpers.exportAll(_themeProvider, exports);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);

},{"./ThemeProvider":"ftXDH","./useTheme":"1YDAp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftXDH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "unstable_nested", ()=>_nestedDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _nested = require("./nested");
var _nestedDefault = parcelHelpers.interopDefault(_nested);

},{"./ThemeProvider":"93Zhk","./nested":"iB8K5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93Zhk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _themeContext = require("../useTheme/ThemeContext");
var _themeContextDefault = parcelHelpers.interopDefault(_themeContext);
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _nested = require("./nested"); // To support composition of theme.
var _nestedDefault = parcelHelpers.interopDefault(_nested);
var _jsxRuntime = require("react/jsx-runtime");
function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === 'function') {
        const mergedTheme = localTheme(outerTheme);
        if (!mergedTheme) console.error([
            'MUI: You should return an object from your theme function, i.e.',
            '<ThemeProvider theme={() => ({})} />'
        ].join('\n'));
        return mergedTheme;
    }
    return _extendsDefault.default({}, outerTheme, localTheme);
}
/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */ function ThemeProvider(props) {
    const { children , theme: localTheme  } = props;
    const outerTheme = _useThemeDefault.default();
    if (outerTheme === null && typeof localTheme === 'function') console.error([
        'MUI: You are providing a theme function prop to the ThemeProvider component:',
        '<ThemeProvider theme={outerTheme => outerTheme} />',
        '',
        'However, no outer theme is present.',
        "Make sure a theme is already injected higher in the React tree or provide a theme object."
    ].join('\n'));
    const theme = _react.useMemo(()=>{
        const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) output[_nestedDefault.default] = outerTheme !== null;
        return output;
    }, [
        localTheme,
        outerTheme
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(_themeContextDefault.default.Provider, {
        value: theme,
        children: children
    });
}
ThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]).isRequired
};
ThemeProvider.propTypes = _utils.exactProp(ThemeProvider.propTypes);
exports.default = ThemeProvider;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","../useTheme/ThemeContext":"gHrNP","../useTheme":"1YDAp","./nested":"iB8K5","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHrNP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const ThemeContext = /*#__PURE__*/ _react.createContext(null);
ThemeContext.displayName = 'ThemeContext';
exports.default = ThemeContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1YDAp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_useThemeDefault.default
);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);

},{"./useTheme":"d2e3l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2e3l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _themeContext = require("./ThemeContext");
var _themeContextDefault = parcelHelpers.interopDefault(_themeContext);
function useTheme() {
    const theme = _react.useContext(_themeContextDefault.default);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useDebugValue(theme);
    return theme;
}
exports.default = useTheme;

},{"react":"21dqq","./ThemeContext":"gHrNP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iB8K5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
exports.default = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"csGHh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldForwardProp", ()=>shouldForwardProp
);
parcelHelpers.export(exports, "systemDefaultTheme", ()=>systemDefaultTheme
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _styledEngine = require("@mui/styled-engine");
var _styledEngineDefault = parcelHelpers.interopDefault(_styledEngine);
var _utils = require("@mui/utils");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _propsToClassKey = require("./propsToClassKey");
var _propsToClassKeyDefault = parcelHelpers.interopDefault(_propsToClassKey);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
const _excluded = [
    "name",
    "slot",
    "skipVariantsResolver",
    "skipSx",
    "overridesResolver"
], _excluded2 = [
    "theme"
], _excluded3 = [
    "theme"
];
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}
const getStyleOverrides = (name, theme)=>{
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) return theme.components[name].styleOverrides;
    return null;
};
const getVariantStyles = (name, theme)=>{
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) variants = theme.components[name].variants;
    const variantsStyles = {};
    variants.forEach((definition)=>{
        const key = _propsToClassKeyDefault.default(definition.props);
        variantsStyles[key] = definition.style;
    });
    return variantsStyles;
};
const variantsResolver = (props, styles, theme, name)=>{
    var _theme$components, _theme$components$nam;
    const { ownerState ={}  } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
    if (themeVariants) themeVariants.forEach((themeVariant)=>{
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key)=>{
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) isMatch = false;
        });
        if (isMatch) variantsStyles.push(styles[_propsToClassKeyDefault.default(themeVariant.props)]);
    });
    return variantsStyles;
}; // Update /system/styled/#api in case if this changes
function shouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme = _createThemeDefault.default();
const lowercaseFirstLetter = (string)=>{
    return string.charAt(0).toLowerCase() + string.slice(1);
};
function createStyled(input = {}) {
    const { defaultTheme =systemDefaultTheme , rootShouldForwardProp =shouldForwardProp , slotShouldForwardProp =shouldForwardProp , styleFunctionSx =_styleFunctionSxDefault.default  } = input;
    return (tag, inputOptions = {})=>{
        const { name: componentName , slot: componentSlot , skipVariantsResolver: inputSkipVariantsResolver , skipSx: inputSkipSx , overridesResolver  } = inputOptions, options = _objectWithoutPropertiesLooseDefault.default(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
        const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
        const skipSx = inputSkipSx || false;
        let label;
        if (componentName) label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === 'Root') shouldForwardPropOption = rootShouldForwardProp;
        else if (componentSlot) // any other slot specified
        shouldForwardPropOption = slotShouldForwardProp;
        const defaultStyledResolver = _styledEngineDefault.default(tag, _extendsDefault.default({
            shouldForwardProp: shouldForwardPropOption,
            label
        }, options));
        const muiStyledResolver = (styleArg, ...expressions)=>{
            const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg)=>{
                // On the server emotion doesn't use React.forwardRef for creating components, so the created
                // component stays as a function. This condition makes sure that we do not interpolate functions
                // which are basically components used as a selectors.
                // eslint-disable-next-line no-underscore-dangle
                return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? (_ref)=>{
                    let { theme: themeInput  } = _ref, other = _objectWithoutPropertiesLooseDefault.default(_ref, _excluded2);
                    return stylesArg(_extendsDefault.default({
                        theme: isEmpty(themeInput) ? defaultTheme : themeInput
                    }, other));
                } : stylesArg;
            }) : [];
            let transformedStyleArg = styleArg;
            if (componentName && overridesResolver) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                const styleOverrides = getStyleOverrides(componentName, theme);
                if (styleOverrides) {
                    const resolvedStyleOverrides = {};
                    Object.entries(styleOverrides).forEach(([slotKey, slotStyle])=>{
                        resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(props) : slotStyle;
                    });
                    return overridesResolver(props, resolvedStyleOverrides);
                }
                return null;
            });
            if (componentName && !skipVariantsResolver) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
            if (!skipSx) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                return styleFunctionSx(_extendsDefault.default({}, props, {
                    theme
                }));
            });
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
                const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
                transformedStyleArg = [
                    ...styleArg,
                    ...placeholders
                ];
                transformedStyleArg.raw = [
                    ...styleArg.raw,
                    ...placeholders
                ];
            } else if (typeof styleArg === 'function' && // component stays as a function. This condition makes sure that we do not interpolate functions
            // which are basically components used as a selectors.
            // eslint-disable-next-line no-underscore-dangle
            styleArg.__emotion_real !== styleArg) // If the type is function, we need to define the default theme.
            transformedStyleArg = (_ref2)=>{
                let { theme: themeInput  } = _ref2, other = _objectWithoutPropertiesLooseDefault.default(_ref2, _excluded3);
                return styleArg(_extendsDefault.default({
                    theme: isEmpty(themeInput) ? defaultTheme : themeInput
                }, other));
            };
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            {
                let displayName;
                if (componentName) displayName = `${componentName}${componentSlot || ''}`;
                if (displayName === undefined) displayName = `Styled(${_utils.getDisplayName(tag)})`;
                Component.displayName = displayName;
            }
            return Component;
        };
        if (defaultStyledResolver.withConfig) muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        return muiStyledResolver;
    };
}
exports.default = createStyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/styled-engine":"eTow5","@mui/utils":"cttLn","./createTheme":"dmLcy","./propsToClassKey":"8Tgwx","./styleFunctionSx":"bRwpN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Tgwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
const _excluded = [
    "variant"
];
function isEmpty(string) {
    return string.length === 0;
}
function propsToClassKey(props) {
    const { variant  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    let classKey = variant || '';
    Object.keys(other).sort().forEach((key)=>{
        if (key === 'color') classKey += isEmpty(classKey) ? props[key] : _utils.unstable_capitalize(props[key]);
        else classKey += `${isEmpty(classKey) ? key : _utils.unstable_capitalize(key)}${_utils.unstable_capitalize(props[key].toString())}`;
    });
    return classKey;
}
exports.default = propsToClassKey;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZlKz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "getThemeProps", ()=>_getThemePropsDefault.default
);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _getThemeProps = require("./getThemeProps");
var _getThemePropsDefault = parcelHelpers.interopDefault(_getThemeProps);

},{"./useThemeProps":"kDJYN","./getThemeProps":"4T4Gi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kDJYN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getThemeProps = require("./getThemeProps");
var _getThemePropsDefault = parcelHelpers.interopDefault(_getThemeProps);
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
function useThemeProps({ props , name , defaultTheme  }) {
    const theme = _useThemeDefault.default(defaultTheme);
    const mergedProps = _getThemePropsDefault.default({
        theme,
        name,
        props
    });
    return mergedProps;
}
exports.default = useThemeProps;

},{"./getThemeProps":"4T4Gi","../useTheme":"h9QTR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T4Gi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function getThemeProps(params) {
    const { theme , name , props  } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) return props;
    return _utils.internal_resolveProps(theme.components[name].defaultProps, props);
}
exports.default = getThemeProps;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cIbr0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */ parcelHelpers.export(exports, "hexToRgb", ()=>hexToRgb
);
/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */ parcelHelpers.export(exports, "decomposeColor", ()=>decomposeColor
);
/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */ parcelHelpers.export(exports, "recomposeColor", ()=>recomposeColor
);
/**
 * Converts a color from CSS rgb format to CSS hex format.
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */ parcelHelpers.export(exports, "rgbToHex", ()=>rgbToHex
);
/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */ parcelHelpers.export(exports, "hslToRgb", ()=>hslToRgb
);
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */ parcelHelpers.export(exports, "getLuminance", ()=>getLuminance
);
/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */ parcelHelpers.export(exports, "getContrastRatio", ()=>getContrastRatio
);
/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "alpha", ()=>alpha
);
/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "darken", ()=>darken
);
/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "lighten", ()=>lighten
);
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "emphasize", ()=>emphasize
);
var _utils = require("@mui/utils");
/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */ function clamp(value, min = 0, max = 1) {
    if (value < min || value > max) console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    return Math.min(Math.max(min, value), max);
}
function hexToRgb(color) {
    color = color.slice(1);
    const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
    let colors = color.match(re);
    if (colors && colors[0].length === 1) colors = colors.map((n)=>n + n
    );
    return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index)=>{
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
    }).join(', ')})` : '';
}
function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
}
function decomposeColor(color) {
    // Idempotent
    if (color.type) return color;
    if (color.charAt(0) === '#') return decomposeColor(hexToRgb(color));
    const marker = color.indexOf('(');
    const type = color.substring(0, marker);
    if ([
        'rgb',
        'rgba',
        'hsl',
        'hsla',
        'color'
    ].indexOf(type) === -1) throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
    let values = color.substring(marker + 1, color.length - 1);
    let colorSpace;
    if (type === 'color') {
        values = values.split(' ');
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === '/') values[3] = values[3].slice(1);
        if ([
            'srgb',
            'display-p3',
            'a98-rgb',
            'prophoto-rgb',
            'rec-2020'
        ].indexOf(colorSpace) === -1) throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
    } else values = values.split(',');
    values = values.map((value)=>parseFloat(value)
    );
    return {
        type,
        values,
        colorSpace
    };
}
function recomposeColor(color) {
    const { type , colorSpace  } = color;
    let { values  } = color;
    if (type.indexOf('rgb') !== -1) // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i)=>i < 3 ? parseInt(n, 10) : n
    );
    else if (type.indexOf('hsl') !== -1) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
    }
    if (type.indexOf('color') !== -1) values = `${colorSpace} ${values.join(' ')}`;
    else values = `${values.join(', ')}`;
    return `${type}(${values})`;
}
function rgbToHex(color) {
    // Idempotent
    if (color.indexOf('#') === 0) return color;
    const { values  } = decomposeColor(color);
    return `#${values.map((n, i)=>intToHex(i === 3 ? Math.round(255 * n) : n)
    ).join('')}`;
}
function hslToRgb(color) {
    color = decomposeColor(color);
    const { values  } = color;
    const h = values[0];
    const s = values[1] / 100;
    const l = values[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)
    ;
    let type = 'rgb';
    const rgb = [
        Math.round(f(0) * 255),
        Math.round(f(8) * 255),
        Math.round(f(4) * 255)
    ];
    if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
    }
    return recomposeColor({
        type,
        values: rgb
    });
}
function getLuminance(color) {
    color = decomposeColor(color);
    let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map((val)=>{
        if (color.type !== 'color') val /= 255; // normalized
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    }); // Truncate at 3 digits
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function alpha(color, value) {
    color = decomposeColor(color);
    value = clamp(value);
    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
    if (color.type === 'color') color.values[3] = `/${value}`;
    else color.values[3] = value;
    return recomposeColor(color);
}
function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) color.values[2] *= 1 - coefficient;
    else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) for(let i = 0; i < 3; i += 1)color.values[i] *= 1 - coefficient;
    return recomposeColor(color);
}
function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) color.values[2] += (100 - color.values[2]) * coefficient;
    else if (color.type.indexOf('rgb') !== -1) for(let i = 0; i < 3; i += 1)color.values[i] += (255 - color.values[i]) * coefficient;
    else if (color.type.indexOf('color') !== -1) for(let i1 = 0; i1 < 3; i1 += 1)color.values[i1] += (1 - color.values[i1]) * coefficient;
    return recomposeColor(color);
}
function emphasize(color, coefficient = 0.15) {
    return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4OCq3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_themeProviderDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);

},{"./ThemeProvider":"5CLLb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5CLLb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _privateTheming = require("@mui/private-theming");
var _utils = require("@mui/utils");
var _styledEngine = require("@mui/styled-engine");
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _jsxRuntime = require("react/jsx-runtime");
function InnerThemeProvider(props) {
    const theme = _useThemeDefault.default();
    return /*#__PURE__*/ _jsxRuntime.jsx(_styledEngine.ThemeContext.Provider, {
        value: typeof theme === 'object' ? theme : {},
        children: props.children
    });
}
InnerThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node
};
/**
 * This component makes the `theme` available down the React tree.
 * It should preferably be used at **the root of your component tree**.
 */ function ThemeProvider(props) {
    const { children , theme: localTheme  } = props;
    return /*#__PURE__*/ _jsxRuntime.jsx(_privateTheming.ThemeProvider, {
        theme: localTheme,
        children: /*#__PURE__*/ _jsxRuntime.jsx(InnerThemeProvider, {
            children: children
        })
    });
}
ThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]).isRequired
};
ThemeProvider.propTypes = _utils.exactProp(ThemeProvider.propTypes);
exports.default = ThemeProvider;

},{"react":"21dqq","prop-types":"7wKI2","@mui/private-theming":"61Imq","@mui/utils":"cttLn","@mui/styled-engine":"eTow5","../useTheme":"h9QTR","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIOpS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useEnhancedEffect;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1lzai":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "adaptV4Theme", ()=>_adaptV4ThemeDefault.default
);
parcelHelpers.export(exports, "hexToRgb", ()=>_system.hexToRgb
);
parcelHelpers.export(exports, "rgbToHex", ()=>_system.rgbToHex
);
parcelHelpers.export(exports, "hslToRgb", ()=>_system.hslToRgb
);
parcelHelpers.export(exports, "decomposeColor", ()=>_system.decomposeColor
);
parcelHelpers.export(exports, "recomposeColor", ()=>_system.recomposeColor
);
parcelHelpers.export(exports, "getContrastRatio", ()=>_system.getContrastRatio
);
parcelHelpers.export(exports, "getLuminance", ()=>_system.getLuminance
);
parcelHelpers.export(exports, "emphasize", ()=>_system.emphasize
);
parcelHelpers.export(exports, "alpha", ()=>_system.alpha
);
parcelHelpers.export(exports, "darken", ()=>_system.darken
);
parcelHelpers.export(exports, "lighten", ()=>_system.lighten
);
parcelHelpers.export(exports, "css", ()=>_system.css
);
parcelHelpers.export(exports, "keyframes", ()=>_system.keyframes
);
parcelHelpers.export(exports, "experimental_sx", ()=>_system.experimental_sx
);
parcelHelpers.export(exports, "createTheme", ()=>_createThemeDefault.default
);
parcelHelpers.export(exports, "createMuiTheme", ()=>_createTheme.createMuiTheme
);
parcelHelpers.export(exports, "unstable_createMuiStrictModeTheme", ()=>_createMuiStrictModeThemeDefault.default
);
parcelHelpers.export(exports, "createStyles", ()=>_createStylesDefault.default
);
parcelHelpers.export(exports, "unstable_getUnit", ()=>_cssUtils.getUnit
);
parcelHelpers.export(exports, "unstable_toUnitless", ()=>_cssUtils.toUnitless
);
parcelHelpers.export(exports, "responsiveFontSizes", ()=>_responsiveFontSizesDefault.default
);
parcelHelpers.export(exports, "duration", ()=>_createTransitions.duration
);
parcelHelpers.export(exports, "easing", ()=>_createTransitions.easing
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
parcelHelpers.export(exports, "useThemeProps", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "styled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "experimentalStyled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_system.StyledEngineProvider
) // The legacy utilities from @mui/styles
;
// These are just empty functions that throws when invoked
parcelHelpers.export(exports, "makeStyles", ()=>_makeStylesDefault.default
);
parcelHelpers.export(exports, "withStyles", ()=>_withStylesDefault.default
);
parcelHelpers.export(exports, "withTheme", ()=>_withThemeDefault.default
);
var _adaptV4Theme = require("./adaptV4Theme");
var _adaptV4ThemeDefault = parcelHelpers.interopDefault(_adaptV4Theme);
var _system = require("@mui/system");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _createMuiStrictModeTheme = require("./createMuiStrictModeTheme");
var _createMuiStrictModeThemeDefault = parcelHelpers.interopDefault(_createMuiStrictModeTheme);
var _createStyles = require("./createStyles");
var _createStylesDefault = parcelHelpers.interopDefault(_createStyles);
var _cssUtils = require("./cssUtils");
var _responsiveFontSizes = require("./responsiveFontSizes");
var _responsiveFontSizesDefault = parcelHelpers.interopDefault(_responsiveFontSizes);
var _createTransitions = require("./createTransitions");
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("./styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _makeStyles = require("./makeStyles");
var _makeStylesDefault = parcelHelpers.interopDefault(_makeStyles);
var _withStyles = require("./withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _withTheme = require("./withTheme");
var _withThemeDefault = parcelHelpers.interopDefault(_withTheme);

},{"./adaptV4Theme":"ca4sw","@mui/system":"Q0Zql","./createTheme":"8OdgZ","./createMuiStrictModeTheme":"7KyVI","./createStyles":"3RoRm","./cssUtils":"lWtOa","./responsiveFontSizes":"kACKQ","./createTransitions":"6b8o6","./useTheme":"5nWMX","./useThemeProps":"dewuS","./styled":"32xTg","./ThemeProvider":"79jUJ","./makeStyles":"lkwLQ","./withStyles":"4y1OS","./withTheme":"i7tzb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ca4sw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _system = require("@mui/system");
const _excluded = [
    "defaultProps",
    "mixins",
    "overrides",
    "palette",
    "props",
    "styleOverrides"
], _excluded2 = [
    "type",
    "mode"
];
function adaptV4Theme(inputTheme) {
    console.warn([
        'MUI: adaptV4Theme() is deprecated.',
        'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'
    ].join('\n'));
    const { defaultProps ={} , mixins ={} , overrides ={} , palette ={} , props ={} , styleOverrides ={}  } = inputTheme, other = _objectWithoutPropertiesLooseDefault.default(inputTheme, _excluded);
    const theme = _extendsDefault.default({}, other, {
        components: {}
    }); // default props
    Object.keys(defaultProps).forEach((component)=>{
        const componentValue = theme.components[component] || {};
        componentValue.defaultProps = defaultProps[component];
        theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component)=>{
        const componentValue = theme.components[component] || {};
        componentValue.defaultProps = props[component];
        theme.components[component] = componentValue;
    }); // CSS overrides
    Object.keys(styleOverrides).forEach((component)=>{
        const componentValue = theme.components[component] || {};
        componentValue.styleOverrides = styleOverrides[component];
        theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component)=>{
        const componentValue = theme.components[component] || {};
        componentValue.styleOverrides = overrides[component];
        theme.components[component] = componentValue;
    }); // theme.spacing
    theme.spacing = _system.createSpacing(inputTheme.spacing); // theme.mixins.gutters
    const breakpoints = _system.createBreakpoints(inputTheme.breakpoints || {});
    const spacing = theme.spacing;
    theme.mixins = _extendsDefault.default({
        gutters: (styles = {})=>{
            return _extendsDefault.default({
                paddingLeft: spacing(2),
                paddingRight: spacing(2)
            }, styles, {
                [breakpoints.up('sm')]: _extendsDefault.default({
                    paddingLeft: spacing(3),
                    paddingRight: spacing(3)
                }, styles[breakpoints.up('sm')])
            });
        }
    }, mixins);
    const { type: typeInput , mode: modeInput  } = palette, paletteRest = _objectWithoutPropertiesLooseDefault.default(palette, _excluded2);
    const finalMode = modeInput || typeInput || 'light';
    theme.palette = _extendsDefault.default({
        // theme.palette.text.hint
        text: {
            hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'
        },
        mode: finalMode,
        type: finalMode
    }, paletteRest);
    return theme;
}
exports.default = adaptV4Theme;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/system":"Q0Zql","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8OdgZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMuiTheme", ()=>createMuiTheme
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _createMixins = require("./createMixins");
var _createMixinsDefault = parcelHelpers.interopDefault(_createMixins);
var _createPalette = require("./createPalette");
var _createPaletteDefault = parcelHelpers.interopDefault(_createPalette);
var _createTypography = require("./createTypography");
var _createTypographyDefault = parcelHelpers.interopDefault(_createTypography);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _createTransitions = require("./createTransitions");
var _createTransitionsDefault = parcelHelpers.interopDefault(_createTransitions);
var _zIndex = require("./zIndex");
var _zIndexDefault = parcelHelpers.interopDefault(_zIndex);
const _excluded = [
    "breakpoints",
    "mixins",
    "spacing",
    "palette",
    "transitions",
    "typography",
    "shape"
];
function createTheme(options = {}, ...args) {
    const { mixins: mixinsInput = {} , palette: paletteInput = {} , transitions: transitionsInput = {} , typography: typographyInput = {}  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
    const palette = _createPaletteDefault.default(paletteInput);
    const systemTheme = _system.createTheme(options);
    let muiTheme = _utils.deepmerge(systemTheme, {
        mixins: _createMixinsDefault.default(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: _shadowsDefault.default.slice(),
        typography: _createTypographyDefault.default(palette, typographyInput),
        transitions: _createTransitionsDefault.default(transitionsInput),
        zIndex: _extendsDefault.default({}, _zIndexDefault.default)
    });
    muiTheme = _utils.deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument)=>_utils.deepmerge(acc, argument)
    , muiTheme);
    {
        const stateClasses = [
            'active',
            'checked',
            'completed',
            'disabled',
            'error',
            'expanded',
            'focused',
            'focusVisible',
            'required',
            'selected'
        ];
        const traverse = (node, component)=>{
            let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax
            for(key in node){
                const child = node[key];
                if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                    {
                        const stateClass = _base.generateUtilityClass('', key);
                        console.error([
                            `MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`,
                            'You can not override it like this: ',
                            JSON.stringify(node, null, 2),
                            '',
                            `Instead, you need to use the '&.${stateClass}' syntax:`,
                            JSON.stringify({
                                root: {
                                    [`&.${stateClass}`]: child
                                }
                            }, null, 2),
                            '',
                            'https://mui.com/r/state-classes-guide'
                        ].join('\n'));
                    }
                    node[key] = {};
                }
            }
        };
        Object.keys(muiTheme.components).forEach((component)=>{
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf('Mui') === 0) traverse(styleOverrides, component);
        });
    }
    return muiTheme;
}
let warnedOnce = false;
function createMuiTheme(...args) {
    if (!warnedOnce) {
        warnedOnce = true;
        console.error([
            'MUI: the createMuiTheme function was renamed to createTheme.',
            '',
            "You should use `import { createTheme } from '@mui/material/styles'`"
        ].join('\n'));
    }
    return createTheme(...args);
}
exports.default = createTheme;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","./createMixins":"iyuIG","./createPalette":"fipky","./createTypography":"lnwpF","./shadows":"icWyQ","./createTransitions":"6b8o6","./zIndex":"gjLc0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"656dE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BadgeUnstyled", ()=>_badgeUnstyledDefault.default
);
parcelHelpers.export(exports, "ButtonUnstyled", ()=>_buttonUnstyledDefault.default
);
parcelHelpers.export(exports, "ClickAwayListener", ()=>_clickAwayListenerDefault.default
);
parcelHelpers.export(exports, "unstable_composeClasses", ()=>_composeClassesDefault.default
);
parcelHelpers.export(exports, "generateUtilityClass", ()=>_generateUtilityClassDefault.default
);
parcelHelpers.export(exports, "generateUtilityClasses", ()=>_generateUtilityClassesDefault.default
);
parcelHelpers.export(exports, "FormControlUnstyled", ()=>_formControlUnstyledDefault.default
);
parcelHelpers.export(exports, "InputUnstyled", ()=>_inputUnstyledDefault.default
);
parcelHelpers.export(exports, "MenuUnstyled", ()=>_menuUnstyledDefault.default
);
parcelHelpers.export(exports, "MenuItemUnstyled", ()=>_menuItemUnstyledDefault.default
);
parcelHelpers.export(exports, "ModalUnstyled", ()=>_modalUnstyledDefault.default
);
parcelHelpers.export(exports, "MultiSelectUnstyled", ()=>_multiSelectUnstyledDefault.default
);
parcelHelpers.export(exports, "NoSsr", ()=>_noSsrDefault.default
);
parcelHelpers.export(exports, "OptionGroupUnstyled", ()=>_optionGroupUnstyledDefault.default
);
parcelHelpers.export(exports, "OptionUnstyled", ()=>_optionUnstyledDefault.default
);
parcelHelpers.export(exports, "PopperUnstyled", ()=>_popperUnstyledDefault.default
);
parcelHelpers.export(exports, "Portal", ()=>_portalDefault.default
);
parcelHelpers.export(exports, "SelectUnstyled", ()=>_selectUnstyledDefault.default
);
parcelHelpers.export(exports, "SliderUnstyled", ()=>_sliderUnstyledDefault.default
);
parcelHelpers.export(exports, "SwitchUnstyled", ()=>_switchUnstyledDefault.default
);
parcelHelpers.export(exports, "TabPanelUnstyled", ()=>_tabPanelUnstyledDefault.default
);
parcelHelpers.export(exports, "TabsListUnstyled", ()=>_tabsListUnstyledDefault.default
);
parcelHelpers.export(exports, "TabsUnstyled", ()=>_tabsUnstyledDefault.default
);
parcelHelpers.export(exports, "TabUnstyled", ()=>_tabUnstyledDefault.default
);
parcelHelpers.export(exports, "TextareaAutosize", ()=>_textareaAutosizeDefault.default
);
parcelHelpers.export(exports, "TrapFocus", ()=>_trapFocusDefault.default
);
/** @license MUI v5.0.0-alpha.74
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var _utils = require("./utils");
parcelHelpers.exportAll(_utils, exports);
var _autocompleteUnstyled = require("./AutocompleteUnstyled");
parcelHelpers.exportAll(_autocompleteUnstyled, exports);
var _badgeUnstyled = require("./BadgeUnstyled");
var _badgeUnstyledDefault = parcelHelpers.interopDefault(_badgeUnstyled);
parcelHelpers.exportAll(_badgeUnstyled, exports);
var _buttonUnstyled = require("./ButtonUnstyled");
var _buttonUnstyledDefault = parcelHelpers.interopDefault(_buttonUnstyled);
parcelHelpers.exportAll(_buttonUnstyled, exports);
var _clickAwayListener = require("./ClickAwayListener");
var _clickAwayListenerDefault = parcelHelpers.interopDefault(_clickAwayListener);
var _composeClasses = require("./composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _generateUtilityClass = require("./generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
parcelHelpers.exportAll(_generateUtilityClass, exports);
var _generateUtilityClasses = require("./generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _formControlUnstyled = require("./FormControlUnstyled");
var _formControlUnstyledDefault = parcelHelpers.interopDefault(_formControlUnstyled);
parcelHelpers.exportAll(_formControlUnstyled, exports);
var _inputUnstyled = require("./InputUnstyled");
var _inputUnstyledDefault = parcelHelpers.interopDefault(_inputUnstyled);
parcelHelpers.exportAll(_inputUnstyled, exports);
var _listboxUnstyled = require("./ListboxUnstyled");
parcelHelpers.exportAll(_listboxUnstyled, exports);
var _menuUnstyled = require("./MenuUnstyled");
var _menuUnstyledDefault = parcelHelpers.interopDefault(_menuUnstyled);
parcelHelpers.exportAll(_menuUnstyled, exports);
var _menuItemUnstyled = require("./MenuItemUnstyled");
var _menuItemUnstyledDefault = parcelHelpers.interopDefault(_menuItemUnstyled);
parcelHelpers.exportAll(_menuItemUnstyled, exports);
var _modalUnstyled = require("./ModalUnstyled");
var _modalUnstyledDefault = parcelHelpers.interopDefault(_modalUnstyled);
parcelHelpers.exportAll(_modalUnstyled, exports);
var _multiSelectUnstyled = require("./MultiSelectUnstyled");
var _multiSelectUnstyledDefault = parcelHelpers.interopDefault(_multiSelectUnstyled);
parcelHelpers.exportAll(_multiSelectUnstyled, exports);
var _noSsr = require("./NoSsr");
var _noSsrDefault = parcelHelpers.interopDefault(_noSsr);
var _optionGroupUnstyled = require("./OptionGroupUnstyled");
var _optionGroupUnstyledDefault = parcelHelpers.interopDefault(_optionGroupUnstyled);
parcelHelpers.exportAll(_optionGroupUnstyled, exports);
var _optionUnstyled = require("./OptionUnstyled");
var _optionUnstyledDefault = parcelHelpers.interopDefault(_optionUnstyled);
parcelHelpers.exportAll(_optionUnstyled, exports);
var _popperUnstyled = require("./PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);
var _portal = require("./Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _selectUnstyled = require("./SelectUnstyled");
var _selectUnstyledDefault = parcelHelpers.interopDefault(_selectUnstyled);
parcelHelpers.exportAll(_selectUnstyled, exports);
var _sliderUnstyled = require("./SliderUnstyled");
var _sliderUnstyledDefault = parcelHelpers.interopDefault(_sliderUnstyled);
parcelHelpers.exportAll(_sliderUnstyled, exports);
var _switchUnstyled = require("./SwitchUnstyled");
var _switchUnstyledDefault = parcelHelpers.interopDefault(_switchUnstyled);
parcelHelpers.exportAll(_switchUnstyled, exports);
var _tabPanelUnstyled = require("./TabPanelUnstyled");
var _tabPanelUnstyledDefault = parcelHelpers.interopDefault(_tabPanelUnstyled);
parcelHelpers.exportAll(_tabPanelUnstyled, exports);
var _tabsListUnstyled = require("./TabsListUnstyled");
var _tabsListUnstyledDefault = parcelHelpers.interopDefault(_tabsListUnstyled);
parcelHelpers.exportAll(_tabsListUnstyled, exports);
var _tabsUnstyled = require("./TabsUnstyled");
var _tabsUnstyledDefault = parcelHelpers.interopDefault(_tabsUnstyled);
parcelHelpers.exportAll(_tabsUnstyled, exports);
var _tabUnstyled = require("./TabUnstyled");
var _tabUnstyledDefault = parcelHelpers.interopDefault(_tabUnstyled);
parcelHelpers.exportAll(_tabUnstyled, exports);
var _textareaAutosize = require("./TextareaAutosize");
var _textareaAutosizeDefault = parcelHelpers.interopDefault(_textareaAutosize);
var _trapFocus = require("./TrapFocus");
var _trapFocusDefault = parcelHelpers.interopDefault(_trapFocus);

},{"./utils":"cgIce","./AutocompleteUnstyled":"d81em","./BadgeUnstyled":"2bbTN","./ButtonUnstyled":"jqfJm","./ClickAwayListener":"lOwtq","./composeClasses":"2T3xi","./generateUtilityClass":"81TS1","./generateUtilityClasses":"6i04V","./FormControlUnstyled":"9Sqv9","./InputUnstyled":"3nRPM","./ListboxUnstyled":"lqFWi","./MenuUnstyled":"gCNfC","./MenuItemUnstyled":"37fEE","./ModalUnstyled":"gyieE","./MultiSelectUnstyled":"7oc3N","./NoSsr":false,"./OptionGroupUnstyled":"29SBz","./OptionUnstyled":"lJtjp","./PopperUnstyled":"hxXeM","./Portal":"7L8QJ","./SelectUnstyled":"e7nPk","./SliderUnstyled":"edJYV","./SwitchUnstyled":"jWF6i","./TabPanelUnstyled":"7v1F9","./TabsListUnstyled":"cGLIZ","./TabsUnstyled":"bCtat","./TabUnstyled":"g8FAI","./TextareaAutosize":"5eQzh","./TrapFocus":"3Mfhy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cgIce":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "appendOwnerState", ()=>_appendOwnerStateDefault.default
);
parcelHelpers.export(exports, "areArraysEqual", ()=>_areArraysEqualDefault.default
);
parcelHelpers.export(exports, "extractEventHandlers", ()=>_extractEventHandlersDefault.default
);
parcelHelpers.export(exports, "isHostComponent", ()=>_isHostComponentDefault.default
);
var _appendOwnerState = require("./appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _areArraysEqual = require("./areArraysEqual");
var _areArraysEqualDefault = parcelHelpers.interopDefault(_areArraysEqual);
var _extractEventHandlers = require("./extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
var _isHostComponent = require("./isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./appendOwnerState":"hedlX","./areArraysEqual":"92wIQ","./extractEventHandlers":"iYj1L","./isHostComponent":"b3wck","./types":"ez7qI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hedlX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _isHostComponent = require("./isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
function appendOwnerState(elementType, existingProps = {}, ownerState) {
    if (_isHostComponentDefault.default(elementType)) return existingProps;
    return _extendsDefault.default({}, existingProps, {
        ownerState: _extendsDefault.default({}, existingProps.ownerState, ownerState)
    });
}
exports.default = appendOwnerState;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","./isHostComponent":"b3wck","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3wck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Determines if a given element is a DOM element name (i.e. not a React component).
 */ function isHostComponent(element) {
    return typeof element === 'string';
}
exports.default = isHostComponent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92wIQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function areArraysEqual(array1, array2, itemComparer = (a, b)=>a === b
) {
    return array1.length === array2.length && array1.every((value, index)=>itemComparer(value, array2[index])
    );
}
exports.default = areArraysEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYj1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function extractEventHandlers(object, excludeKeys = []) {
    if (object === undefined) return {};
    const result = {};
    Object.keys(object).filter((prop)=>prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)
    ).forEach((prop)=>{
        result[prop] = object[prop];
    });
    return result;
}
exports.default = extractEventHandlers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ez7qI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d81em":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAutocomplete", ()=>_useAutocompleteDefault.default
);
parcelHelpers.export(exports, "createFilterOptions", ()=>_useAutocomplete.createFilterOptions
);
var _useAutocomplete = require("./useAutocomplete");
var _useAutocompleteDefault = parcelHelpers.interopDefault(_useAutocomplete);

},{"./useAutocomplete":"a84C1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a84C1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFilterOptions", ()=>createFilterOptions
) // To replace with .findIndex() once we stop IE11 support.
;
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
/* eslint-disable no-constant-condition */ var _react = require("react");
var _utils = require("@mui/utils"); // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
// Give up on IE11 support for this feature
function stripDiacritics(string) {
    return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
}
function createFilterOptions(config = {}) {
    const { ignoreAccents =true , ignoreCase =true , limit , matchFrom ='any' , stringify , trim =false  } = config;
    return (options, { inputValue , getOptionLabel  })=>{
        let input = trim ? inputValue.trim() : inputValue;
        if (ignoreCase) input = input.toLowerCase();
        if (ignoreAccents) input = stripDiacritics(input);
        const filteredOptions = options.filter((option)=>{
            let candidate = (stringify || getOptionLabel)(option);
            if (ignoreCase) candidate = candidate.toLowerCase();
            if (ignoreAccents) candidate = stripDiacritics(candidate);
            return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
    };
}
function findIndex(array, comp) {
    for(let i = 0; i < array.length; i += 1){
        if (comp(array[i])) return i;
    }
    return -1;
}
const defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.
const pageSize = 5;
function useAutocomplete(props) {
    const { autoComplete =false , autoHighlight =false , autoSelect =false , blurOnSelect =false , disabled: disabledProp , clearOnBlur =!props.freeSolo , clearOnEscape =false , componentName ='useAutocomplete' , defaultValue =props.multiple ? [] : null , disableClearable =false , disableCloseOnSelect =false , disabledItemsFocusable =false , disableListWrap =false , filterOptions =defaultFilterOptions , filterSelectedOptions =false , freeSolo =false , getOptionDisabled , getOptionLabel: getOptionLabelProp = (option)=>{
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
    } , isOptionEqualToValue =(option, value)=>option === value
     , groupBy , handleHomeEndKeys =!props.freeSolo , id: idProp , includeInputInList =false , inputValue: inputValueProp , multiple =false , onChange , onClose , onHighlightChange , onInputChange , onOpen , open: openProp , openOnFocus =false , options , readOnly =false , selectOnFocus =!props.freeSolo , value: valueProp  } = props;
    const id = _utils.unstable_useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option)=>{
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== 'string') {
            {
                const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
                console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
            }
            return String(optionLabel);
        }
        return optionLabel;
    };
    const ignoreFocus = _react.useRef(false);
    const firstFocus = _react.useRef(true);
    const inputRef = _react.useRef(null);
    const listboxRef = _react.useRef(null);
    const [anchorEl, setAnchorEl] = _react.useState(null);
    const [focusedTag, setFocusedTag] = _react.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = _react.useRef(defaultHighlighted);
    const [value1, setValueState] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
    });
    const [inputValue, setInputValueState] = _utils.unstable_useControlled({
        controlled: inputValueProp,
        default: '',
        name: componentName,
        state: 'inputValue'
    });
    const [focused, setFocused] = _react.useState(false);
    const resetInputValue = _react.useCallback((event, newValue)=>{
        // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
        // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
        const isOptionSelected = multiple ? value1.length < newValue.length : newValue !== null;
        if (!isOptionSelected && !clearOnBlur) return;
        let newInputValue;
        if (multiple) newInputValue = '';
        else if (newValue == null) newInputValue = '';
        else {
            const optionLabel = getOptionLabel(newValue);
            newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
        }
        if (inputValue === newInputValue) return;
        setInputValueState(newInputValue);
        if (onInputChange) onInputChange(event, newInputValue, 'reset');
    }, [
        getOptionLabel,
        inputValue,
        multiple,
        onInputChange,
        setInputValueState,
        clearOnBlur,
        value1
    ]);
    const prevValue = _react.useRef();
    _react.useEffect(()=>{
        const valueChange = value1 !== prevValue.current;
        prevValue.current = value1;
        if (focused && !valueChange) return;
         // Only reset the input's value when freeSolo if the component's value changes.
        if (freeSolo && !valueChange) return;
        resetInputValue(null, value1);
    }, [
        value1,
        resetInputValue,
        focused,
        prevValue,
        freeSolo
    ]);
    const [open, setOpenState] = _utils.unstable_useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: 'open'
    });
    const [inputPristine, setInputPristine] = _react.useState(true);
    const inputValueIsSelectedValue = !multiple && value1 != null && inputValue === getOptionLabel(value1);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(options.filter((option)=>{
        if (filterSelectedOptions && (multiple ? value1 : [
            value1
        ]).some((value2)=>value2 !== null && isOptionEqualToValue(option, value2)
        )) return false;
        return true;
    }), // i.e. the filter predicate always returns true
    {
        inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
        getOptionLabel
    }) : [];
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (value1 !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value1 : [
            value1
        ]).filter((value2)=>!options.some((option)=>isOptionEqualToValue(option, value2)
            )
        );
        if (missingValue.length > 0) console.warn([
            `MUI: The value provided to ${componentName} is invalid.`,
            `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`,
            'You can use the `isOptionEqualToValue` prop to customize the equality test.'
        ].join('\n'));
    }
    const focusTag = _utils.unstable_useEventCallback((tagToFocus)=>{
        if (tagToFocus === -1) inputRef.current.focus();
        else anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
    }); // Ensure the focusedTag is never inconsistent
    _react.useEffect(()=>{
        if (multiple && focusedTag > value1.length - 1) {
            setFocusedTag(-1);
            focusTag(-1);
        }
    }, [
        value1,
        multiple,
        focusedTag,
        focusTag
    ]);
    function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) return -1;
        let nextFocus = index;
        while(true){
            // Out of range
            if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) return -1;
            const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`); // Same logic as MenuList.js
            const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
            if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) // Move to the next element.
            nextFocus += direction === 'next' ? 1 : -1;
            else return nextFocus;
        }
    }
    const setHighlightedIndex = _utils.unstable_useEventCallback(({ event , index , reason ='auto'  })=>{
        highlightedIndexRef.current = index; // does the index exist?
        if (index === -1) inputRef.current.removeAttribute('aria-activedescendant');
        else inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
        if (onHighlightChange) onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        if (!listboxRef.current) return;
        const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');
        if (prev) {
            prev.classList.remove('Mui-focused');
            prev.classList.remove('Mui-focusVisible');
        }
        const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"
        if (!listboxNode) return;
        if (index === -1) {
            listboxNode.scrollTop = 0;
            return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) return;
        option.classList.add('Mui-focused');
        if (reason === 'keyboard') option.classList.add('Mui-focusVisible');
         // Scroll active descendant into view.
        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
        //
        // Consider this API instead once it has a better browser support:
        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
            const element = option;
            const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
            const elementBottom = element.offsetTop + element.offsetHeight;
            if (elementBottom > scrollBottom) listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
            else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
    });
    const changeHighlightedIndex = _utils.unstable_useEventCallback(({ event , diff , direction ='next' , reason ='auto'  })=>{
        if (!popupOpen) return;
        const getNextIndex = ()=>{
            const maxIndex = filteredOptions.length - 1;
            if (diff === 'reset') return defaultHighlighted;
            if (diff === 'start') return 0;
            if (diff === 'end') return maxIndex;
            const newIndex = highlightedIndexRef.current + diff;
            if (newIndex < 0) {
                if (newIndex === -1 && includeInputInList) return -1;
                if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) return 0;
                return maxIndex;
            }
            if (newIndex > maxIndex) {
                if (newIndex === maxIndex + 1 && includeInputInList) return -1;
                if (disableListWrap || Math.abs(diff) > 1) return maxIndex;
                return 0;
            }
            return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
            index: nextIndex,
            reason,
            event
        }); // Sync the content of the input with the highlighted option.
        if (autoComplete && diff !== 'reset') {
            if (nextIndex === -1) inputRef.current.value = inputValue;
            else {
                const option = getOptionLabel(filteredOptions[nextIndex]);
                inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
                // a completion string, appears inline after the input cursor in the textbox.
                const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
                if (index === 0 && inputValue.length > 0) inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
        }
    });
    const syncHighlightedIndex = _react.useCallback(()=>{
        if (!popupOpen) return;
        const valueItem = multiple ? value1[0] : value1; // The popup is empty, reset
        if (filteredOptions.length === 0 || valueItem == null) {
            changeHighlightedIndex({
                diff: 'reset'
            });
            return;
        }
        if (!listboxRef.current) return;
         // Synchronize the value with the highlighted index
        if (valueItem != null) {
            const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible
            if (multiple && currentOption && findIndex(value1, (val)=>isOptionEqualToValue(currentOption, val)
            ) !== -1) return;
            const itemIndex = findIndex(filteredOptions, (optionItem)=>isOptionEqualToValue(optionItem, valueItem)
            );
            if (itemIndex === -1) changeHighlightedIndex({
                diff: 'reset'
            });
            else setHighlightedIndex({
                index: itemIndex
            });
            return;
        } // Prevent the highlighted index to leak outside the boundaries.
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
            setHighlightedIndex({
                index: filteredOptions.length - 1
            });
            return;
        } // Restore the focus to the previous index.
        setHighlightedIndex({
            index: highlightedIndexRef.current
        }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        filteredOptions.length,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        multiple ? false : value1,
        filterSelectedOptions,
        changeHighlightedIndex,
        setHighlightedIndex,
        popupOpen,
        inputValue,
        multiple
    ]);
    const handleListboxRef = _utils.unstable_useEventCallback((node)=>{
        _utils.unstable_setRef(listboxRef, node);
        if (!node) return;
        syncHighlightedIndex();
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
            if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') console.warn([
                `A textarea element was provided to ${componentName} where input was expected.`,
                `This is not a supported scenario but it may work under certain conditions.`,
                `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`,
                `Make sure to test keyboard navigation and add custom event handlers if necessary.`
            ].join('\n'));
            else console.error([
                `MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`,
                `Instead, ${componentName} expects an input element.`,
                '',
                componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'
            ].join('\n'));
        }
    }, [
        componentName
    ]);
    _react.useEffect(()=>{
        syncHighlightedIndex();
    }, [
        syncHighlightedIndex
    ]);
    const handleOpen = (event)=>{
        if (open) return;
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) onOpen(event);
    };
    const handleClose = (event, reason)=>{
        if (!open) return;
        setOpenState(false);
        if (onClose) onClose(event, reason);
    };
    const handleValue = (event, newValue, reason, details)=>{
        if (Array.isArray(value1)) {
            if (value1.length === newValue.length && value1.every((val, i)=>val === newValue[i]
            )) return;
        } else if (value1 === newValue) return;
        if (onChange) onChange(event, newValue, reason, details);
        setValueState(newValue);
    };
    const isTouch = _react.useRef(false);
    const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options')=>{
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
            newValue = Array.isArray(value1) ? value1.slice() : [];
            {
                const matches = newValue.filter((val)=>isOptionEqualToValue(option, val)
                );
                if (matches.length > 1) console.error([
                    `MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`,
                    `The component expects a single value to match a given option but found ${matches.length} matches.`
                ].join('\n'));
            }
            const itemIndex = findIndex(newValue, (valueItem)=>isOptionEqualToValue(option, valueItem)
            );
            if (itemIndex === -1) newValue.push(option);
            else if (origin !== 'freeSolo') {
                newValue.splice(itemIndex, 1);
                reason = 'removeOption';
            }
        }
        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
            option
        });
        if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) handleClose(event, reason);
        if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) inputRef.current.blur();
    };
    function validTagIndex(index, direction) {
        if (index === -1) return -1;
        let nextFocus = index;
        while(true){
            // Out of range
            if (direction === 'next' && nextFocus === value1.length || direction === 'previous' && nextFocus === -1) return -1;
            const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`); // Same logic as MenuList.js
            if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') nextFocus += direction === 'next' ? 1 : -1;
            else return nextFocus;
        }
    }
    const handleFocusTag = (event, direction)=>{
        if (!multiple) return;
        handleClose(event, 'toggleInput');
        let nextTag = focusedTag;
        if (focusedTag === -1) {
            if (inputValue === '' && direction === 'previous') nextTag = value1.length - 1;
        } else {
            nextTag += direction === 'next' ? 1 : -1;
            if (nextTag < 0) nextTag = 0;
            if (nextTag === value1.length) nextTag = -1;
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
    };
    const handleClear = (event)=>{
        ignoreFocus.current = true;
        setInputValueState('');
        if (onInputChange) onInputChange(event, '', 'clear');
        handleValue(event, multiple ? [] : null, 'clear');
    };
    const handleKeyDown = (other)=>(event)=>{
            if (other.onKeyDown) other.onKeyDown(event);
            if (event.defaultMuiPrevented) return;
            if (focusedTag !== -1 && [
                'ArrowLeft',
                'ArrowRight'
            ].indexOf(event.key) === -1) {
                setFocusedTag(-1);
                focusTag(-1);
            } // Wait until IME is settled.
            if (event.which !== 229) switch(event.key){
                case 'Home':
                    if (popupOpen && handleHomeEndKeys) {
                        // Prevent scroll of the page
                        event.preventDefault();
                        changeHighlightedIndex({
                            diff: 'start',
                            direction: 'next',
                            reason: 'keyboard',
                            event
                        });
                    }
                    break;
                case 'End':
                    if (popupOpen && handleHomeEndKeys) {
                        // Prevent scroll of the page
                        event.preventDefault();
                        changeHighlightedIndex({
                            diff: 'end',
                            direction: 'previous',
                            reason: 'keyboard',
                            event
                        });
                    }
                    break;
                case 'PageUp':
                    // Prevent scroll of the page
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: -pageSize,
                        direction: 'previous',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'PageDown':
                    // Prevent scroll of the page
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: pageSize,
                        direction: 'next',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowDown':
                    // Prevent cursor move
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: 1,
                        direction: 'next',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowUp':
                    // Prevent cursor move
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: -1,
                        direction: 'previous',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowLeft':
                    handleFocusTag(event, 'previous');
                    break;
                case 'ArrowRight':
                    handleFocusTag(event, 'next');
                    break;
                case 'Enter':
                    if (highlightedIndexRef.current !== -1 && popupOpen) {
                        const option = filteredOptions[highlightedIndexRef.current];
                        const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.
                        event.preventDefault();
                        if (disabled) return;
                        selectNewValue(event, option, 'selectOption'); // Move the selection to the end.
                        if (autoComplete) inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                    } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
                        if (multiple) // Allow people to add new values before they submit the form.
                        event.preventDefault();
                        selectNewValue(event, inputValue, 'createOption', 'freeSolo');
                    }
                    break;
                case 'Escape':
                    if (popupOpen) {
                        // Avoid Opera to exit fullscreen mode.
                        event.preventDefault(); // Avoid the Modal to handle the event.
                        event.stopPropagation();
                        handleClose(event, 'escape');
                    } else if (clearOnEscape && (inputValue !== '' || multiple && value1.length > 0)) {
                        // Avoid Opera to exit fullscreen mode.
                        event.preventDefault(); // Avoid the Modal to handle the event.
                        event.stopPropagation();
                        handleClear(event);
                    }
                    break;
                case 'Backspace':
                    if (multiple && !readOnly && inputValue === '' && value1.length > 0) {
                        const index = focusedTag === -1 ? value1.length - 1 : focusedTag;
                        const newValue = value1.slice();
                        newValue.splice(index, 1);
                        handleValue(event, newValue, 'removeOption', {
                            option: value1[index]
                        });
                    }
                    break;
                default:
            }
        }
    ;
    const handleFocus = (event)=>{
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) handleOpen(event);
    };
    const handleBlur = (event)=>{
        // Ignore the event when using the scrollbar with IE11
        if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
            inputRef.current.focus();
            return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
        else if (autoSelect && freeSolo && inputValue !== '') selectNewValue(event, inputValue, 'blur', 'freeSolo');
        else if (clearOnBlur) resetInputValue(event, value1);
        handleClose(event, 'blur');
    };
    const handleInputChange = (event)=>{
        const newValue = event.target.value;
        if (inputValue !== newValue) {
            setInputValueState(newValue);
            setInputPristine(false);
            if (onInputChange) onInputChange(event, newValue, 'input');
        }
        if (newValue === '') {
            if (!disableClearable && !multiple) handleValue(event, null, 'clear');
        } else handleOpen(event);
    };
    const handleOptionMouseOver = (event)=>{
        setHighlightedIndex({
            event,
            index: Number(event.currentTarget.getAttribute('data-option-index')),
            reason: 'mouse'
        });
    };
    const handleOptionTouchStart = ()=>{
        isTouch.current = true;
    };
    const handleOptionClick = (event)=>{
        const index = Number(event.currentTarget.getAttribute('data-option-index'));
        selectNewValue(event, filteredOptions[index], 'selectOption');
        isTouch.current = false;
    };
    const handleTagDelete = (index)=>(event)=>{
            const newValue = value1.slice();
            newValue.splice(index, 1);
            handleValue(event, newValue, 'removeOption', {
                option: value1[index]
            });
        }
    ;
    const handlePopupIndicator = (event)=>{
        if (open) handleClose(event, 'toggleInput');
        else handleOpen(event);
    }; // Prevent input blur when interacting with the combobox
    const handleMouseDown = (event)=>{
        if (event.target.getAttribute('id') !== id) event.preventDefault();
    }; // Focus the input when interacting with the combobox
    const handleClick = ()=>{
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) inputRef.current.select();
        firstFocus.current = false;
    };
    const handleInputMouseDown = (event)=>{
        if (inputValue === '' || !open) handlePopupIndicator(event);
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value1.length > 0 : value1 !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
        // used to keep track of key and indexes in the result array
        const indexBy = new Map();
        let warn = false;
        groupedOptions = filteredOptions.reduce((acc, option, index)=>{
            const group = groupBy(option);
            if (acc.length > 0 && acc[acc.length - 1].group === group) acc[acc.length - 1].options.push(option);
            else {
                if (indexBy.get(group) && !warn) {
                    console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
                    warn = true;
                }
                indexBy.set(group, true);
                acc.push({
                    key: index,
                    index,
                    group,
                    options: [
                        option
                    ]
                });
            }
            return acc;
        }, []);
    }
    if (disabledProp && focused) handleBlur();
    return {
        getRootProps: (other = {})=>_extendsDefault.default({
                'aria-owns': listboxAvailable ? `${id}-listbox` : null
            }, other, {
                onKeyDown: handleKeyDown(other),
                onMouseDown: handleMouseDown,
                onClick: handleClick
            })
        ,
        getInputLabelProps: ()=>({
                id: `${id}-label`,
                htmlFor: id
            })
        ,
        getInputProps: ()=>({
                id,
                value: inputValue,
                onBlur: handleBlur,
                onFocus: handleFocus,
                onChange: handleInputChange,
                onMouseDown: handleInputMouseDown,
                // if open then this is handled imperativeley so don't let react override
                // only have an opinion about this when closed
                'aria-activedescendant': popupOpen ? '' : null,
                'aria-autocomplete': autoComplete ? 'both' : 'list',
                'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
                'aria-expanded': listboxAvailable,
                // Disable browser's suggestion that might overlap with the popup.
                // Handle autocomplete but not autofill.
                autoComplete: 'off',
                ref: inputRef,
                autoCapitalize: 'none',
                spellCheck: 'false',
                role: 'combobox'
            })
        ,
        getClearProps: ()=>({
                tabIndex: -1,
                onClick: handleClear
            })
        ,
        getPopupIndicatorProps: ()=>({
                tabIndex: -1,
                onClick: handlePopupIndicator
            })
        ,
        getTagProps: ({ index  })=>_extendsDefault.default({
                key: index,
                'data-tag-index': index,
                tabIndex: -1
            }, !readOnly && {
                onDelete: handleTagDelete(index)
            })
        ,
        getListboxProps: ()=>({
                role: 'listbox',
                id: `${id}-listbox`,
                'aria-labelledby': `${id}-label`,
                ref: handleListboxRef,
                onMouseDown: (event)=>{
                    // Prevent blur
                    event.preventDefault();
                }
            })
        ,
        getOptionProps: ({ index , option  })=>{
            const selected = (multiple ? value1 : [
                value1
            ]).some((value2)=>value2 != null && isOptionEqualToValue(option, value2)
            );
            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
            return {
                key: getOptionLabel(option),
                tabIndex: -1,
                role: 'option',
                id: `${id}-option-${index}`,
                onMouseOver: handleOptionMouseOver,
                onClick: handleOptionClick,
                onTouchStart: handleOptionTouchStart,
                'data-option-index': index,
                'aria-disabled': disabled,
                'aria-selected': selected
            };
        },
        id,
        inputValue,
        value: value1,
        dirty,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
    };
}
exports.default = useAutocomplete;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bbTN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_badgeUnstyledDefault.default
);
parcelHelpers.export(exports, "useBadge", ()=>_useBadgeDefault.default
);
parcelHelpers.export(exports, "badgeUnstyledClasses", ()=>_badgeUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getBadgeUtilityClass", ()=>_badgeUnstyledClasses.getBadgeUtilityClass
);
var _badgeUnstyled = require("./BadgeUnstyled");
var _badgeUnstyledDefault = parcelHelpers.interopDefault(_badgeUnstyled);
var _useBadge = require("./useBadge");
var _useBadgeDefault = parcelHelpers.interopDefault(_useBadge);
var _badgeUnstyledClasses = require("./badgeUnstyledClasses");
var _badgeUnstyledClassesDefault = parcelHelpers.interopDefault(_badgeUnstyledClasses);

},{"./BadgeUnstyled":"abIY0","./useBadge":"TmCds","./badgeUnstyledClasses":"gYn5y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"abIY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _useBadge = require("./useBadge");
var _useBadgeDefault = parcelHelpers.interopDefault(_useBadge);
var _badgeUnstyledClasses = require("./badgeUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "anchorOrigin",
    "classes",
    "badgeContent",
    "component",
    "children",
    "className",
    "components",
    "componentsProps",
    "invisible",
    "max",
    "showZero",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { variant , anchorOrigin , invisible , classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        badge: [
            'badge',
            variant,
            `anchorOrigin${_utils.unstable_capitalize(anchorOrigin.vertical)}${_utils.unstable_capitalize(anchorOrigin.horizontal)}`,
            invisible && 'invisible'
        ]
    };
    return _composeClassesDefault.default(slots, _badgeUnstyledClasses.getBadgeUtilityClass, classes);
};
const BadgeUnstyled = /*#__PURE__*/ _react.forwardRef(function BadgeUnstyled(props, ref) {
    const { anchorOrigin: anchorOriginProp = {
        vertical: 'top',
        horizontal: 'right'
    } , classes: classesProp , component , children , className , components ={} , componentsProps ={} , max: maxProp = 99 , showZero =false , variant: variantProp = 'standard'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { anchorOrigin , badgeContent , max , variant , displayValue , invisible  } = _useBadgeDefault.default(_extendsDefault.default({}, props, {
        anchorOrigin: anchorOriginProp,
        max: maxProp,
        variant: variantProp
    }));
    const ownerState = _extendsDefault.default({}, props, {
        anchorOrigin,
        badgeContent,
        classes: classesProp,
        invisible,
        max,
        variant,
        showZero
    });
    const classes = useUtilityClasses(ownerState);
    const Root = component || components.Root || 'span';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    const Badge = components.Badge || 'span';
    const badgeProps = _appendOwnerStateDefault.default(Badge, componentsProps.badge, ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, {
        ref: ref
    }, other, {
        className: _clsxDefault.default(classes.root, rootProps.className, className),
        children: [
            children,
            /*#__PURE__*/ _jsxRuntime.jsx(Badge, _extendsDefault.default({}, badgeProps, {
                className: _clsxDefault.default(classes.badge, badgeProps.className),
                children: displayValue
            }))
        ]
    }));
});
BadgeUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */ anchorOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOf([
            'left',
            'right'
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOf([
            'bottom',
            'top'
        ]).isRequired
    }),
    /**
   * The content rendered within the badge.
   */ badgeContent: _propTypesDefault.default.node,
    /**
   * The badge will be added relative to this node.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Badge: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Badge.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        badge: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the badge is invisible.
   * @default false
   */ invisible: _propTypesDefault.default.bool,
    /**
   * Max count to show.
   * @default 99
   */ max: _propTypesDefault.default.number,
    /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */ showZero: _propTypesDefault.default.bool,
    /**
   * The variant to use.
   * @default 'standard'
   */ variant: _propTypesDefault.default.string
};
exports.default = BadgeUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../composeClasses":"2T3xi","../utils/appendOwnerState":"hedlX","./useBadge":"TmCds","./badgeUnstyledClasses":"gYn5y","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2T3xi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_composeClassesDefault.default
);
var _composeClasses = require("./composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);

},{"./composeClasses":"lUpkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUpkP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function composeClasses(slots, getUtilityClass, classes) {
    const output = {};
    Object.keys(slots).forEach(// @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    (slot)=>{
        output[slot] = slots[slot].reduce((acc, key)=>{
            if (key) {
                if (classes && classes[key]) acc.push(classes[key]);
                acc.push(getUtilityClass(key));
            }
            return acc;
        }, []).join(' ');
    });
    return output;
}
exports.default = composeClasses;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"TmCds":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function useBadge(props) {
    const { anchorOrigin: anchorOriginProp = {
        vertical: 'top',
        horizontal: 'right'
    } , badgeContent: badgeContentProp , invisible: invisibleProp = false , max: maxProp = 99 , showZero =false , variant: variantProp = 'standard'  } = props;
    const prevProps = _utils.usePreviousProps({
        anchorOrigin: anchorOriginProp,
        badgeContent: badgeContentProp,
        max: maxProp,
        variant: variantProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) invisible = true;
    const { anchorOrigin =anchorOriginProp , badgeContent , max =maxProp , variant =variantProp  } = invisible ? prevProps : props;
    let displayValue = '';
    if (variant !== 'dot') displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
    return {
        anchorOrigin,
        badgeContent,
        invisible,
        max,
        variant,
        displayValue
    };
}
exports.default = useBadge;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYn5y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBadgeUtilityClass", ()=>getBadgeUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getBadgeUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiBadge', slot);
}
const badgeUnstyledClasses = _generateUtilityClassesDefault.default('MuiBadge', [
    'root',
    'badge',
    'dot',
    'standard',
    'anchorOriginTopLeft',
    'anchorOriginTopRight',
    'anchorOriginBottomLeft',
    'anchorOriginBottomRight',
    'invisible'
]);
exports.default = badgeUnstyledClasses;

},{"../generateUtilityClasses":"6i04V","../generateUtilityClass":"81TS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6i04V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_generateUtilityClassesDefault.default
);
var _generateUtilityClasses = require("./generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);

},{"./generateUtilityClasses":"g2DA9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2DA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function generateUtilityClasses(componentName, slots) {
    const result = {};
    slots.forEach((slot)=>{
        result[slot] = _generateUtilityClassDefault.default(componentName, slot);
    });
    return result;
}
exports.default = generateUtilityClasses;

},{"../generateUtilityClass":"81TS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"81TS1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_generateUtilityClassDefault.default
);
var _generateUtilityClass = require("./generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
parcelHelpers.exportAll(_generateUtilityClass, exports);

},{"./generateUtilityClass":"gSFnW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSFnW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classNameGenerator = require("../className/ClassNameGenerator");
var _classNameGeneratorDefault = parcelHelpers.interopDefault(_classNameGenerator);
const globalStateClassesMapping = {
    active: 'Mui-active',
    checked: 'Mui-checked',
    completed: 'Mui-completed',
    disabled: 'Mui-disabled',
    error: 'Mui-error',
    expanded: 'Mui-expanded',
    focused: 'Mui-focused',
    focusVisible: 'Mui-focusVisible',
    required: 'Mui-required',
    selected: 'Mui-selected'
};
function generateUtilityClass(componentName, slot) {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || `${_classNameGeneratorDefault.default.generate(componentName)}-${slot}`;
}
exports.default = generateUtilityClass;

},{"../className/ClassNameGenerator":"blICS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blICS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const defaultGenerator = (componentName)=>componentName
;
const createClassNameGenerator = ()=>{
    let generate = defaultGenerator;
    return {
        configure (generator) {
            generate = generator;
        },
        generate (componentName) {
            return generate(componentName);
        },
        reset () {
            generate = defaultGenerator;
        }
    };
};
const ClassNameGenerator = createClassNameGenerator();
exports.default = ClassNameGenerator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqfJm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonUnstyledDefault.default
);
parcelHelpers.export(exports, "buttonUnstyledClasses", ()=>_buttonUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getButtonUnstyledUtilityClass", ()=>_buttonUnstyledClasses.getButtonUnstyledUtilityClass
);
parcelHelpers.export(exports, "useButton", ()=>_useButtonDefault.default
);
var _buttonUnstyled = require("./ButtonUnstyled");
var _buttonUnstyledDefault = parcelHelpers.interopDefault(_buttonUnstyled);
var _buttonUnstyledClasses = require("./buttonUnstyledClasses");
var _buttonUnstyledClassesDefault = parcelHelpers.interopDefault(_buttonUnstyledClasses);
var _buttonUnstyledTypes = require("./ButtonUnstyled.types");
parcelHelpers.exportAll(_buttonUnstyledTypes, exports);
var _useButton = require("./useButton");
var _useButtonDefault = parcelHelpers.interopDefault(_useButton);
var _useButtonTypes = require("./useButton.types");
parcelHelpers.exportAll(_useButtonTypes, exports);

},{"./ButtonUnstyled":"hxE8S","./buttonUnstyledClasses":"lgZZU","./ButtonUnstyled.types":"eMKDa","./useButton":"hUyu6","./useButton.types":"6sTfH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxE8S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _buttonUnstyledClasses = require("./buttonUnstyledClasses");
var _useButton = require("./useButton");
var _useButtonDefault = parcelHelpers.interopDefault(_useButton);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "components",
    "componentsProps",
    "children",
    "disabled",
    "action",
    "onBlur",
    "onClick",
    "onFocus",
    "onFocusVisible",
    "onKeyDown",
    "onKeyUp",
    "onMouseLeave"
];
const useUtilityClasses = (ownerState)=>{
    const { active , disabled , focusVisible  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible',
            active && 'active'
        ]
    };
    return _composeClassesDefault.default(slots, _buttonUnstyledClasses.getButtonUnstyledUtilityClass, {});
};
/**
 * The foundation for building custom-styled buttons.
 *
 * Demos:
 *
 * - [Button](https://mui.com/base/react-button/)
 *
 * API:
 *
 * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)
 */ const ButtonUnstyled = /*#__PURE__*/ _react.forwardRef(function ButtonUnstyled(props, forwardedRef) {
    var _ref, _componentsProps$root;
    const { className , component , components ={} , componentsProps ={} , children , action  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const buttonRef = _react.useRef();
    const handleRef = _utils.unstable_useForkRef(buttonRef, forwardedRef);
    const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const { active , focusVisible , setFocusVisible , getRootProps  } = _useButtonDefault.default(_extendsDefault.default({}, props, {
        component: ButtonRoot,
        ref: handleRef
    }));
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        })
    , [
        setFocusVisible
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        active,
        focusVisible
    });
    const classes = useUtilityClasses(ownerState);
    const buttonRootProps = _appendOwnerStateDefault.default(ButtonRoot, _extendsDefault.default({}, getRootProps(), other, componentsProps.root, {
        className: _clsxDefault.default(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(ButtonRoot, _extendsDefault.default({}, buttonRootProps, {
        children: children
    }));
});
ButtonUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */ action: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.shape({
            current: _propTypesDefault.default.shape({
                focusVisible: _propTypesDefault.default.func.isRequired
            })
        })
    ]),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * @default 'button'
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Button.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Button.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onFocusVisible: _propTypesDefault.default.func
};
exports.default = ButtonUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../composeClasses":"2T3xi","./buttonUnstyledClasses":"lgZZU","./useButton":"hUyu6","../utils/appendOwnerState":"hedlX","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgZZU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonUnstyledUtilityClass", ()=>getButtonUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getButtonUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('ButtonUnstyled', slot);
}
const buttonUnstyledClasses = _generateUtilityClassesDefault.default('ButtonUnstyled', [
    'root',
    'active',
    'disabled',
    'focusVisible'
]);
exports.default = buttonUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUyu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _extractEventHandlers = require("../utils/extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
function useButton(parameters) {
    const { component ='button' , disabled =false , href , ref , tabIndex =0 , to , type  } = parameters;
    const buttonRef = _react.useRef();
    const [active, setActive] = _react.useState(false);
    const { isFocusVisibleRef , onFocus: handleFocusVisible , onBlur: handleBlurVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useEffect(()=>{
        isFocusVisibleRef.current = focusVisible;
    }, [
        focusVisible,
        isFocusVisibleRef
    ]);
    const createHandleMouseLeave = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous;
            if (focusVisible) event.preventDefault();
            (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);
        }
    ;
    const createHandleBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$onBlur;
            handleBlurVisible(event);
            if (isFocusVisibleRef.current === false) setFocusVisible(false);
            (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
        }
    ;
    const createHandleFocus = (otherHandlers)=>(event)=>{
            var _otherHandlers$onFocu2;
            // Fix for https://github.com/facebook/react/issues/7769
            if (!buttonRef.current) buttonRef.current = event.currentTarget;
            handleFocusVisible(event);
            if (isFocusVisibleRef.current === true) {
                var _otherHandlers$onFocu;
                setFocusVisible(true);
                (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);
            }
            (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);
        }
    ;
    const isNonNativeButton = ()=>{
        const button = buttonRef.current;
        return component !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);
    };
    const createHandleClick = (otherHandlers)=>(event)=>{
            if (!disabled) {
                var _otherHandlers$onClic;
                (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
            }
        }
    ;
    const createHandleMouseDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous2;
            if (event.target === event.currentTarget && !disabled) setActive(true);
            (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);
        }
    ;
    const createHandleMouseUp = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous3;
            if (event.target === event.currentTarget) setActive(false);
            (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null || _otherHandlers$onMous3.call(otherHandlers, event);
        }
    ;
    const createHandleKeyDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyD;
            (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
            if (event.defaultPrevented) return;
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
            if (event.target === event.currentTarget && event.key === ' ' && !disabled) setActive(true);
             // Keyboard accessibility for non interactive elements
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
                var _otherHandlers$onClic2;
                (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
                event.preventDefault();
            }
        }
    ;
    const createHandleKeyUp = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyU;
            // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
            // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
            if (event.target === event.currentTarget) setActive(false);
            (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements
            if (event.target === event.currentTarget && isNonNativeButton() && !disabled && event.key === ' ' && !event.defaultPrevented) {
                var _otherHandlers$onClic3;
                (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);
            }
        }
    ;
    const handleOwnRef = _utils.unstable_useForkRef(focusVisibleRef, buttonRef);
    const handleRef = _utils.unstable_useForkRef(ref, handleOwnRef);
    const [hostElementName, setHostElementName] = _react.useState('');
    const updateRef = (instance)=>{
        var _instance$tagName;
        setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
        _utils.unstable_setRef(handleRef, instance);
    };
    const buttonProps = {};
    if (hostElementName === 'BUTTON') {
        buttonProps.type = type != null ? type : 'button';
        buttonProps.disabled = disabled;
    } else if (hostElementName !== '') {
        if (!href && !to) buttonProps.role = 'button';
        if (disabled) buttonProps['aria-disabled'] = disabled;
    }
    const getRootProps = (otherHandlers = {})=>{
        const propsEventHandlers = _extractEventHandlersDefault.default(parameters);
        const externalEventHandlers = _extendsDefault.default({}, propsEventHandlers, otherHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
        // it must not be forwarded to the inner component.
        delete externalEventHandlers.onFocusVisible;
        return _extendsDefault.default({
            tabIndex: disabled ? -1 : tabIndex,
            type
        }, externalEventHandlers, buttonProps, {
            onBlur: createHandleBlur(externalEventHandlers),
            onClick: createHandleClick(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onKeyDown: createHandleKeyDown(externalEventHandlers),
            onKeyUp: createHandleKeyUp(externalEventHandlers),
            onMouseDown: createHandleMouseDown(externalEventHandlers),
            onMouseLeave: createHandleMouseLeave(externalEventHandlers),
            onMouseUp: createHandleMouseUp(externalEventHandlers),
            ref: updateRef
        });
    };
    return {
        getRootProps,
        focusVisible,
        setFocusVisible,
        disabled,
        active
    };
}
exports.default = useButton;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","../utils/extractEventHandlers":"iYj1L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMKDa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sTfH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOwtq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_clickAwayListenerDefault.default
);
var _clickAwayListener = require("./ClickAwayListener");
var _clickAwayListenerDefault = parcelHelpers.interopDefault(_clickAwayListener);
parcelHelpers.exportAll(_clickAwayListener, exports);

},{"./ClickAwayListener":"65ttv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65ttv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils"); // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1
var _jsxRuntime = require("react/jsx-runtime");
function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
/**
 * Listen for click events that occur somewhere in the document, outside of the element itself.
 * For instance, if you need to hide a menu when people click anywhere else on your page.
 *
 * Demos:
 *
 * - [Click Away Listener](https://mui.com/base/components/click-away-listener/)
 * - [Click Away Listener](https://mui.com/material-ui/react-click-away-listener/)
 * - [Menus](https://mui.com/material-ui/react-menu/)
 *
 * API:
 *
 * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)
 */ function ClickAwayListener(props) {
    const { children , disableReactTree =false , mouseEvent ='onClick' , onClickAway , touchEvent ='onTouchEnd'  } = props;
    const movedRef = _react.useRef(false);
    const nodeRef = _react.useRef(null);
    const activatedRef = _react.useRef(false);
    const syntheticEventRef = _react.useRef(false);
    _react.useEffect(()=>{
        // Ensure that this component is not "activated" synchronously.
        // https://github.com/facebook/react/issues/20074
        setTimeout(()=>{
            activatedRef.current = true;
        }, 0);
        return ()=>{
            activatedRef.current = false;
        };
    }, []);
    const handleRef = _utils.unstable_useForkRef(children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:
    //
    // event.preventDefault() is meant to stop default behaviors like
    // clicking a checkbox to check it, hitting a button to submit a form,
    // and hitting left arrow to move the cursor in a text input etc.
    // Only special HTML elements have these default behaviors.
    const handleClickAway = _utils.unstable_useEventCallback((event)=>{
        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = _utils.unstable_ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
        // 2. The child might render null.
        // 3. Behave like a blur listener.
        if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) return;
         // Do not act if user performed touchmove
        if (movedRef.current) {
            movedRef.current = false;
            return;
        }
        let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
        if (event.composedPath) insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        else insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        if (!insideDOM && (disableReactTree || !insideReactTree)) onClickAway(event);
    }); // Keep track of mouse/touch events that bubbled up through the portal.
    const createHandleSynthetic = (handlerName)=>(event)=>{
            syntheticEventRef.current = true;
            const childrenPropsHandler = children.props[handlerName];
            if (childrenPropsHandler) childrenPropsHandler(event);
        }
    ;
    const childrenProps = {
        ref: handleRef
    };
    if (touchEvent !== false) childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    _react.useEffect(()=>{
        if (touchEvent !== false) {
            const mappedTouchEvent = mapEventPropToEvent(touchEvent);
            const doc = _utils.unstable_ownerDocument(nodeRef.current);
            const handleTouchMove = ()=>{
                movedRef.current = true;
            };
            doc.addEventListener(mappedTouchEvent, handleClickAway);
            doc.addEventListener('touchmove', handleTouchMove);
            return ()=>{
                doc.removeEventListener(mappedTouchEvent, handleClickAway);
                doc.removeEventListener('touchmove', handleTouchMove);
            };
        }
        return undefined;
    }, [
        handleClickAway,
        touchEvent
    ]);
    if (mouseEvent !== false) childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    _react.useEffect(()=>{
        if (mouseEvent !== false) {
            const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
            const doc = _utils.unstable_ownerDocument(nodeRef.current);
            doc.addEventListener(mappedMouseEvent, handleClickAway);
            return ()=>{
                doc.removeEventListener(mappedMouseEvent, handleClickAway);
            };
        }
        return undefined;
    }, [
        handleClickAway,
        mouseEvent
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
        children: /*#__PURE__*/ _react.cloneElement(children, childrenProps)
    });
}
ClickAwayListener.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The wrapped element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */ disableReactTree: _propTypesDefault.default.bool,
    /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */ mouseEvent: _propTypesDefault.default.oneOf([
        'onClick',
        'onMouseDown',
        'onMouseUp',
        false
    ]),
    /**
   * Callback fired when a "click away" event is detected.
   */ onClickAway: _propTypesDefault.default.func.isRequired,
    /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */ touchEvent: _propTypesDefault.default.oneOf([
        'onTouchEnd',
        'onTouchStart',
        false
    ])
};
// eslint-disable-next-line
ClickAwayListener["propTypes"] = _utils.exactProp(ClickAwayListener.propTypes);
exports.default = ClickAwayListener;

},{"react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Sqv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formControlUnstyledDefault.default
);
parcelHelpers.export(exports, "FormControlUnstyledContext", ()=>_formControlContextDefault.default
);
parcelHelpers.export(exports, "formControlUnstyledClasses", ()=>_formControlUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useFormControlUnstyled", ()=>_useFormControlDefault.default
);
var _formControlUnstyled = require("./FormControlUnstyled");
var _formControlUnstyledDefault = parcelHelpers.interopDefault(_formControlUnstyled);
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
parcelHelpers.exportAll(_formControlContext, exports);
var _formControlUnstyledClasses = require("./formControlUnstyledClasses");
var _formControlUnstyledClassesDefault = parcelHelpers.interopDefault(_formControlUnstyledClasses);
parcelHelpers.exportAll(_formControlUnstyledClasses, exports);
var _useFormControl = require("./useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);

},{"./FormControlUnstyled":"4RnF0","./FormControlContext":"aBh4a","./formControlUnstyledClasses":"f5zil","./useFormControl":"8ClQK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4RnF0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _formControlUnstyledClasses = require("./formControlUnstyledClasses");
var _formControlUnstyledClassesDefault = parcelHelpers.interopDefault(_formControlUnstyledClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "defaultValue",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "disabled",
    "error",
    "focused",
    "onChange",
    "required",
    "value"
];
function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
}
/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 * *   FormLabel
 * *   FormHelperText
 * *   Input
 * *   InputLabel
 *
 * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
 *
 * Demos:
 *
 * - [Text Fields](https://mui.com/components/text-fields/)
 *
 * API:
 *
 * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)
 */ const FormControlUnstyled = /*#__PURE__*/ _react.forwardRef(function FormControlUnstyled(props, ref) {
    var _ref;
    const { defaultValue , children , className , component , components ={} , componentsProps ={} , disabled =false , error =false , focused: visuallyFocused , onChange , required =false , value: incomingValue  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [value, setValue] = _utils.unstable_useControlled({
        controlled: incomingValue,
        default: defaultValue,
        name: 'FormControl',
        state: 'value'
    });
    const filled = hasValue(value);
    const [focusedState, setFocused] = _react.useState(false);
    if (disabled && focusedState) setFocused(false);
    const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
    const ownerState = _extendsDefault.default({}, props, {
        disabled,
        error,
        filled,
        focused,
        required
    });
    let registerEffect = ()=>{};
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const registeredInput = _react.useRef(false);
        registerEffect = ()=>{
            if (registeredInput.current) console.error([
                'MUI: There are multiple `Input` components inside a FormControl.',
                'This creates visual inconsistencies, only use one `Input`.'
            ].join('\n'));
            registeredInput.current = true;
            return ()=>{
                registeredInput.current = false;
            };
        };
    }
    const handleChange = (event)=>{
        setValue(event.target.value);
        onChange == null || onChange(event);
    };
    const childContext = {
        disabled,
        error,
        filled,
        focused,
        onBlur: ()=>{
            setFocused(false);
        },
        onChange: handleChange,
        onFocus: ()=>{
            setFocused(true);
        },
        registerEffect,
        required,
        value: value != null ? value : ''
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_formControlContextDefault.default.Provider, {
        value: childContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({
            ref: ref
        }, rootProps, {
            className: _clsxDefault.default(_formControlUnstyledClassesDefault.default.root, className, rootProps == null ? void 0 : rootProps.className, disabled && _formControlUnstyledClassesDefault.default.disabled),
            children: children
        }))
    });
});
FormControlUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the FormControl.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * @ignore
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * @ignore
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is displayed in focused state.
   * @default false
   */ focused: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */ required: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ value: _propTypesDefault.default.any
};
exports.default = FormControlUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","./FormControlContext":"aBh4a","../utils/appendOwnerState":"hedlX","./formControlUnstyledClasses":"f5zil","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aBh4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const FormControlUnstyledContext = /*#__PURE__*/ _react.createContext(undefined);
FormControlUnstyledContext.displayName = 'FormControlUnstyledContext';
exports.default = FormControlUnstyledContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f5zil":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormControlUnstyledUtilityClasses", ()=>getFormControlUnstyledUtilityClasses
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getFormControlUnstyledUtilityClasses(slot) {
    return _generateUtilityClassDefault.default('MuiFormControl', slot);
}
const formControlUnstyledClasses = _generateUtilityClassesDefault.default('MuiFormControl', [
    'root',
    'disabled'
]);
exports.default = formControlUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ClQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
function useFormControlUnstyled() {
    return _react.useContext(_formControlContextDefault.default);
}
exports.default = useFormControlUnstyled;

},{"react":"21dqq","./FormControlContext":"aBh4a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nRPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputUnstyledDefault.default
);
parcelHelpers.export(exports, "useInput", ()=>_useInputDefault.default
);
parcelHelpers.export(exports, "inputUnstyledClasses", ()=>_inputUnstyledClassesDefault.default
);
var _inputUnstyled = require("./InputUnstyled");
var _inputUnstyledDefault = parcelHelpers.interopDefault(_inputUnstyled);
var _inputUnstyledProps = require("./InputUnstyledProps");
parcelHelpers.exportAll(_inputUnstyledProps, exports);
var _useInput = require("./useInput");
var _useInputDefault = parcelHelpers.interopDefault(_useInput);
var _inputUnstyledClasses = require("./inputUnstyledClasses");
var _inputUnstyledClassesDefault = parcelHelpers.interopDefault(_inputUnstyledClasses);
parcelHelpers.exportAll(_inputUnstyledClasses, exports);

},{"./InputUnstyled":"3Nyft","./InputUnstyledProps":"bgz2D","./useInput":"86mFO","./inputUnstyledClasses":"2DLiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Nyft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _inputUnstyledClasses = require("./inputUnstyledClasses");
var _inputUnstyledClassesDefault = parcelHelpers.interopDefault(_inputUnstyledClasses);
var _useInput = require("./useInput");
var _useInputDefault = parcelHelpers.interopDefault(_useInput);
/**
 *
 * Demos:
 *
 * - [Input](https://mui.com/base/react-input/)
 *
 * API:
 *
 * - [InputUnstyled API](https://mui.com/base/api/input-unstyled/)
 */ var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-describedby",
    "aria-label",
    "aria-labelledby",
    "autoComplete",
    "autoFocus",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultValue",
    "disabled",
    "endAdornment",
    "error",
    "id",
    "maxRows",
    "minRows",
    "multiline",
    "name",
    "onClick",
    "onChange",
    "onKeyDown",
    "onKeyUp",
    "onFocus",
    "onBlur",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "type",
    "startAdornment",
    "value"
];
const InputUnstyled = /*#__PURE__*/ _react.forwardRef(function InputUnstyled(props, ref) {
    var _componentsProps$inpu, _ref, _componentsProps$root, _components$Input, _componentsProps$inpu2;
    const { 'aria-describedby': ariaDescribedby , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby , autoComplete , autoFocus , className , component , components ={} , componentsProps ={} , defaultValue , disabled , endAdornment , error , id , maxRows , minRows , multiline =false , name , onClick , onChange , onKeyDown , onKeyUp , onFocus , onBlur , placeholder , readOnly , required , rows , type ='text' , startAdornment , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { getRootProps , getInputProps , focused , formControlContext , error: errorState , disabled: disabledState  } = _useInputDefault.default({
        disabled,
        defaultValue,
        error,
        onBlur,
        onClick,
        onChange,
        onFocus,
        required,
        value
    }, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.ref);
    const ownerState = _extendsDefault.default({}, props, {
        disabled: disabledState,
        error: errorState,
        focused,
        formControlContext,
        multiline,
        type
    });
    const rootStateClasses = _clsxDefault.default(disabledState && _inputUnstyledClassesDefault.default.disabled, errorState && _inputUnstyledClassesDefault.default.error, focused && _inputUnstyledClassesDefault.default.focused, Boolean(formControlContext) && _inputUnstyledClassesDefault.default.formControl, multiline && _inputUnstyledClassesDefault.default.multiline, Boolean(startAdornment) && _inputUnstyledClassesDefault.default.adornedStart, Boolean(endAdornment) && _inputUnstyledClassesDefault.default.adornedEnd);
    const inputStateClasses = _clsxDefault.default(disabledState && _inputUnstyledClassesDefault.default.disabled, multiline && _inputUnstyledClassesDefault.default.multiline);
    const propsToForward = {
        'aria-describedby': ariaDescribedby,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby,
        autoComplete,
        autoFocus,
        id,
        onKeyDown,
        onKeyUp,
        name,
        placeholder,
        readOnly,
        type
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, getRootProps(_extendsDefault.default({}, other, componentsProps.root)), {
        className: _clsxDefault.default(_inputUnstyledClassesDefault.default.root, rootStateClasses, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    let Input = (_components$Input = components.Input) != null ? _components$Input : 'input'; // TODO: type this properly
    let inputProps = _appendOwnerStateDefault.default(Input, _extendsDefault.default({}, getInputProps(_extendsDefault.default({}, componentsProps.input, propsToForward)), {
        className: _clsxDefault.default(_inputUnstyledClassesDefault.default.input, inputStateClasses, (_componentsProps$inpu2 = componentsProps.input) == null ? void 0 : _componentsProps$inpu2.className)
    }), ownerState);
    if (multiline) {
        var _components$Textarea, _components$Textarea2;
        const hasHostTexarea = _isHostComponentDefault.default((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');
        if (rows) {
            if (minRows || maxRows) console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
            inputProps = _extendsDefault.default({
                type: undefined,
                minRows: hasHostTexarea ? undefined : rows,
                maxRows: hasHostTexarea ? undefined : rows
            }, inputProps, hasHostTexarea && {
                ownerState: undefined
            });
        } else inputProps = _extendsDefault.default({
            type: undefined,
            maxRows: hasHostTexarea ? undefined : maxRows,
            minRows: hasHostTexarea ? undefined : minRows
        }, inputProps, hasHostTexarea && {
            ownerState: undefined
        });
        Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
    }
    return /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, {
        ref: ref,
        children: [
            startAdornment,
            /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({}, inputProps)),
            endAdornment
        ]
    }));
});
InputUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ 'aria-describedby': _propTypesDefault.default.string,
    /**
   * @ignore
   */ 'aria-label': _propTypesDefault.default.string,
    /**
   * @ignore
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Textarea: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Trailing adornment for this input.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.number,
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.number,
    /**
   * If `true`, a `textarea` element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyUp: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.number,
    /**
   * Leading adornment for this input.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
exports.default = InputUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","clsx":"83C22","prop-types":"7wKI2","../utils/appendOwnerState":"hedlX","../utils/isHostComponent":"b3wck","./inputUnstyledClasses":"2DLiC","./useInput":"86mFO","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DLiC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputUnstyledUtilityClass", ()=>getInputUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getInputUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiInput', slot);
}
const inputBaseClasses = _generateUtilityClassesDefault.default('MuiInput', [
    'root',
    'formControl',
    'focused',
    'disabled',
    'error',
    'multiline',
    'input',
    'inputMultiline',
    'inputTypeSearch',
    'adornedStart',
    'adornedEnd'
]);
exports.default = inputBaseClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"86mFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@mui/utils");
var _react = require("react");
var _useFormControl = require("../FormControlUnstyled/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _extractEventHandlers = require("../utils/extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
function useInput(props, inputRef) {
    const { defaultValue , disabled: disabledProp = false , error: errorProp = false , onBlur , onChange , onFocus , required: requiredProp = false , value: valueProp  } = props;
    const formControlContext = _useFormControlDefault.default();
    let value;
    let required;
    let disabled;
    let error;
    if (formControlContext) {
        var _formControlContext$d, _formControlContext$r, _formControlContext$e;
        value = formControlContext.value;
        disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
        required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
        error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
    } else {
        value = valueProp;
        disabled = disabledProp;
        required = requiredProp;
        error = errorProp;
    }
    const { current: isControlled  } = _react.useRef(value != null);
    const handleInputRefWarning = _react.useCallback((instance)=>{
        if (instance && instance.nodeName !== 'INPUT' && !instance.focus) console.error([
            'MUI: You have provided a `components.Input` to the input component',
            'that does not correctly handle the `ref` prop.',
            'Make sure the `ref` prop is called with a HTMLInputElement.'
        ].join('\n'));
    }, []);
    const internalInputRef = _react.useRef(null);
    const handleIncomingRef = _utils.unstable_useForkRef(inputRef, handleInputRefWarning);
    const handleInputRef = _utils.unstable_useForkRef(internalInputRef, handleIncomingRef);
    const [focused, setFocused] = _react.useState(false); // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.
    _react.useEffect(()=>{
        if (!formControlContext && disabled && focused) {
            setFocused(false); // @ts-ignore
            onBlur == null || onBlur();
        }
    }, [
        formControlContext,
        disabled,
        focused,
        onBlur
    ]);
    const handleFocus = (otherHandlers)=>(event)=>{
            var _otherHandlers$onFocu;
            // Fix a bug with IE11 where the focus/blur events are triggered
            // while the component is disabled.
            if (formControlContext != null && formControlContext.disabled) {
                event.stopPropagation();
                return;
            }
            (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
            if (formControlContext && formControlContext.onFocus) {
                var _formControlContext$o;
                formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
            } else setFocused(true);
        }
    ;
    const handleBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$onBlur;
            (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
            if (formControlContext && formControlContext.onBlur) formControlContext.onBlur();
            else setFocused(false);
        }
    ;
    const handleChange = (otherHandlers)=>(event, ...args)=>{
            var _formControlContext$o2, _otherHandlers$onChan;
            if (!isControlled) {
                const element = event.target || internalInputRef.current;
                if (element == null) throw new Error(`MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.`);
            }
            formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event); // @ts-ignore
            (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);
        }
    ;
    const handleClick = (otherHandlers)=>(event)=>{
            var _otherHandlers$onClic;
            if (internalInputRef.current && event.currentTarget === event.target) internalInputRef.current.focus();
            (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
        }
    ;
    const getRootProps = (externalProps)=>{
        // onBlur, onChange and onFocus are forwarded to the input slot.
        const propsEventHandlers = _extractEventHandlersDefault.default(props, [
            'onBlur',
            'onChange',
            'onFocus'
        ]);
        const externalEventHandlers = _extendsDefault.default({}, propsEventHandlers, _extractEventHandlersDefault.default(externalProps));
        return _extendsDefault.default({}, externalProps, externalEventHandlers, {
            onClick: handleClick(externalEventHandlers)
        });
    };
    const getInputProps = (externalProps)=>{
        const propsEventHandlers = {
            onBlur,
            onChange,
            onFocus
        };
        const externalEventHandlers = _extendsDefault.default({}, propsEventHandlers, _extractEventHandlersDefault.default(externalProps));
        const mergedEventHandlers = _extendsDefault.default({}, externalProps, externalEventHandlers, {
            onBlur: handleBlur(externalEventHandlers),
            onChange: handleChange(externalEventHandlers),
            onFocus: handleFocus(externalEventHandlers)
        });
        return _extendsDefault.default({}, mergedEventHandlers, {
            'aria-invalid': error || undefined,
            defaultValue: defaultValue,
            ref: handleInputRef,
            value: value,
            required,
            disabled
        });
    };
    return {
        disabled,
        error,
        focused,
        formControlContext,
        getInputProps,
        getRootProps,
        required,
        value
    };
}
exports.default = useInput;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/utils":"cttLn","react":"21dqq","../FormControlUnstyled/useFormControl":"8ClQK","../utils/extractEventHandlers":"iYj1L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgz2D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqFWi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useListbox", ()=>_useListboxDefault.default
);
parcelHelpers.export(exports, "defaultListboxReducer", ()=>_defaultListboxReducerDefault.default
);
var _useListbox = require("./useListbox");
var _useListboxDefault = parcelHelpers.interopDefault(_useListbox);
var _defaultListboxReducer = require("./defaultListboxReducer");
var _defaultListboxReducerDefault = parcelHelpers.interopDefault(_defaultListboxReducer);
var _useListboxTypes = require("./useListbox.types");
parcelHelpers.exportAll(_useListboxTypes, exports);

},{"./useListbox":"9SfrJ","./defaultListboxReducer":"2ZMfU","./useListbox.types":"6QSma","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9SfrJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _useListboxTypes = require("./useListbox.types");
var _defaultListboxReducer = require("./defaultListboxReducer");
var _defaultListboxReducerDefault = parcelHelpers.interopDefault(_defaultListboxReducer);
var _useControllableReducer = require("./useControllableReducer");
var _useControllableReducerDefault = parcelHelpers.interopDefault(_useControllableReducer);
var _areArraysEqual = require("../utils/areArraysEqual");
var _areArraysEqualDefault = parcelHelpers.interopDefault(_areArraysEqual);
const defaultOptionComparer = (optionA, optionB)=>optionA === optionB
;
const defaultIsOptionDisabled = ()=>false
;
function useListbox(props) {
    var _props$optionIdGenera, _options$highlightedI;
    const { disabledItemsFocusable =false , disableListWrap =false , focusManagement ='activeDescendant' , id: idProp , isOptionDisabled =defaultIsOptionDisabled , listboxRef: externalListboxRef , multiple =false , optionComparer =defaultOptionComparer , options , stateReducer: externalReducer  } = props;
    const id = _utils.unstable_useId(idProp);
    function defaultIdGenerator(_, index) {
        return `${id}-option-${index}`;
    }
    const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
    const propsWithDefaults = _extendsDefault.default({}, props, {
        disabledItemsFocusable,
        disableListWrap,
        focusManagement,
        isOptionDisabled,
        multiple,
        optionComparer
    });
    const listboxRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(externalListboxRef, listboxRef);
    const [{ highlightedValue , selectedValue  }, dispatch] = _useControllableReducerDefault.default(_defaultListboxReducerDefault.default, externalReducer, propsWithDefaults);
    const highlightedIndex = _react.useMemo(()=>{
        return highlightedValue == null ? -1 : options.findIndex((option)=>optionComparer(option, highlightedValue)
        );
    }, [
        highlightedValue,
        options,
        optionComparer
    ]);
    const previousOptions = _react.useRef([]);
    _react.useEffect(()=>{
        if (_areArraysEqualDefault.default(previousOptions.current, options, optionComparer)) return;
        dispatch({
            type: _useListboxTypes.ActionTypes.optionsChange,
            options,
            previousOptions: previousOptions.current,
            props: propsWithDefaults
        });
        previousOptions.current = options; // No need to re-run this effect if props change
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        options,
        optionComparer,
        dispatch
    ]);
    const setSelectedValue = _react.useCallback((option)=>{
        dispatch({
            type: _useListboxTypes.ActionTypes.setValue,
            value: option
        });
    }, [
        dispatch
    ]);
    const setHighlightedValue = _react.useCallback((option)=>{
        dispatch({
            type: _useListboxTypes.ActionTypes.setHighlight,
            highlight: option
        });
    }, [
        dispatch
    ]);
    const createHandleOptionClick = (option, other)=>(event)=>{
            var _other$onClick;
            (_other$onClick = other.onClick) == null || _other$onClick.call(other, event);
            if (event.defaultPrevented) return;
            event.preventDefault();
            dispatch({
                type: _useListboxTypes.ActionTypes.optionClick,
                option,
                event,
                props: propsWithDefaults
            });
        }
    ;
    const createHandleOptionMouseOver = (option, other)=>(event)=>{
            var _other$onMouseOver;
            (_other$onMouseOver = other.onMouseOver) == null || _other$onMouseOver.call(other, event);
            if (event.defaultPrevented) return;
            dispatch({
                type: _useListboxTypes.ActionTypes.optionHover,
                option,
                event,
                props: propsWithDefaults
            });
        }
    ;
    const createHandleKeyDown = (other)=>(event)=>{
            var _other$onKeyDown;
            (_other$onKeyDown = other.onKeyDown) == null || _other$onKeyDown.call(other, event);
            if (event.defaultPrevented) return;
            const keysToPreventDefault = [
                ' ',
                'Enter',
                'ArrowUp',
                'ArrowDown',
                'Home',
                'End',
                'PageUp',
                'PageDown'
            ];
            if (keysToPreventDefault.includes(event.key)) event.preventDefault();
            dispatch({
                type: _useListboxTypes.ActionTypes.keyDown,
                event,
                props: propsWithDefaults
            });
        }
    ;
    const createHandleBlur = (other)=>(event)=>{
            var _other$onBlur, _listboxRef$current;
            (_other$onBlur = other.onBlur) == null || _other$onBlur.call(other, event);
            if (event.defaultPrevented) return;
            if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) // focus is within the listbox
            return;
            dispatch({
                type: _useListboxTypes.ActionTypes.blur,
                event,
                props: propsWithDefaults
            });
        }
    ;
    const getRootProps = (otherHandlers = {})=>{
        return _extendsDefault.default({}, otherHandlers, {
            'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,
            id,
            onBlur: createHandleBlur(otherHandlers),
            onKeyDown: createHandleKeyDown(otherHandlers),
            role: 'listbox',
            tabIndex: focusManagement === 'DOM' ? -1 : 0,
            ref: handleRef
        });
    };
    const getOptionState = (option)=>{
        let selected;
        const index = options.findIndex((opt)=>optionComparer(opt, option)
        );
        if (multiple) {
            var _ref;
            selected = ((_ref = selectedValue) != null ? _ref : []).some((value)=>value != null && optionComparer(option, value)
            );
        } else selected = optionComparer(option, selectedValue);
        const disabled = isOptionDisabled(option, index);
        return {
            selected,
            disabled,
            highlighted: highlightedIndex === index
        };
    };
    const getOptionTabIndex = (optionState)=>{
        if (focusManagement === 'activeDescendant') return undefined;
        if (!optionState.highlighted) return -1;
        if (optionState.disabled && !disabledItemsFocusable) return -1;
        return 0;
    };
    const getOptionProps = (option, otherHandlers = {})=>{
        const optionState = getOptionState(option);
        const index = options.findIndex((opt)=>optionComparer(opt, option)
        );
        return _extendsDefault.default({}, otherHandlers, {
            'aria-disabled': optionState.disabled || undefined,
            'aria-selected': optionState.selected,
            tabIndex: getOptionTabIndex(optionState),
            id: optionIdGenerator(option, index),
            onClick: createHandleOptionClick(option, otherHandlers),
            onMouseOver: createHandleOptionMouseOver(option, otherHandlers),
            role: 'option'
        });
    };
    _react.useDebugValue({
        highlightedOption: options[highlightedIndex],
        selectedOption: selectedValue
    });
    return {
        getRootProps,
        getOptionProps,
        getOptionState,
        highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null,
        selectedOption: selectedValue,
        setSelectedValue,
        setHighlightedValue
    };
}
exports.default = useListbox;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","./useListbox.types":"6QSma","./defaultListboxReducer":"2ZMfU","./useControllableReducer":"bM76j","../utils/areArraysEqual":"92wIQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6QSma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ActionTypes", ()=>ActionTypes
);
var ActionTypes; // split declaration and export due to https://github.com/codesandbox/codesandbox-client/issues/6435
(function(ActionTypes1) {
    ActionTypes1["blur"] = "blur";
    ActionTypes1["focus"] = "focus";
    ActionTypes1["keyDown"] = "keyDown";
    ActionTypes1["optionClick"] = "optionClick";
    ActionTypes1["optionHover"] = "optionHover";
    ActionTypes1["optionsChange"] = "optionsChange";
    ActionTypes1["setValue"] = "setValue";
    ActionTypes1["setHighlight"] = "setHighlight";
})(ActionTypes || (ActionTypes = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZMfU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _useListboxTypes = require("./useListbox.types");
const pageSize = 5;
function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
    if (options.length === 0 || options.every((o, i)=>isOptionDisabled(o, i)
    )) return -1;
    let nextFocus = index;
    for(;;){
        // No valid options found
        if (!wrapAround && lookupDirection === 'next' && nextFocus === options.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) return -1;
        const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
        if (nextFocusDisabled) {
            nextFocus += lookupDirection === 'next' ? 1 : -1;
            if (wrapAround) nextFocus = (nextFocus + options.length) % options.length;
        } else return nextFocus;
    }
}
function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
    var _options$nextIndex;
    const maxIndex = options.length - 1;
    const defaultHighlightedIndex = -1;
    let nextIndexCandidate;
    const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex((option)=>optionComparer(option, previouslyHighlightedOption)
    );
    if (diff === 'reset') {
        var _options$defaultHighl;
        return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
    }
    if (diff === 'start') nextIndexCandidate = 0;
    else if (diff === 'end') nextIndexCandidate = maxIndex;
    else {
        const newIndex = previouslyHighlightedIndex + diff;
        if (newIndex < 0) {
            if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) nextIndexCandidate = 0;
            else nextIndexCandidate = maxIndex;
        } else if (newIndex > maxIndex) {
            if (!wrapAround || Math.abs(diff) > 1) nextIndexCandidate = maxIndex;
            else nextIndexCandidate = 0;
        } else nextIndexCandidate = newIndex;
    }
    const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
    return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
}
function handleOptionSelection(option, state, props) {
    const { multiple , optionComparer =(o, v)=>o === v
     , isOptionDisabled =()=>false
      } = props;
    const { selectedValue  } = state;
    const optionIndex = props.options.indexOf(option);
    if (isOptionDisabled(option, optionIndex)) return state;
    if (multiple) {
        var _ref, _ref2;
        const selectedValues = (_ref = selectedValue) != null ? _ref : []; // if the option is already selected, remove it from the selection, otherwise add it
        const newSelectedValues = selectedValues.some((sv)=>optionComparer(sv, option)
        ) ? selectedValue.filter((v)=>!optionComparer(v, option)
        ) : [
            ...(_ref2 = selectedValue) != null ? _ref2 : [],
            option
        ];
        return {
            selectedValue: newSelectedValues,
            highlightedValue: option
        };
    }
    if (selectedValue != null && optionComparer(option, selectedValue)) return state;
    return {
        selectedValue: option,
        highlightedValue: option
    };
}
function handleKeyDown(event, state, props) {
    const { options , isOptionDisabled , disableListWrap , disabledItemsFocusable , optionComparer  } = props;
    const moveHighlight = (diff, direction, wrapAround)=>{
        return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : ()=>false
        , wrapAround, optionComparer);
    };
    switch(event.key){
        case 'Home':
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight('start', 'next', false)
            });
        case 'End':
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight('end', 'previous', false)
            });
        case 'PageUp':
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight(-pageSize, 'previous', false)
            });
        case 'PageDown':
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight(pageSize, 'next', false)
            });
        case 'ArrowUp':
            // TODO: extend current selection with Shift modifier
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight(-1, 'previous', !(disableListWrap != null ? disableListWrap : false))
            });
        case 'ArrowDown':
            // TODO: extend current selection with Shift modifier
            return _extendsDefault.default({}, state, {
                highlightedValue: moveHighlight(1, 'next', !(disableListWrap != null ? disableListWrap : false))
            });
        case 'Enter':
        case ' ':
            if (state.highlightedValue === null) return state;
            return handleOptionSelection(state.highlightedValue, state, props);
        default:
            break;
    }
    return state;
}
function handleBlur(state) {
    return _extendsDefault.default({}, state, {
        highlightedValue: null
    });
}
function handleOptionsChange(options, previousOptions, state, props) {
    var _options$find, _options$find2;
    const { multiple , optionComparer  } = props;
    const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find((option)=>optionComparer(option, state.highlightedValue)
    )) != null ? _options$find : null;
    if (multiple) {
        var _ref3;
        // exclude selected values that are no longer in the options
        const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
        const newSelectedValues = selectedValues.filter((selectedValue)=>options.some((option)=>optionComparer(option, selectedValue)
            )
        );
        return {
            highlightedValue: newHighlightedOption,
            selectedValue: newSelectedValues
        };
    }
    const newSelectedValue = (_options$find2 = options.find((option)=>optionComparer(option, state.selectedValue)
    )) != null ? _options$find2 : null;
    return {
        highlightedValue: newHighlightedOption,
        selectedValue: newSelectedValue
    };
}
function defaultListboxReducer(state, action) {
    const { type  } = action;
    switch(type){
        case _useListboxTypes.ActionTypes.keyDown:
            return handleKeyDown(action.event, state, action.props);
        case _useListboxTypes.ActionTypes.optionClick:
            return handleOptionSelection(action.option, state, action.props);
        case _useListboxTypes.ActionTypes.blur:
            return handleBlur(state);
        case _useListboxTypes.ActionTypes.setValue:
            return _extendsDefault.default({}, state, {
                selectedValue: action.value
            });
        case _useListboxTypes.ActionTypes.setHighlight:
            return _extendsDefault.default({}, state, {
                highlightedValue: action.highlight
            });
        case _useListboxTypes.ActionTypes.optionsChange:
            return handleOptionsChange(action.options, action.previousOptions, state, action.props);
        default:
            return state;
    }
}
exports.default = defaultListboxReducer;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","./useListbox.types":"6QSma","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bM76j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _utils = require("@mui/utils");
var _useListboxTypes = require("./useListbox.types");
var _areArraysEqual = require("../utils/areArraysEqual");
var _areArraysEqualDefault = parcelHelpers.interopDefault(_areArraysEqual);
/**
 * Triggers change event handlers when reducer returns changed state.
 */ function useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {
    const valueRef = _react.useRef(value);
    valueRef.current = value;
    const onValueChangeRef = _react.useRef(onValueChange);
    _react.useEffect(()=>{
        onValueChangeRef.current = onValueChange;
    }, [
        onValueChange
    ]);
    const onHighlightChangeRef = _react.useRef(onHighlightChange);
    _react.useEffect(()=>{
        onHighlightChangeRef.current = onHighlightChange;
    }, [
        onHighlightChange
    ]);
    _react.useEffect(()=>{
        if (Array.isArray(state.selectedValue)) {
            if (_areArraysEqualDefault.default(state.selectedValue, valueRef.current)) return;
        } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) return;
        setValueState(state.selectedValue);
        if (state.selectedValue != null) {
            var _onValueChangeRef$cur;
            // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.
            (_onValueChangeRef$cur = onValueChangeRef.current) == null || _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);
        }
    }, [
        state.selectedValue,
        setValueState,
        optionComparer
    ]);
    _react.useEffect(()=>{
        var _onHighlightChangeRef;
        // Fire the highlightChange event when reducer returns changed `highlightedIndex`.
        (_onHighlightChangeRef = onHighlightChangeRef.current) == null || _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);
    }, [
        state.highlightedValue
    ]);
}
function useControllableReducer(internalReducer, externalReducer, props) {
    const { value: controlledValue , defaultValue , onChange: onValueChange , onHighlightChange , options , optionComparer  } = props;
    const propsRef = _react.useRef(props);
    propsRef.current = props;
    const [value, setValueState] = _utils.unstable_useControlled({
        controlled: controlledValue,
        default: defaultValue,
        name: 'useListbox'
    });
    const previousValueRef = _react.useRef(null);
    const [state, dispatch] = _react.useReducer(externalReducer != null ? externalReducer : internalReducer, {
        highlightedValue: null,
        selectedValue: value
    });
    const optionComparerRef = _react.useRef(optionComparer);
    optionComparerRef.current = optionComparer;
    _react.useEffect(()=>{
        // Detect external changes to the controlled `value` prop and update the state.
        if (controlledValue === undefined) return;
        if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && _areArraysEqualDefault.default(previousValueRef.current, controlledValue, optionComparerRef.current)) // `value` is an array and it did not change.
        return;
        if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) // `value` is a single option and it did not change.
        return;
        previousValueRef.current = controlledValue;
        dispatch({
            type: _useListboxTypes.ActionTypes.setValue,
            value: controlledValue
        });
    }, [
        controlledValue
    ]);
    useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);
    return [
        state,
        dispatch
    ];
}
exports.default = useControllableReducer;

},{"react":"21dqq","@mui/utils":"cttLn","./useListbox.types":"6QSma","../utils/areArraysEqual":"92wIQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gCNfC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_menuUnstyledDefault.default
);
parcelHelpers.export(exports, "MenuUnstyledContext", ()=>_menuUnstyledContextDefault.default
);
parcelHelpers.export(exports, "menuUnstyledClasses", ()=>_menuUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useMenu", ()=>_useMenuDefault.default
);
var _menuUnstyled = require("./MenuUnstyled");
var _menuUnstyledDefault = parcelHelpers.interopDefault(_menuUnstyled);
var _menuUnstyledContext = require("./MenuUnstyledContext");
var _menuUnstyledContextDefault = parcelHelpers.interopDefault(_menuUnstyledContext);
parcelHelpers.exportAll(_menuUnstyledContext, exports);
var _menuUnstyledClasses = require("./menuUnstyledClasses");
var _menuUnstyledClassesDefault = parcelHelpers.interopDefault(_menuUnstyledClasses);
parcelHelpers.exportAll(_menuUnstyledClasses, exports);
var _menuUnstyledTypes = require("./MenuUnstyled.types");
parcelHelpers.exportAll(_menuUnstyledTypes, exports);
var _useMenu = require("./useMenu");
var _useMenuDefault = parcelHelpers.interopDefault(_useMenu);
var _useMenuTypes = require("./useMenu.types");
parcelHelpers.exportAll(_useMenuTypes, exports);

},{"./MenuUnstyled":"02tbD","./MenuUnstyledContext":"8xn3Y","./menuUnstyledClasses":"9ZaRb","./MenuUnstyled.types":"26QIy","./useMenu":"jksMp","./useMenu.types":"cXFLj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"02tbD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _menuUnstyledContext = require("./MenuUnstyledContext");
var _menuUnstyledContextDefault = parcelHelpers.interopDefault(_menuUnstyledContext);
var _menuUnstyledClasses = require("./menuUnstyledClasses");
var _useMenu = require("./useMenu");
var _useMenuDefault = parcelHelpers.interopDefault(_useMenu);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _popperUnstyled = require("../PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "actions",
    "anchorEl",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "onClose",
    "open"
];
function getUtilityClasses(ownerState) {
    const { open  } = ownerState;
    const slots = {
        root: [
            'root',
            open && 'expanded'
        ],
        listbox: [
            'listbox',
            open && 'expanded'
        ]
    };
    return _composeClassesDefault.default(slots, _menuUnstyledClasses.getMenuUnstyledUtilityClass, {});
}
/**
 *
 * Demos:
 *
 * - [Menu](https://mui.com/base/react-menu/)
 *
 * API:
 *
 * - [MenuUnstyled API](https://mui.com/base/api/menu-unstyled/)
 */ const MenuUnstyled = /*#__PURE__*/ _react.forwardRef(function MenuUnstyled(props, forwardedRef) {
    var _componentsProps$list, _componentsProps$list2, _ref, _componentsProps$root, _components$Listbox, _componentsProps$list3;
    const { actions , anchorEl , children , className , component , components ={} , componentsProps ={} , onClose , open =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { registerItem , unregisterItem , getListboxProps , getItemProps , getItemState , highlightFirstItem , highlightLastItem  } = _useMenuDefault.default({
        open,
        onClose,
        listboxRef: (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref,
        listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id
    });
    _react.useImperativeHandle(actions, ()=>({
            highlightFirstItem,
            highlightLastItem
        })
    , [
        highlightFirstItem,
        highlightLastItem
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        open
    });
    const classes = getUtilityClasses(ownerState);
    const Popper = (_ref = component != null ? component : components.Root) != null ? _ref : _popperUnstyledDefault.default;
    const popperProps = _appendOwnerStateDefault.default(Popper, _extendsDefault.default({}, other, {
        anchorEl,
        open,
        keepMounted: true,
        role: undefined
    }, componentsProps.root, {
        className: _clsxDefault.default(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    const Listbox = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
    const listboxProps = _appendOwnerStateDefault.default(Listbox, _extendsDefault.default({}, componentsProps.listbox, getListboxProps(), {
        className: _clsxDefault.default(classes.listbox, (_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className)
    }), ownerState);
    const contextValue = {
        registerItem,
        unregisterItem,
        getItemState,
        getItemProps,
        open
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(Popper, _extendsDefault.default({}, popperProps, {
        ref: forwardedRef,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Listbox, _extendsDefault.default({}, listboxProps, {
            children: /*#__PURE__*/ _jsxRuntime.jsx(_menuUnstyledContextDefault.default.Provider, {
                value: contextValue,
                children: children
            })
        }))
    }));
});
MenuUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */ actions: _utils.refType,
    /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   */ anchorEl: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ component: _propTypesDefault.default.elementType,
    /**
   * @ignore
   */ components: _propTypesDefault.default.shape({
        Listbox: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * @ignore
   */ componentsProps: _propTypesDefault.default.shape({
        listbox: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * Triggered when focus leaves the menu and the menu should close.
   */ onClose: _propTypesDefault.default.func,
    /**
   * Controls whether the menu is displayed.
   * @default false
   */ open: _propTypesDefault.default.bool
};
exports.default = MenuUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../utils/appendOwnerState":"hedlX","./MenuUnstyledContext":"8xn3Y","./menuUnstyledClasses":"9ZaRb","./useMenu":"jksMp","../composeClasses":"2T3xi","../PopperUnstyled":"hxXeM","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8xn3Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const MenuUnstyledContext = /*#__PURE__*/ _react.createContext(null);
MenuUnstyledContext.displayName = 'MenuUnstyledContext';
exports.default = MenuUnstyledContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ZaRb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMenuUnstyledUtilityClass", ()=>getMenuUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getMenuUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiMenuUnstyled', slot);
}
const menuUnstyledClasses = _generateUtilityClassesDefault.default('MuiMenuUnstyled', [
    'root',
    'listbox',
    'expanded'
]);
exports.default = menuUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jksMp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _listboxUnstyled = require("../ListboxUnstyled");
function stateReducer(state, action) {
    if (action.type === _listboxUnstyled.ActionTypes.blur || action.type === _listboxUnstyled.ActionTypes.optionHover || action.type === _listboxUnstyled.ActionTypes.setValue) return state;
    const newState = _listboxUnstyled.defaultListboxReducer(state, action);
    if (action.type !== _listboxUnstyled.ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) return _extendsDefault.default({}, newState, {
        highlightedValue: action.props.options[0]
    });
    return newState;
}
function useMenu(parameters) {
    const { listboxRef: listboxRefProp , open =false , onClose , listboxId  } = parameters;
    const [menuItems, setMenuItems] = _react.useState({});
    const listboxRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(listboxRef, listboxRefProp);
    const registerItem = _react.useCallback((id, metadata)=>{
        setMenuItems((previousState)=>{
            const newState = _extendsDefault.default({}, previousState);
            newState[id] = metadata;
            return newState;
        });
    }, []);
    const unregisterItem = _react.useCallback((id)=>{
        setMenuItems((previousState)=>{
            const newState = _extendsDefault.default({}, previousState);
            delete newState[id];
            return newState;
        });
    }, []);
    const { getOptionState , getOptionProps , getRootProps , highlightedOption , setHighlightedValue: setListboxHighlight  } = _listboxUnstyled.useListbox({
        options: Object.keys(menuItems),
        isOptionDisabled: (id)=>{
            var _menuItems$id;
            return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
        },
        listboxRef: handleRef,
        focusManagement: 'DOM',
        id: listboxId,
        stateReducer,
        disabledItemsFocusable: true
    });
    const highlightFirstItem = _react.useCallback(()=>{
        if (Object.keys(menuItems).length > 0) setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
    }, [
        menuItems,
        setListboxHighlight
    ]);
    const highlightLastItem = _react.useCallback(()=>{
        if (Object.keys(menuItems).length > 0) setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
    }, [
        menuItems,
        setListboxHighlight
    ]);
    _react.useEffect(()=>{
        if (!open) highlightFirstItem();
    }, [
        open,
        highlightFirstItem
    ]);
    const createHandleKeyDown = (otherHandlers)=>(e)=>{
            var _otherHandlers$onKeyD;
            otherHandlers == null || (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, e);
            if (e.defaultPrevented) return;
            if (e.key === 'Escape' && open) onClose == null || onClose();
        }
    ;
    const createHandleBlur = (otherHandlers)=>(e)=>{
            var _listboxRef$current;
            otherHandlers == null || otherHandlers.onBlur(e);
            if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) onClose == null || onClose();
        }
    ;
    _react.useEffect(()=>{
        var _listboxRef$current2;
        // set focus to the highlighted item (but prevent stealing focus from other elements on the page)
        if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
            var _menuItems$highlighte, _menuItems$highlighte2;
            menuItems == null || (_menuItems$highlighte = menuItems[highlightedOption]) == null || (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null || _menuItems$highlighte2.focus();
        }
    }, [
        highlightedOption,
        menuItems
    ]);
    const getListboxProps = (otherHandlers)=>_extendsDefault.default({}, otherHandlers, getRootProps(_extendsDefault.default({}, otherHandlers, {
            onBlur: createHandleBlur(otherHandlers),
            onKeyDown: createHandleKeyDown(otherHandlers)
        })), {
            role: 'menu'
        })
    ;
    const getItemState = (id)=>{
        const { disabled , highlighted  } = getOptionState(id);
        return {
            disabled,
            highlighted
        };
    };
    _react.useDebugValue({
        menuItems,
        highlightedOption
    });
    return {
        registerItem,
        unregisterItem,
        menuItems,
        getListboxProps,
        getItemState,
        getItemProps: getOptionProps,
        highlightedOption,
        highlightFirstItem,
        highlightLastItem
    };
}
exports.default = useMenu;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","../ListboxUnstyled":"lqFWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxXeM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_popperUnstyledDefault.default
);
var _popperUnstyled = require("./PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);

},{"./PopperUnstyled":"lTsV8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTsV8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _core = require("@popperjs/core");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _portal = require("../Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "anchorEl",
    "children",
    "direction",
    "disablePortal",
    "modifiers",
    "open",
    "ownerState",
    "placement",
    "popperOptions",
    "popperRef",
    "TransitionProps"
], _excluded2 = [
    "anchorEl",
    "children",
    "container",
    "direction",
    "disablePortal",
    "keepMounted",
    "modifiers",
    "open",
    "placement",
    "popperOptions",
    "popperRef",
    "style",
    "transition"
];
function flipPlacement(placement, direction) {
    if (direction === 'ltr') return placement;
    switch(placement){
        case 'bottom-end':
            return 'bottom-start';
        case 'bottom-start':
            return 'bottom-end';
        case 'top-end':
            return 'top-start';
        case 'top-start':
            return 'top-end';
        default:
            return placement;
    }
}
function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}
const defaultPopperOptions = {};
/* eslint-disable react/prop-types */ const PopperTooltip = /*#__PURE__*/ _react.forwardRef(function PopperTooltip(props, ref) {
    const { anchorEl , children , direction , disablePortal , modifiers , open , placement: initialPlacement , popperOptions , popperRef: popperRefProp , TransitionProps  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const tooltipRef = _react.useRef(null);
    const ownRef = _utils.unstable_useForkRef(tooltipRef, ref);
    const popperRef = _react.useRef(null);
    const handlePopperRef = _utils.unstable_useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = _react.useRef(handlePopperRef);
    _utils.unstable_useEnhancedEffect(()=>{
        handlePopperRefRef.current = handlePopperRef;
    }, [
        handlePopperRef
    ]);
    _react.useImperativeHandle(popperRefProp, ()=>popperRef.current
    , []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    /**
   * placement initialized from prop but can change during lifetime if modifiers.flip.
   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
   */ const [placement, setPlacement] = _react.useState(rtlPlacement);
    _react.useEffect(()=>{
        if (popperRef.current) popperRef.current.forceUpdate();
    });
    _utils.unstable_useEnhancedEffect(()=>{
        if (!anchorEl || !open) return undefined;
        const handlePopperUpdate = (data)=>{
            setPlacement(data.placement);
        };
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) console.warn([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                'The anchor element should be part of the document layout.',
                "Make sure the element is present in the document or that it's not display none."
            ].join('\n'));
        }
        let popperModifiers = [
            {
                name: 'preventOverflow',
                options: {
                    altBoundary: disablePortal
                }
            },
            {
                name: 'flip',
                options: {
                    altBoundary: disablePortal
                }
            },
            {
                name: 'onUpdate',
                enabled: true,
                phase: 'afterWrite',
                fn: ({ state  })=>{
                    handlePopperUpdate(state);
                }
            }
        ];
        if (modifiers != null) popperModifiers = popperModifiers.concat(modifiers);
        if (popperOptions && popperOptions.modifiers != null) popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        const popper = _core.createPopper(resolveAnchorEl(anchorEl), tooltipRef.current, _extendsDefault.default({
            placement: rtlPlacement
        }, popperOptions, {
            modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper);
        return ()=>{
            popper.destroy();
            handlePopperRefRef.current(null);
        };
    }, [
        anchorEl,
        disablePortal,
        modifiers,
        open,
        popperOptions,
        rtlPlacement
    ]);
    const childProps = {
        placement
    };
    if (TransitionProps !== null) childProps.TransitionProps = TransitionProps;
    return /*#__PURE__*/ _jsxRuntime.jsx("div", _extendsDefault.default({
        ref: ownRef,
        role: "tooltip"
    }, other, {
        children: typeof children === 'function' ? children(childProps) : children
    }));
});
/* eslint-enable react/prop-types */ /**
 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
 */ const PopperUnstyled = /*#__PURE__*/ _react.forwardRef(function PopperUnstyled(props, ref) {
    const { anchorEl , children , container: containerProp , direction ='ltr' , disablePortal =false , keepMounted =false , modifiers , open , placement ='bottom' , popperOptions =defaultPopperOptions , popperRef , style , transition =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const [exited, setExited] = _react.useState(true);
    const handleEnter = ()=>{
        setExited(false);
    };
    const handleExited = ()=>{
        setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) return null;
     // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container
    const container = containerProp || (anchorEl ? _utils.unstable_ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
    return /*#__PURE__*/ _jsxRuntime.jsx(_portalDefault.default, {
        disablePortal: disablePortal,
        container: container,
        children: /*#__PURE__*/ _jsxRuntime.jsx(PopperTooltip, _extendsDefault.default({
            anchorEl: anchorEl,
            direction: direction,
            disablePortal: disablePortal,
            modifiers: modifiers,
            ref: ref,
            open: transition ? !exited : open,
            placement: placement,
            popperOptions: popperOptions,
            popperRef: popperRef
        }, other, {
            style: _extendsDefault.default({
                // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
                position: 'fixed',
                // Fix Popper.js display issue
                top: 0,
                left: 0,
                display: !open && keepMounted && (!transition || exited) ? 'none' : null
            }, style),
            TransitionProps: transition ? {
                in: open,
                onEnter: handleEnter,
                onExited: handleExited
            } : null,
            children: children
        }))
    });
});
PopperUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */ anchorEl: _utils.chainPropTypes(_propTypesDefault.default.oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]), (props)=>{
        if (props.open) {
            const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
            if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
                const box = resolvedAnchorEl.getBoundingClientRect();
                if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) return new Error([
                    'MUI: The `anchorEl` prop provided to the component is invalid.',
                    'The anchor element should be part of the document layout.',
                    "Make sure the element is present in the document or that it's not display none."
                ].join('\n'));
            } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) return new Error([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                'It should be an HTML element instance or a virtualElement ',
                '(https://popper.js.org/docs/v2/virtual-elements/).'
            ].join('\n'));
        }
        return null;
    }),
    /**
   * Popper render function or node.
   */ children: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.node,
        _propTypesDefault.default.func
    ]),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * Direction of the text.
   * @default 'ltr'
   */ direction: _propTypesDefault.default.oneOf([
        'ltr',
        'rtl'
    ]),
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */ modifiers: _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
        data: _propTypesDefault.default.object,
        effect: _propTypesDefault.default.func,
        enabled: _propTypesDefault.default.bool,
        fn: _propTypesDefault.default.func,
        name: _propTypesDefault.default.any,
        options: _propTypesDefault.default.object,
        phase: _propTypesDefault.default.oneOf([
            'afterMain',
            'afterRead',
            'afterWrite',
            'beforeMain',
            'beforeRead',
            'beforeWrite',
            'main',
            'read',
            'write'
        ]),
        requires: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        requiresIfExists: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string)
    })),
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * Popper placement.
   * @default 'bottom'
   */ placement: _propTypesDefault.default.oneOf([
        'auto-end',
        'auto-start',
        'auto',
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */ popperOptions: _propTypesDefault.default.shape({
        modifiers: _propTypesDefault.default.array,
        onFirstUpdate: _propTypesDefault.default.func,
        placement: _propTypesDefault.default.oneOf([
            'auto-end',
            'auto-start',
            'auto',
            'bottom-end',
            'bottom-start',
            'bottom',
            'left-end',
            'left-start',
            'left',
            'right-end',
            'right-start',
            'right',
            'top-end',
            'top-start',
            'top'
        ]),
        strategy: _propTypesDefault.default.oneOf([
            'absolute',
            'fixed'
        ])
    }),
    /**
   * A ref that points to the used popper instance.
   */ popperRef: _utils.refType,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */ transition: _propTypesDefault.default.bool
};
exports.default = PopperUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","@popperjs/core":"7unqC","prop-types":"7wKI2","react":"21dqq","../Portal":"7L8QJ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7unqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperBase", ()=>_createPopperJs.createPopper
);
parcelHelpers.export(exports, "createPopper", ()=>_popperJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
);
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"lCAq5","./modifiers/index.js":"cap3W","./createPopper.js":"cHuNp","./popper.js":"1PuRF","./popper-lite.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCAq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "left", ()=>left
);
parcelHelpers.export(exports, "auto", ()=>auto
);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements
);
parcelHelpers.export(exports, "start", ()=>start
);
parcelHelpers.export(exports, "end", ()=>end
);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents
);
parcelHelpers.export(exports, "viewport", ()=>viewport
);
parcelHelpers.export(exports, "popper", ()=>popper
);
parcelHelpers.export(exports, "reference", ()=>reference
);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements
);
parcelHelpers.export(exports, "placements", ()=>placements
);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead
);
parcelHelpers.export(exports, "read", ()=>read
);
parcelHelpers.export(exports, "afterRead", ()=>afterRead
);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain
);
parcelHelpers.export(exports, "main", ()=>main
);
parcelHelpers.export(exports, "afterMain", ()=>afterMain
);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite
);
parcelHelpers.export(exports, "write", ()=>write
);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite
);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases
);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cap3W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>_applyStylesJsDefault.default
);
parcelHelpers.export(exports, "arrow", ()=>_arrowJsDefault.default
);
parcelHelpers.export(exports, "computeStyles", ()=>_computeStylesJsDefault.default
);
parcelHelpers.export(exports, "eventListeners", ()=>_eventListenersJsDefault.default
);
parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
);
parcelHelpers.export(exports, "hide", ()=>_hideJsDefault.default
);
parcelHelpers.export(exports, "offset", ()=>_offsetJsDefault.default
);
parcelHelpers.export(exports, "popperOffsets", ()=>_popperOffsetsJsDefault.default
);
parcelHelpers.export(exports, "preventOverflow", ()=>_preventOverflowJsDefault.default
);
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"4iMn4","./arrow.js":"31HFW","./computeStyles.js":"gDlm2","./eventListeners.js":"hBKsL","./flip.js":"fv5wq","./hide.js":"2g4OF","./offset.js":"3GKVY","./popperOffsets.js":"6I679","./preventOverflow.js":"1AMhb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iMn4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name1) {
        var style = state.styles[name1] || {};
        var attributes = state.attributes[name1] || {};
        var element = state.elements[name1]; // arrow is optional + virtual elements
        if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style1 = styleProperties.reduce(function(style, property) {
                style[property] = '';
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
            Object.assign(element.style, style1);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"a2Qom","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2Qom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYFUC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement
);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement
);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot
);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SkOo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
exports.default = getWindow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31HFW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var isVertical = [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
    var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
    var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = _withinJs.within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"59Wp3","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/contains.js":"4QxRR","../dom-utils/getOffsetParent.js":"laoYw","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/within.js":"3glSz","../utils/mergePaddingObject.js":"lEIf9","../utils/expandToHashMap.js":"iQlH5","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59Wp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
exports.default = getBasePlacement;

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvjuf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
exports.default = getLayoutRect;

},{"./getBoundingClientRect.js":"9CFSQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CFSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) includeScale = false;
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (_instanceOfJs.isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`
        if (offsetWidth > 0) scaleX = _mathJs.round(rect.width) / offsetWidth || 1;
        if (offsetHeight > 0) scaleY = _mathJs.round(rect.height) / offsetHeight || 1;
    }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
exports.default = getBoundingClientRect;

},{"./instanceOf.js":"gYFUC","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQqVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "round", ()=>round
);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QxRR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
exports.default = contains;

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laoYw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
function getTrueOffsetParent(element) {
    if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;
    if (isIE && _instanceOfJs.isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = _getComputedStyleJsDefault.default(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = _getParentNodeJsDefault.default(element);
    if (_instanceOfJs.isShadowRoot(currentNode)) currentNode = currentNode.host;
    while(_instanceOfJs.isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
        var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = _getWindowJsDefault.default(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},{"./getWindow.js":"2SkOo","./getNodeName.js":"a2Qom","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./isTableElement.js":"2qBb7","./getParentNode.js":"bIHpd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mZjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return _getWindowJsDefault.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qBb7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
}
exports.default = isTableElement;

},{"./getNodeName.js":"a2Qom","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIHpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if (_getNodeNameJsDefault.default(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    _getDocumentElementJsDefault.default(element) // fallback
    );
}
exports.default = getParentNode;

},{"./getNodeName.js":"a2Qom","./getDocumentElement.js":"eJ9Y1","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ9Y1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xlom":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3glSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within
);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp
);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return _mathJs.max(min, _mathJs.min(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEIf9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({}, _getFreshSideObjectJsDefault.default(), paddingObject);
}
exports.default = mergePaddingObject;

},{"./getFreshSideObject.js":"g4xOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4xOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
exports.default = getFreshSideObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQlH5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}
exports.default = expandToHashMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDlm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles
);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: _mathJs.round(x * dpr) / dpr || 0,
        y: _mathJs.round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = _enumsJs.left;
    var sideY = _enumsJs.top;
    var win = window;
    if (adaptive) {
        var offsetParent = _getOffsetParentJsDefault.default(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === _getWindowJsDefault.default(popper)) {
            offsetParent = _getDocumentElementJsDefault.default(popper);
            if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
            sideY = _enumsJs.bottom;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
            sideX = _enumsJs.right;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: _getBasePlacementJsDefault.default(state.placement),
        variation: _getVariationJsDefault.default(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
};

},{"../enums.js":"lCAq5","../dom-utils/getOffsetParent.js":"laoYw","../dom-utils/getWindow.js":"2SkOo","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getComputedStyle.js":"3mZjB","../utils/getBasePlacement.js":"59Wp3","../utils/getVariation.js":"hIo7Y","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIo7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getVariation(placement) {
    return placement.split('-')[1];
}
exports.default = getVariation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBKsL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = _getWindowJsDefault.default(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
};

},{"../dom-utils/getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv5wq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
    var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
    return [
        _getOppositeVariationPlacementJsDefault.default(placement),
        oppositePlacement,
        _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        _getOppositePlacementJsDefault.default(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement1 = placements[i];
        var _basePlacement = _getBasePlacementJsDefault.default(placement1);
        var isStartVariation = _getVariationJsDefault.default(placement1) === _enumsJs.start;
        var isVertical = [
            _enumsJs.top,
            _enumsJs.bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = _detectOverflowJsDefault.default(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement1;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement1, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i1 = numberOfChecks; _i1 > 0; _i1--){
            var _ret = _loop(_i1);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"a8CY0","../utils/getBasePlacement.js":"59Wp3","../utils/getOppositeVariationPlacement.js":"bKTLC","../utils/detectOverflow.js":"ltCuw","../utils/computeAutoPlacement.js":"gytMj","../enums.js":"lCAq5","../utils/getVariation.js":"hIo7Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8CY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositePlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKTLC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositeVariationPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltCuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
    var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
    var popperOffsets = _computeOffsetsJsDefault.default({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === _enumsJs.popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                _enumsJs.right,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                _enumsJs.top,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
exports.default = detectOverflow;

},{"../dom-utils/getClippingRect.js":"eeg2s","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getBoundingClientRect.js":"9CFSQ","./computeOffsets.js":"7jtXk","./rectToClientRect.js":"cQ3tg","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","./mergePaddingObject.js":"lEIf9","./expandToHashMap.js":"iQlH5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeg2s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element) {
    var rect = _getBoundingClientRectJsDefault.default(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element)) : _instanceOfJs.isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
    var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
    if (!_instanceOfJs.isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = _mathJs.max(rect.top, accRect.top);
        accRect.right = _mathJs.min(rect.right, accRect.right);
        accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
        accRect.left = _mathJs.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
exports.default = getClippingRect;

},{"../enums.js":"lCAq5","./getViewportRect.js":"cnH2G","./getDocumentRect.js":"d94SC","./listScrollParents.js":"2di3T","./getOffsetParent.js":"laoYw","./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./getBoundingClientRect.js":"9CFSQ","./getParentNode.js":"bIHpd","./contains.js":"4QxRR","./getNodeName.js":"a2Qom","../utils/rectToClientRect.js":"cQ3tg","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnH2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
function getViewportRect(element) {
    var win = _getWindowJsDefault.default(element);
    var html = _getDocumentElementJsDefault.default(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + _getWindowScrollBarXJsDefault.default(element),
        y: y
    };
}
exports.default = getViewportRect;

},{"./getWindow.js":"2SkOo","./getDocumentElement.js":"eJ9Y1","./getWindowScrollBarX.js":"sz4Ld","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sz4Ld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},{"./getBoundingClientRect.js":"9CFSQ","./getDocumentElement.js":"eJ9Y1","./getWindowScroll.js":"1XUtN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XUtN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = _getWindowJsDefault.default(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
exports.default = getWindowScroll;

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d94SC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = _getDocumentElementJsDefault.default(element);
    var winScroll = _getWindowScrollJsDefault.default(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
    var y = -winScroll.scrollTop;
    if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
exports.default = getDocumentRect;

},{"./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./getWindowScrollBarX.js":"sz4Ld","./getWindowScroll.js":"1XUtN","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2di3T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = _getScrollParentJsDefault.default(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = _getWindowJsDefault.default(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
}
exports.default = listScrollParents;

},{"./getScrollParent.js":"jy4ZS","./getParentNode.js":"bIHpd","./getWindow.js":"2SkOo","./isScrollParent.js":"9rLGO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jy4ZS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
    return getScrollParent(_getParentNodeJsDefault.default(node));
}
exports.default = getScrollParent;

},{"./getParentNode.js":"bIHpd","./isScrollParent.js":"9rLGO","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rLGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},{"./getComputedStyle.js":"3mZjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQ3tg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
exports.default = rectToClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7jtXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
    var variation = placement ? _getVariationJsDefault.default(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
exports.default = computeOffsets;

},{"./getBasePlacement.js":"59Wp3","./getVariation.js":"hIo7Y","./getMainAxisFromPlacement.js":"1Xlom","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement1 = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
    var variation = _getVariationJsDefault.default(placement1);
    var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement) {
        return _getVariationJsDefault.default(placement) === variation;
    }) : _enumsJs.basePlacements;
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = _detectOverflowJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[_getBasePlacementJsDefault.default(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
exports.default = computeAutoPlacement;

},{"./getVariation.js":"hIo7Y","../enums.js":"lCAq5","./detectOverflow.js":"ltCuw","./getBasePlacement.js":"59Wp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g4OF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        _enumsJs.top,
        _enumsJs.right,
        _enumsJs.bottom,
        _enumsJs.left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = _detectOverflowJsDefault.default(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = _detectOverflowJsDefault.default(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"lCAq5","../utils/detectOverflow.js":"ltCuw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GKVY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY
);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset1) {
    var basePlacement = _getBasePlacementJsDefault.default(placement);
    var invertDistance = [
        _enumsJs.left,
        _enumsJs.top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset1 === 'function' ? offset1(Object.assign({}, rects, {
        placement: placement
    })) : offset1, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = _enumsJs.placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"59Wp3","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6I679":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = _computeOffsetsJsDefault.default({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
};

},{"../utils/computeOffsets.js":"7jtXk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AMhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = _detectOverflowJsDefault.default(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var variation = _getVariationJsDefault.default(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var altAxis = _getAltAxisJsDefault.default(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
        var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = _withinJs.within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = _withinJs.within(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
        var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            _enumsJs.top,
            _enumsJs.left
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? _withinJs.withinMaxClamp(_tetherMin, _offset, _tetherMax) : _withinJs.within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"lCAq5","../utils/getBasePlacement.js":"59Wp3","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/getAltAxis.js":"59FWE","../utils/within.js":"3glSz","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/getOffsetParent.js":"laoYw","../utils/detectOverflow.js":"ltCuw","../utils/getVariation.js":"hIo7Y","../utils/getFreshSideObject.js":"g4xOt","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59FWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHuNp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator
);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "detectOverflow", ()=>_detectOverflowJsDefault.default
);
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _validateModifiersJs = require("./utils/validateModifiers.js");
var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
var _uniqueByJs = require("./utils/uniqueBy.js");
var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
var _getBasePlacementJs = require("./utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var _enumsJs = require("./enums.js");
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference1, popper1, options1) {
        if (options1 === void 0) options1 = defaultOptions;
        var state1 = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference1,
                popper: popper1
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state1,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state1.options) : setOptionsAction;
                cleanupModifierEffects();
                state1.options = Object.assign({}, defaultOptions, state1.options, options);
                state1.scrollParents = {
                    reference: _instanceOfJs.isElement(reference1) ? _listScrollParentsJsDefault.default(reference1) : reference1.contextElement ? _listScrollParentsJsDefault.default(reference1.contextElement) : [],
                    popper: _listScrollParentsJsDefault.default(popper1)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state1.options.modifiers))); // Strip out disabled modifiers
                state1.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state1.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                _validateModifiersJsDefault.default(modifiers);
                if (_getBasePlacementJsDefault.default(state1.options.placement) === _enumsJs.auto) {
                    var flipModifier = state1.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = _getComputedStyleJsDefault.default(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state1.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state1.rects = {
                    reference: _getCompositeRectJsDefault.default(reference, _getOffsetParentJsDefault.default(popper), state1.options.strategy === 'fixed'),
                    popper: _getLayoutRectJsDefault.default(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state1.reset = false;
                state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state1.orderedModifiers.forEach(function(modifier) {
                    return state1.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state1.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state1.reset === true) {
                        state1.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state1.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state1 = fn({
                        state: state1,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state1;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: _debounceJsDefault.default(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state1);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference1, popper1)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options1).then(function(state) {
            if (!isDestroyed && options1.onFirstUpdate) options1.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state1.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state1,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"ijPls","./dom-utils/getLayoutRect.js":"jvjuf","./dom-utils/listScrollParents.js":"2di3T","./dom-utils/getOffsetParent.js":"laoYw","./dom-utils/getComputedStyle.js":"3mZjB","./utils/orderModifiers.js":"N0VO0","./utils/debounce.js":"g6Chr","./utils/validateModifiers.js":"1S5dQ","./utils/uniqueBy.js":"hhl2M","./utils/getBasePlacement.js":"59Wp3","./utils/mergeByName.js":"2zTVN","./utils/detectOverflow.js":"ltCuw","./dom-utils/instanceOf.js":"gYFUC","./enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijPls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = _mathJs.round(rect.width) / element.offsetWidth || 1;
    var scaleY = _mathJs.round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
    var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = _getDocumentElementJsDefault.default(offsetParent);
    var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
        if (_instanceOfJs.isHTMLElement(offsetParent)) {
            offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
exports.default = getCompositeRect;

},{"./getBoundingClientRect.js":"9CFSQ","./getNodeScroll.js":"bBjCr","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","./getWindowScrollBarX.js":"sz4Ld","./getDocumentElement.js":"eJ9Y1","./isScrollParent.js":"9rLGO","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBjCr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
    else return _getHTMLElementScrollJsDefault.default(node);
}
exports.default = getNodeScroll;

},{"./getWindowScroll.js":"1XUtN","./getWindow.js":"2SkOo","./instanceOf.js":"gYFUC","./getHTMLElementScroll.js":"6pwY2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pwY2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
exports.default = getHTMLElementScroll;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"N0VO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return _enumsJs.modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
exports.default = orderModifiers;

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6Chr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1S5dQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _enumsJs = require("../enums.js");
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    break;
                case 'phase':
                    if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
exports.default = validateModifiers;

},{"./format.js":"baNIW","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baNIW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
exports.default = format;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hhl2M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
exports.default = uniqueBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zTVN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mergeByName(modifiers) {
    var merged1 = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged1).map(function(key) {
        return merged1[key];
    });
}
exports.default = mergeByName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1PuRF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    _eventListenersJsDefault.default,
    _popperOffsetsJsDefault.default,
    _computeStylesJsDefault.default,
    _applyStylesJsDefault.default,
    _offsetJsDefault.default,
    _flipJsDefault.default,
    _preventOverflowJsDefault.default,
    _arrowJsDefault.default,
    _hideJsDefault.default
];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"cHuNp","./modifiers/eventListeners.js":"hBKsL","./modifiers/popperOffsets.js":"6I679","./modifiers/computeStyles.js":"gDlm2","./modifiers/applyStyles.js":"4iMn4","./modifiers/offset.js":"3GKVY","./modifiers/flip.js":"fv5wq","./modifiers/preventOverflow.js":"1AMhb","./modifiers/arrow.js":"31HFW","./modifiers/hide.js":"2g4OF","./popper-lite.js":false,"./modifiers/index.js":"cap3W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7L8QJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_portalDefault.default
);
var _portal = require("./Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);

},{"./Portal":"4ILDM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ILDM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
function getContainer(container) {
    return typeof container === 'function' ? container() : container;
}
/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */ const Portal = /*#__PURE__*/ _react.forwardRef(function Portal(props, ref) {
    const { children , container , disablePortal =false  } = props;
    const [mountNode, setMountNode] = _react.useState(null);
    const handleRef = _utils.unstable_useForkRef(/*#__PURE__*/ _react.isValidElement(children) ? children.ref : null, ref);
    _utils.unstable_useEnhancedEffect(()=>{
        if (!disablePortal) setMountNode(getContainer(container) || document.body);
    }, [
        container,
        disablePortal
    ]);
    _utils.unstable_useEnhancedEffect(()=>{
        if (mountNode && !disablePortal) {
            _utils.unstable_setRef(ref, mountNode);
            return ()=>{
                _utils.unstable_setRef(ref, null);
            };
        }
        return undefined;
    }, [
        ref,
        mountNode,
        disablePortal
    ]);
    if (disablePortal) {
        if (/*#__PURE__*/ _react.isValidElement(children)) return /*#__PURE__*/ _react.cloneElement(children, {
            ref: handleRef
        });
        return children;
    }
    return mountNode ? /*#__PURE__*/ _reactDom.createPortal(children, mountNode) : mountNode;
});
Portal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The children to render into the `container`.
   */ children: _propTypesDefault.default.node,
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool
};
// eslint-disable-next-line
Portal["propTypes"] = _utils.exactProp(Portal.propTypes);
exports.default = Portal;

},{"react":"21dqq","react-dom":"j6uA9","prop-types":"7wKI2","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26QIy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cXFLj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37fEE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_menuItemUnstyledDefault.default
);
parcelHelpers.export(exports, "menuItemUnstyledClasses", ()=>_menuItemUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useMenuItem", ()=>_useMenuItemDefault.default
);
var _menuItemUnstyled = require("./MenuItemUnstyled");
var _menuItemUnstyledDefault = parcelHelpers.interopDefault(_menuItemUnstyled);
var _menuItemUnstyledTypes = require("./MenuItemUnstyled.types");
parcelHelpers.exportAll(_menuItemUnstyledTypes, exports);
var _menuItemUnstyledClasses = require("./menuItemUnstyledClasses");
var _menuItemUnstyledClassesDefault = parcelHelpers.interopDefault(_menuItemUnstyledClasses);
parcelHelpers.exportAll(_menuItemUnstyledClasses, exports);
var _useMenuItem = require("./useMenuItem");
var _useMenuItemDefault = parcelHelpers.interopDefault(_useMenuItem);
var _useMenuItemTypes = require("./useMenuItem.types");
parcelHelpers.exportAll(_useMenuItemTypes, exports);

},{"./MenuItemUnstyled":"1qWKh","./MenuItemUnstyled.types":"3AwSd","./menuItemUnstyledClasses":"feSvw","./useMenuItem":"8yNmB","./useMenuItem.types":"jFoyz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qWKh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("../utils");
var _menuItemUnstyledClasses = require("./menuItemUnstyledClasses");
var _useMenuItem = require("./useMenuItem");
var _useMenuItemDefault = parcelHelpers.interopDefault(_useMenuItem);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "disabled",
    "component",
    "components",
    "componentsProps"
];
function getUtilityClasses(ownerState) {
    const { disabled , focusVisible  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible'
        ]
    };
    return _composeClassesDefault.default(slots, _menuItemUnstyledClasses.getMenuItemUnstyledUtilityClass, {});
}
/**
 *
 * Demos:
 *
 * - [Menu](https://mui.com/base/react-menu/)
 *
 * API:
 *
 * - [MenuItemUnstyled API](https://mui.com/base/api/menu-item-unstyled/)
 */ const MenuItemUnstyled = /*#__PURE__*/ _react.forwardRef(function MenuItemUnstyled(props, ref) {
    var _ref, _componentsProps$root;
    const { children , className , disabled =false , component , components ={} , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'li';
    const { getRootProps , itemState , focusVisible  } = _useMenuItemDefault.default({
        component: Root,
        disabled,
        ref
    });
    if (itemState == null) return null;
    const ownerState = _extendsDefault.default({}, props, itemState, {
        focusVisible
    });
    const classes = getUtilityClasses(ownerState);
    const rootProps = _utils.appendOwnerState(Root, _extendsDefault.default({}, other, componentsProps.root, getRootProps(other), {
        className: _clsxDefault.default(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({}, rootProps, {
        children: children
    }));
});
MenuItemUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ component: _propTypesDefault.default.elementType,
    /**
   * @ignore
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * @ignore
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the menu item will be disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool
};
exports.default = MenuItemUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","../utils":"cgIce","./menuItemUnstyledClasses":"feSvw","./useMenuItem":"8yNmB","../composeClasses":"2T3xi","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"feSvw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMenuItemUnstyledUtilityClass", ()=>getMenuItemUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getMenuItemUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiMenuItemUnstyled', slot);
}
const menuItemUnstyledClasses = _generateUtilityClassesDefault.default('MuiMenuItemUnstyled', [
    'root',
    'disabled',
    'focusVisible'
]);
exports.default = menuItemUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8yNmB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _menuUnstyled = require("../MenuUnstyled");
var _buttonUnstyled = require("../ButtonUnstyled");
function useMenuItem(props) {
    const { component , disabled =false , ref  } = props;
    const id = _utils.unstable_useId();
    const menuContext = _react.useContext(_menuUnstyled.MenuUnstyledContext);
    const itemRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(itemRef, ref);
    if (menuContext === null) throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');
    const { registerItem , unregisterItem , open  } = menuContext;
    _react.useEffect(()=>{
        if (id === undefined) return undefined;
        registerItem(id, {
            disabled,
            id,
            ref: itemRef
        });
        return ()=>unregisterItem(id)
        ;
    }, [
        id,
        registerItem,
        unregisterItem,
        disabled,
        ref
    ]);
    const { getRootProps: getButtonProps , focusVisible  } = _buttonUnstyled.useButton({
        component,
        ref: handleRef,
        disabled
    }); // Ensure the menu item is focused when highlighted
    const [focusRequested, requestFocus] = _react.useState(false);
    const focusIfRequested = _react.useCallback(()=>{
        if (focusRequested && itemRef.current != null) {
            itemRef.current.focus();
            requestFocus(false);
        }
    }, [
        focusRequested
    ]);
    _react.useEffect(()=>{
        focusIfRequested();
    });
    _react.useDebugValue({
        id,
        disabled
    });
    const itemState = menuContext.getItemState(id != null ? id : '');
    const { highlighted  } = itemState != null ? itemState : {
        highlighted: false
    };
    _react.useEffect(()=>{
        requestFocus(highlighted && open);
    }, [
        highlighted,
        open
    ]);
    if (id === undefined) return {
        getRootProps: (other)=>_extendsDefault.default({}, other, getButtonProps(other), {
                role: 'menuitem'
            })
        ,
        itemState: null,
        focusVisible
    };
    return {
        getRootProps: (other)=>{
            const optionProps = menuContext.getItemProps(id, other);
            return _extendsDefault.default({}, other, getButtonProps(other), {
                tabIndex: optionProps.tabIndex,
                id: optionProps.id,
                role: 'menuitem'
            });
        },
        itemState,
        focusVisible
    };
}
exports.default = useMenuItem;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","../MenuUnstyled":"gCNfC","../ButtonUnstyled":"jqfJm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AwSd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFoyz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyieE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_modalUnstyledDefault.default
);
parcelHelpers.export(exports, "ModalManager", ()=>_modalManagerDefault.default
);
parcelHelpers.export(exports, "modalUnstyledClasses", ()=>_modalUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getModalUtilityClass", ()=>_modalUnstyledClasses.getModalUtilityClass
);
var _modalUnstyled = require("./ModalUnstyled");
var _modalUnstyledDefault = parcelHelpers.interopDefault(_modalUnstyled);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _modalUnstyledClasses = require("./modalUnstyledClasses");
var _modalUnstyledClassesDefault = parcelHelpers.interopDefault(_modalUnstyledClasses);

},{"./ModalUnstyled":"ffUDG","./ModalManager":"5kn8r","./modalUnstyledClasses":"4ZtE2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffUDG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _portal = require("../Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _trapFocus = require("../TrapFocus");
var _trapFocusDefault = parcelHelpers.interopDefault(_trapFocus);
var _modalUnstyledClasses = require("./modalUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "BackdropComponent",
    "BackdropProps",
    "children",
    "classes",
    "className",
    "closeAfterTransition",
    "component",
    "components",
    "componentsProps",
    "container",
    "disableAutoFocus",
    "disableEnforceFocus",
    "disableEscapeKeyDown",
    "disablePortal",
    "disableRestoreFocus",
    "disableScrollLock",
    "hideBackdrop",
    "keepMounted",
    "manager",
    "onBackdropClick",
    "onClose",
    "onKeyDown",
    "open",
    "theme",
    "onTransitionEnter",
    "onTransitionExited"
];
const useUtilityClasses = (ownerState)=>{
    const { open , exited , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            !open && exited && 'hidden'
        ]
    };
    return _composeClassesDefault.default(slots, _modalUnstyledClasses.getModalUtilityClass, classes);
};
function getContainer(container) {
    return typeof container === 'function' ? container() : container;
}
function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty('in') : false;
} // A modal manager used to track and manage the state of open Modals.
// Modals don't open on the server so this won't conflict with concurrent requests.
const defaultManager = new _modalManagerDefault.default();
/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * - [Dialog](/api/dialog/)
 * - [Drawer](/api/drawer/)
 * - [Menu](/api/menu/)
 * - [Popover](/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 */ const ModalUnstyled = /*#__PURE__*/ _react.forwardRef(function ModalUnstyled(props, ref) {
    const { BackdropComponent , BackdropProps , children , classes: classesProp , className , closeAfterTransition =false , component ='div' , components ={} , componentsProps ={} , container , disableAutoFocus =false , disableEnforceFocus =false , disableEscapeKeyDown =false , disablePortal =false , disableRestoreFocus =false , disableScrollLock =false , hideBackdrop =false , keepMounted =false , // private
    // eslint-disable-next-line react/prop-types
    manager =defaultManager , onBackdropClick , onClose , onKeyDown , open , /* eslint-disable react/prop-types */ theme , onTransitionEnter , onTransitionExited  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [exited, setExited] = _react.useState(true);
    const modal = _react.useRef({});
    const mountNodeRef = _react.useRef(null);
    const modalRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(modalRef, ref);
    const hasTransition = getHasTransition(props);
    const getDoc = ()=>_utils.unstable_ownerDocument(mountNodeRef.current)
    ;
    const getModal = ()=>{
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
    };
    const handleMounted = ()=>{
        manager.mount(getModal(), {
            disableScrollLock
        }); // Fix a bug on Chrome where the scroll isn't initially 0.
        modalRef.current.scrollTop = 0;
    };
    const handleOpen = _utils.unstable_useEventCallback(()=>{
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer); // The element was already mounted.
        if (modalRef.current) handleMounted();
    });
    const isTopModal = _react.useCallback(()=>manager.isTopModal(getModal())
    , [
        manager
    ]);
    const handlePortalRef = _utils.unstable_useEventCallback((node)=>{
        mountNodeRef.current = node;
        if (!node) return;
        if (open && isTopModal()) handleMounted();
        else _modalManager.ariaHidden(modalRef.current, true);
    });
    const handleClose = _react.useCallback(()=>{
        manager.remove(getModal());
    }, [
        manager
    ]);
    _react.useEffect(()=>{
        return ()=>{
            handleClose();
        };
    }, [
        handleClose
    ]);
    _react.useEffect(()=>{
        if (open) handleOpen();
        else if (!hasTransition || !closeAfterTransition) handleClose();
    }, [
        open,
        handleClose,
        hasTransition,
        closeAfterTransition,
        handleOpen
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        classes: classesProp,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
    });
    const classes = useUtilityClasses(ownerState);
    if (!keepMounted && !open && (!hasTransition || exited)) return null;
    const handleEnter = ()=>{
        setExited(false);
        if (onTransitionEnter) onTransitionEnter();
    };
    const handleExited = ()=>{
        setExited(true);
        if (onTransitionExited) onTransitionExited();
        if (closeAfterTransition) handleClose();
    };
    const handleBackdropClick = (event)=>{
        if (event.target !== event.currentTarget) return;
        if (onBackdropClick) onBackdropClick(event);
        if (onClose) onClose(event, 'backdropClick');
    };
    const handleKeyDown = (event)=>{
        if (onKeyDown) onKeyDown(event);
         // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviors like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) return;
        if (!disableEscapeKeyDown) {
            // Swallow the event, in case someone is listening for the escape key on the body.
            event.stopPropagation();
            if (onClose) onClose(event, 'escapeKeyDown');
        }
    };
    const childProps = {};
    if (children.props.tabIndex === undefined) childProps.tabIndex = '-1';
     // It's a Transition like component
    if (hasTransition) {
        childProps.onEnter = _utils.unstable_createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = _utils.unstable_createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /*#__PURE__*/ _jsxRuntime.jsx(_portalDefault.default, {
        ref: handlePortalRef,
        container: container,
        disablePortal: disablePortal,
        children: /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
            role: "presentation"
        }, rootProps, !_isHostComponentDefault.default(Root) && {
            as: component,
            ownerState: _extendsDefault.default({}, ownerState, rootProps.ownerState),
            theme
        }, other, {
            ref: handleRef,
            onKeyDown: handleKeyDown,
            className: _clsxDefault.default(classes.root, rootProps.className, className),
            children: [
                !hideBackdrop && BackdropComponent ? /*#__PURE__*/ _jsxRuntime.jsx(BackdropComponent, _extendsDefault.default({
                    "aria-hidden": true,
                    open: open,
                    onClick: handleBackdropClick
                }, BackdropProps)) : null,
                /*#__PURE__*/ _jsxRuntime.jsx(_trapFocusDefault.default, {
                    disableEnforceFocus: disableEnforceFocus,
                    disableAutoFocus: disableAutoFocus,
                    disableRestoreFocus: disableRestoreFocus,
                    isEnabled: isTopModal,
                    open: open,
                    children: /*#__PURE__*/ _react.cloneElement(children, childProps)
                })
            ]
        }))
    });
});
ModalUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A backdrop component. This prop enables custom backdrop rendering.
   */ BackdropComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the backdrop element.
   */ BackdropProps: _propTypesDefault.default.object,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */ closeAfterTransition: _propTypesDefault.default.bool,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Modal.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */ disableEscapeKeyDown: _propTypesDefault.default.bool,
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */ disableRestoreFocus: _propTypesDefault.default.bool,
    /**
   * Disable the scroll lock behavior.
   * @default false
   */ disableScrollLock: _propTypesDefault.default.bool,
    /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */ hideBackdrop: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Callback fired when the backdrop is clicked.
   */ onBackdropClick: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired
};
exports.default = ModalUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../composeClasses":"2T3xi","../utils/isHostComponent":"b3wck","../Portal":"7L8QJ","./ModalManager":"5kn8r","../TrapFocus":"3Mfhy","./modalUnstyledClasses":"4ZtE2","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5kn8r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ariaHidden", ()=>ariaHidden
);
var _utils = require("@mui/utils");
// Is a vertical scrollbar displayed?
function isOverflowing(container) {
    const doc = _utils.unstable_ownerDocument(container);
    if (doc.body === container) return _utils.unstable_ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
    if (show) element.setAttribute('aria-hidden', 'true');
    else element.removeAttribute('aria-hidden');
}
function getPaddingRight(element) {
    return parseInt(_utils.unstable_ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
    const blacklist = [
        mountElement,
        currentElement,
        ...elementsToExclude
    ];
    const blacklistTagNames = [
        'TEMPLATE',
        'SCRIPT',
        'STYLE'
    ];
    [].forEach.call(container.children, (element)=>{
        if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) ariaHidden(element, show);
    });
}
function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index)=>{
        if (callback(item)) {
            idx = index;
            return true;
        }
        return false;
    });
    return idx;
}
function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
            // Compute the size before applying overflow hidden to avoid any scroll jumps.
            const scrollbarSize = _utils.unstable_getScrollbarSize(_utils.unstable_ownerDocument(container));
            restoreStyle.push({
                value: container.style.paddingRight,
                property: 'padding-right',
                el: container
            }); // Use computed style, here to get the real padding to add our scrollbar width.
            container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`; // .mui-fixed is a global helper.
            const fixedElements = _utils.unstable_ownerDocument(container).querySelectorAll('.mui-fixed');
            [].forEach.call(fixedElements, (element)=>{
                restoreStyle.push({
                    value: element.style.paddingRight,
                    property: 'padding-right',
                    el: element
                });
                element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
            });
        } // Improve Gatsby support
        // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
        const parent = container.parentElement;
        const containerWindow = _utils.unstable_ownerWindow(container);
        const scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.
        restoreStyle.push({
            value: scrollContainer.style.overflow,
            property: 'overflow',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowX,
            property: 'overflow-x',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowY,
            property: 'overflow-y',
            el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
    }
    const restore = ()=>{
        restoreStyle.forEach(({ value , el , property  })=>{
            if (value) el.style.setProperty(property, value);
            else el.style.removeProperty(property);
        });
    };
    return restore;
}
function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element)=>{
        if (element.getAttribute('aria-hidden') === 'true') hiddenSiblings.push(element);
    });
    return hiddenSiblings;
}
class ModalManager {
    constructor(){
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
    }
    add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) return modalIndex;
        modalIndex = this.modals.length;
        this.modals.push(modal); // If the modal we are adding is already in the DOM.
        if (modal.modalRef) ariaHidden(modal.modalRef, false);
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item)=>item.container === container
        );
        if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
        }
        this.containers.push({
            modals: [
                modal
            ],
            container,
            restore: null,
            hiddenSiblings
        });
        return modalIndex;
    }
    mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.indexOf(modal) !== -1
        );
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) containerInfo.restore = handleContainer(containerInfo, props);
    }
    remove(modal) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) return modalIndex;
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.indexOf(modal) !== -1
        );
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.
        if (containerInfo.modals.length === 0) {
            // The modal might be closed before it had the chance to be mounted in the DOM.
            if (containerInfo.restore) containerInfo.restore();
            if (modal.modalRef) // In case the modal wasn't in the DOM yet.
            ariaHidden(modal.modalRef, true);
            ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
            this.containers.splice(containerIndex, 1);
        } else {
            // Otherwise make sure the next top modal is visible to a screen reader.
            const nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null
            if (nextTop.modalRef) ariaHidden(nextTop.modalRef, false);
        }
        return modalIndex;
    }
    isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
}
exports.default = ModalManager;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Mfhy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_trapFocusDefault.default
);
var _trapFocus = require("./TrapFocus");
var _trapFocusDefault = parcelHelpers.interopDefault(_trapFocus);

},{"./TrapFocus":"avLbB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"avLbB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */ var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils"); // Inspired by https://github.com/focus-trap/tabbable
var _jsxRuntime = require("react/jsx-runtime");
const candidatesSelector = [
    'input',
    'select',
    'textarea',
    'a[href]',
    'button',
    '[tabindex]',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]:not([contenteditable="false"])'
].join(',');
function getTabIndex(node) {
    const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
    if (!Number.isNaN(tabindexAttr)) return tabindexAttr;
     // Browsers do not return `tabIndex` correctly for contentEditable nodes;
    // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    //  yet they are still part of the regular tab order; in FF, they get a default
    //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    //  order, consider their tab index to be 0.
    if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) return 0;
    return node.tabIndex;
}
function isNonTabbableRadio(node) {
    if (node.tagName !== 'INPUT' || node.type !== 'radio') return false;
    if (!node.name) return false;
    const getRadio = (selector)=>node.ownerDocument.querySelector(`input[type="radio"]${selector}`)
    ;
    let roving = getRadio(`[name="${node.name}"]:checked`);
    if (!roving) roving = getRadio(`[name="${node.name}"]`);
    return roving !== node;
}
function isNodeMatchingSelectorFocusable(node) {
    if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) return false;
    return true;
}
function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i)=>{
        const nodeTabIndex = getTabIndex(node);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) return;
        if (nodeTabIndex === 0) regularTabNodes.push(node);
        else orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node
        });
    });
    return orderedTabNodes.sort((a, b)=>a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex
    ).map((a)=>a.node
    ).concat(regularTabNodes);
}
function defaultIsEnabled() {
    return true;
}
/**
 * Utility component that locks focus inside the component.
 */ function TrapFocus(props) {
    const { children , disableAutoFocus =false , disableEnforceFocus =false , disableRestoreFocus =false , getTabbable =defaultGetTabbable , isEnabled =defaultIsEnabled , open  } = props;
    const ignoreNextEnforceFocus = _react.useRef();
    const sentinelStart = _react.useRef(null);
    const sentinelEnd = _react.useRef(null);
    const nodeToRestore = _react.useRef(null);
    const reactFocusEventTarget = _react.useRef(null); // This variable is useful when disableAutoFocus is true.
    // It waits for the active element to move into the component to activate.
    const activated = _react.useRef(false);
    const rootRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(children.ref, rootRef);
    const lastKeydown = _react.useRef(null);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        activated.current = !disableAutoFocus;
    }, [
        disableAutoFocus,
        open
    ]);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        const doc = _utils.unstable_ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute('tabIndex')) {
                console.error([
                    'MUI: The modal content node does not accept focus.',
                    'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'
                ].join('\n'));
                rootRef.current.setAttribute('tabIndex', -1);
            }
            if (activated.current) rootRef.current.focus();
        }
        return ()=>{
            // restoreLastFocus()
            if (!disableRestoreFocus) {
                // In IE11 it is possible for document.activeElement to be null resulting
                // in nodeToRestore.current being null.
                // Not all elements in IE11 have a focus method.
                // Once IE11 support is dropped the focus() call can be unconditional.
                if (nodeToRestore.current && nodeToRestore.current.focus) {
                    ignoreNextEnforceFocus.current = true;
                    nodeToRestore.current.focus();
                }
                nodeToRestore.current = null;
            }
        }; // Missing `disableRestoreFocus` which is fine.
    // We don't support changing that prop on an open TrapFocus
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        open
    ]);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        const doc = _utils.unstable_ownerDocument(rootRef.current);
        const contain = (nativeEvent)=>{
            const { current: rootElement  } = rootRef; // Cleanup functions are executed lazily in React 17.
            // Contain can be called between the component being unmounted and its cleanup function being run.
            if (rootElement === null) return;
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
                ignoreNextEnforceFocus.current = false;
                return;
            }
            if (!rootElement.contains(doc.activeElement)) {
                // if the focus event is not coming from inside the children's react tree, reset the refs
                if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) reactFocusEventTarget.current = null;
                else if (reactFocusEventTarget.current !== null) return;
                if (!activated.current) return;
                let tabbable = [];
                if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) tabbable = getTabbable(rootRef.current);
                if (tabbable.length > 0) {
                    var _lastKeydown$current, _lastKeydown$current2;
                    const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
                    const focusNext = tabbable[0];
                    const focusPrevious = tabbable[tabbable.length - 1];
                    if (isShiftTab) focusPrevious.focus();
                    else focusNext.focus();
                } else rootElement.focus();
            }
        };
        const loopFocus = (nativeEvent)=>{
            lastKeydown.current = nativeEvent;
            if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') return;
             // Make sure the next tab starts from the right place.
            // doc.activeElement referes to the origin.
            if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
                // We need to ignore the next contain as
                // it will try to move the focus back to the rootRef element.
                ignoreNextEnforceFocus.current = true;
                sentinelEnd.current.focus();
            }
        };
        doc.addEventListener('focusin', contain);
        doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        // Instead, we can look if the active element was restored on the BODY element.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
        const interval = setInterval(()=>{
            if (doc.activeElement.tagName === 'BODY') contain();
        }, 50);
        return ()=>{
            clearInterval(interval);
            doc.removeEventListener('focusin', contain);
            doc.removeEventListener('keydown', loopFocus, true);
        };
    }, [
        disableAutoFocus,
        disableEnforceFocus,
        disableRestoreFocus,
        isEnabled,
        open,
        getTabbable
    ]);
    const onFocus = (event)=>{
        if (nodeToRestore.current === null) nodeToRestore.current = event.relatedTarget;
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) childrenPropsHandler(event);
    };
    const handleFocusSentinel = (event)=>{
        if (nodeToRestore.current === null) nodeToRestore.current = event.relatedTarget;
        activated.current = true;
    };
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                tabIndex: 0,
                onFocus: handleFocusSentinel,
                ref: sentinelStart,
                "data-test": "sentinelStart"
            }),
            /*#__PURE__*/ _react.cloneElement(children, {
                ref: handleRef,
                onFocus
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                tabIndex: 0,
                onFocus: handleFocusSentinel,
                ref: sentinelEnd,
                "data-test": "sentinelEnd"
            })
        ]
    });
}
TrapFocus.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef,
    /**
   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the trap focus less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
   *
   * Generally this should never be set to `true` as it makes the trap focus less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the trap focus will not restore focus to previously focused element once
   * trap focus is hidden or unmounted.
   * @default false
   */ disableRestoreFocus: _propTypesDefault.default.bool,
    /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */ getTabbable: _propTypesDefault.default.func,
    /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple trap focus mounted at the same time.
   * @default function defaultIsEnabled() {
   *   return true;
   * }
   */ isEnabled: _propTypesDefault.default.func,
    /**
   * If `true`, focus is locked.
   */ open: _propTypesDefault.default.bool.isRequired
};
// eslint-disable-next-line
TrapFocus["propTypes"] = _utils.exactProp(TrapFocus.propTypes);
exports.default = TrapFocus;

},{"react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ZtE2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getModalUtilityClass", ()=>getModalUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getModalUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiModal', slot);
}
const modalUnstyledClasses = _generateUtilityClassesDefault.default('MuiModal', [
    'root',
    'hidden'
]);
exports.default = modalUnstyledClasses;

},{"../generateUtilityClasses":"6i04V","../generateUtilityClass":"81TS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oc3N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_multiSelectUnstyledDefault.default
);
var _multiSelectUnstyled = require("./MultiSelectUnstyled");
var _multiSelectUnstyledDefault = parcelHelpers.interopDefault(_multiSelectUnstyled);
var _multiSelectUnstyledTypes = require("./MultiSelectUnstyled.types");
parcelHelpers.exportAll(_multiSelectUnstyledTypes, exports);

},{"./MultiSelectUnstyled":"gJqd3","./MultiSelectUnstyled.types":"9qLTh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJqd3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _utils1 = require("../SelectUnstyled/utils");
var _useSelect = require("../SelectUnstyled/useSelect");
var _useSelectDefault = parcelHelpers.interopDefault(_useSelect);
var _utils2 = require("../utils");
var _popperUnstyled = require("../PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);
var _selectUnstyledContext = require("../SelectUnstyled/SelectUnstyledContext");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _selectUnstyledClasses = require("../SelectUnstyled/selectUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "autoFocus",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultListboxOpen",
    "defaultValue",
    "disabled",
    "listboxOpen",
    "onChange",
    "onListboxOpenChange",
    "value"
];
function defaultRenderMultipleValues(selectedOptions) {
    return /*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
        children: selectedOptions.map((o)=>o.label
        ).join(', ')
    });
}
function useUtilityClasses(ownerState) {
    const { active , disabled , open , focusVisible  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible',
            active && 'active',
            open && 'expanded'
        ],
        listbox: [
            'listbox',
            disabled && 'disabled'
        ],
        popper: [
            'popper'
        ]
    };
    return _composeClassesDefault.default(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
}
/**
 * The foundation for building custom-styled multi-selection select components.
 */ const MultiSelectUnstyled = /*#__PURE__*/ _react.forwardRef(function MultiSelectUnstyled(props, ref) {
    var _props$renderValue, _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;
    const { autoFocus , children , className , component , components ={} , componentsProps ={} , defaultListboxOpen =false , defaultValue =[] , disabled: disabledProp , listboxOpen: listboxOpenProp , onChange , onListboxOpenChange , value: valueProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;
    const [groupedOptions, setGroupedOptions] = _react.useState([]);
    const options = _react.useMemo(()=>_utils1.flattenOptionGroups(groupedOptions)
    , [
        groupedOptions
    ]);
    const [listboxOpen, setListboxOpen] = _utils.unstable_useControlled({
        controlled: listboxOpenProp,
        default: defaultListboxOpen,
        name: 'MultiSelectUnstyled',
        state: 'listboxOpen'
    });
    _react.useEffect(()=>{
        setGroupedOptions(_utils1.getOptionsFromChildren(children));
    }, [
        children
    ]);
    const [buttonDefined, setButtonDefined] = _react.useState(false);
    const buttonRef = _react.useRef(null);
    const listboxRef = _react.useRef(null);
    const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
    const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _popperUnstyledDefault.default;
    const handleButtonRefChange = (element)=>{
        buttonRef.current = element;
        if (element != null) setButtonDefined(true);
    };
    const handleButtonRef = _utils.unstable_useForkRef(ref, handleButtonRefChange);
    const handleListboxRef = _utils.unstable_useForkRef(listboxRef, (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref);
    _react.useEffect(()=>{
        if (autoFocus) buttonRef.current.focus();
    }, [
        autoFocus
    ]);
    const handleOpenChange = (isOpen)=>{
        setListboxOpen(isOpen);
        onListboxOpenChange == null || onListboxOpenChange(isOpen);
    };
    const { buttonActive , buttonFocusVisible , disabled , getButtonProps , getListboxProps , getOptionProps , getOptionState , value  } = _useSelectDefault.default({
        buttonComponent: Button,
        buttonRef: handleButtonRef,
        defaultValue,
        disabled: disabledProp,
        listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id,
        listboxRef: handleListboxRef,
        multiple: true,
        onChange,
        onOpenChange: handleOpenChange,
        open: listboxOpen,
        options,
        value: valueProp
    });
    const ownerState = _extendsDefault.default({}, props, {
        active: buttonActive,
        defaultListboxOpen,
        disabled,
        focusVisible: buttonFocusVisible,
        open: listboxOpen,
        renderValue,
        value
    });
    const classes = useUtilityClasses(ownerState);
    const selectedOptions = _react.useMemo(()=>{
        if (value == null) return [];
        return options.filter((o)=>value.includes(o.value)
        );
    }, [
        options,
        value
    ]);
    const buttonProps = _utils2.appendOwnerState(Button, _extendsDefault.default({}, getButtonProps(), other, componentsProps.root, {
        className: _clsxDefault.default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root)
    }), ownerState);
    const listboxProps = _utils2.appendOwnerState(ListboxRoot, _extendsDefault.default({}, getListboxProps(), componentsProps.listbox, {
        className: _clsxDefault.default((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes.listbox)
    }), ownerState); // Popper must be a (non-host) component, therefore ownerState will be present within the props
    const popperProps = _utils2.appendOwnerState(Popper, _extendsDefault.default({
        open: listboxOpen,
        anchorEl: buttonRef.current,
        placement: 'bottom-start',
        disablePortal: true,
        role: undefined
    }, componentsProps.popper, {
        className: _clsxDefault.default((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes.popper)
    }), ownerState);
    const context = {
        getOptionProps,
        getOptionState,
        listboxRef
    };
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Button, _extendsDefault.default({}, buttonProps, {
                children: renderValue(selectedOptions)
            })),
            buttonDefined && /*#__PURE__*/ _jsxRuntime.jsx(Popper, _extendsDefault.default({}, popperProps, {
                children: /*#__PURE__*/ _jsxRuntime.jsx(ListboxRoot, _extendsDefault.default({}, listboxProps, {
                    children: /*#__PURE__*/ _jsxRuntime.jsx(_selectUnstyledContext.SelectUnstyledContext.Provider, {
                        value: context,
                        children: children
                    })
                }))
            }))
        ]
    });
});
MultiSelectUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Select.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .shape({
        Listbox: _propTypesDefault.default.elementType,
        Popper: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        listbox: _propTypesDefault.default.object,
        popper: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the select will be initially open.
   * @default false
   */ defaultListboxOpen: _propTypesDefault.default.bool,
    /**
   * The default selected values. Use when the component is not controlled.
   * @default []
   */ defaultValue: _propTypesDefault.default.array,
    /**
   * If `true`, the select is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */ listboxOpen: _propTypesDefault.default.bool,
    /**
   * Callback fired when an option is selected.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */ onListboxOpenChange: _propTypesDefault.default.func,
    /**
   * Function that customizes the rendering of the selected values.
   */ renderValue: _propTypesDefault.default.func,
    /**
   * The selected values.
   * Set to an empty array to deselect all options.
   */ value: _propTypesDefault.default.array
};
/**
 * The foundation for building custom-styled multi-selection select components.
 *
 * Demos:
 *
 * - [Selects](https://mui.com/components/selects/)
 *
 * API:
 *
 * - [MultiSelectUnstyled API](https://mui.com/api/multi-select-unstyled/)
 */ exports.default = MultiSelectUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../SelectUnstyled/utils":"1lhbu","../SelectUnstyled/useSelect":"6m4b6","../utils":"cgIce","../PopperUnstyled":"hxXeM","../SelectUnstyled/SelectUnstyledContext":"dWTAI","../composeClasses":"2T3xi","../SelectUnstyled/selectUnstyledClasses":"lnFdj","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1lhbu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "areOptionsEqual", ()=>areOptionsEqual
);
parcelHelpers.export(exports, "getOptionsFromChildren", ()=>getOptionsFromChildren
);
parcelHelpers.export(exports, "flattenOptionGroups", ()=>flattenOptionGroups
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _useSelectTypes = require("./useSelect.types");
function areOptionsEqual(option1, option2) {
    return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;
}
function getOptionsFromChildren(children) {
    if (children == null) return [];
    const selectChildren = [];
    _reactDefault.default.Children.forEach(children, (node)=>{
        var _props, _props2, _element$props$disabl2;
        const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;
        if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {
            if (nodeChildren != null) {
                var _element$props$disabl;
                const element = node;
                const group = {
                    options: getOptionsFromChildren(nodeChildren),
                    label: element.props.label,
                    disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false
                };
                selectChildren.push(group);
            }
            return;
        }
        const element = node;
        const option = {
            value: element.props.value,
            label: element.props.children,
            disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
        };
        selectChildren.push(option);
    });
    return selectChildren != null ? selectChildren : [];
}
function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
    let flatOptions = [];
    groupedOptions.forEach((optionOrGroup)=>{
        if (_useSelectTypes.isOptionGroup(optionOrGroup)) flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
        else flatOptions.push(_extendsDefault.default({}, optionOrGroup, {
            disabled: isGroupDisabled || optionOrGroup.disabled
        }));
    });
    return flatOptions;
}

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","./useSelect.types":"e2Rja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e2Rja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isOptionGroup", ()=>isOptionGroup
);
function isOptionGroup(child) {
    return !!child.options;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6m4b6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _buttonUnstyled = require("../ButtonUnstyled");
var _listboxUnstyled = require("../ListboxUnstyled");
function useSelect(props) {
    const { buttonComponent , buttonRef: buttonRefProp , defaultValue , disabled =false , listboxId , listboxRef: listboxRefProp , multiple =false , onChange , onOpenChange , open =false , options , value: valueProp  } = props;
    const buttonRef = _react.useRef(null);
    const handleButtonRef = _utils.unstable_useForkRef(buttonRefProp, buttonRef);
    const listboxRef = _react.useRef(null);
    const intermediaryListboxRef = _utils.unstable_useForkRef(listboxRefProp, listboxRef);
    const [value, setValue] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'SelectUnstyled',
        state: 'value'
    }); // prevents closing the listbox on keyUp right after opening it
    const ignoreEnterKeyUp = _react.useRef(false); // prevents reopening the listbox when button is clicked
    // (listbox closes on lost focus, then immediately reopens on click)
    const ignoreClick = _react.useRef(false); // Ensure the listbox is focused after opening
    const [listboxFocusRequested, requestListboxFocus] = _react.useState(false);
    const focusListboxIfRequested = _react.useCallback(()=>{
        if (listboxFocusRequested && listboxRef.current != null) {
            listboxRef.current.focus();
            requestListboxFocus(false);
        }
    }, [
        listboxFocusRequested
    ]);
    const updateListboxRef = (listboxElement)=>{
        listboxRef.current = listboxElement;
        focusListboxIfRequested();
    };
    const handleListboxRef = _utils.unstable_useForkRef(intermediaryListboxRef, updateListboxRef);
    _react.useEffect(()=>{
        focusListboxIfRequested();
    }, [
        focusListboxIfRequested
    ]);
    _react.useEffect(()=>{
        requestListboxFocus(open);
    }, [
        open
    ]);
    const createHandleMouseDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous;
            otherHandlers == null || (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
            if (!event.defaultPrevented && open) ignoreClick.current = true;
        }
    ;
    const createHandleButtonClick = (otherHandlers)=>(event)=>{
            var _otherHandlers$onClic;
            otherHandlers == null || (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
            if (!event.defaultPrevented && !ignoreClick.current) onOpenChange == null || onOpenChange(!open);
            ignoreClick.current = false;
        }
    ;
    const createHandleButtonKeyDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyD;
            otherHandlers == null || (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
            if (event.defaultPrevented) return;
            if (event.key === 'Enter') ignoreEnterKeyUp.current = true;
            if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
                event.preventDefault();
                onOpenChange == null || onOpenChange(true);
            }
        }
    ;
    const createHandleListboxKeyUp = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyU;
            otherHandlers == null || (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);
            if (event.defaultPrevented) return;
            const closingKeys = multiple ? [
                'Escape'
            ] : [
                'Escape',
                'Enter',
                ' '
            ];
            if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
                var _buttonRef$current;
                buttonRef == null || (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
            }
            ignoreEnterKeyUp.current = false;
        }
    ;
    const createHandleListboxItemClick = (otherHandlers)=>(event)=>{
            var _otherHandlers$onClic2;
            otherHandlers == null || (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
            if (event.defaultPrevented) return;
            if (!multiple) onOpenChange == null || onOpenChange(false);
        }
    ;
    const createHandleListboxBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$blur;
            otherHandlers == null || (_otherHandlers$blur = otherHandlers.blur) == null || _otherHandlers$blur.call(otherHandlers, event);
            if (!event.defaultPrevented) onOpenChange == null || onOpenChange(false);
        }
    ;
    const listboxReducer = (state, action)=>{
        const newState = _listboxUnstyled.defaultListboxReducer(state, action); // change selection when listbox is closed
        if (action.type === _listboxUnstyled.ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) return _extendsDefault.default({}, newState, {
            selectedValue: newState.highlightedValue
        });
        if (action.type === _listboxUnstyled.ActionTypes.blur || action.type === _listboxUnstyled.ActionTypes.setValue || action.type === _listboxUnstyled.ActionTypes.optionsChange) return _extendsDefault.default({}, newState, {
            highlightedValue: newState.selectedValue
        });
        return newState;
    };
    const { getRootProps: getButtonRootProps , active: buttonActive , focusVisible: buttonFocusVisible  } = _buttonUnstyled.useButton({
        component: buttonComponent,
        disabled,
        ref: handleButtonRef
    });
    const selectedOption = _react.useMemo(()=>{
        var _props$options$find;
        return props.multiple ? props.options.filter((o)=>value.includes(o.value)
        ) : (_props$options$find = props.options.find((o)=>o.value === value
        )) != null ? _props$options$find : null;
    }, [
        props.multiple,
        props.options,
        value
    ]);
    let useListboxParameters;
    if (props.multiple) useListboxParameters = {
        id: listboxId,
        isOptionDisabled: (o)=>{
            var _o$disabled;
            return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
        },
        optionComparer: (o, v)=>(o == null ? void 0 : o.value) === (v == null ? void 0 : v.value)
        ,
        listboxRef: handleListboxRef,
        multiple: true,
        onChange: (newOptions)=>{
            setValue(newOptions.map((o)=>o.value
            ));
            onChange == null || onChange(newOptions.map((o)=>o.value
            ));
        },
        options,
        value: selectedOption
    };
    else useListboxParameters = {
        id: listboxId,
        isOptionDisabled: (o)=>{
            var _o$disabled2;
            return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
        },
        optionComparer: (o, v)=>(o == null ? void 0 : o.value) === (v == null ? void 0 : v.value)
        ,
        listboxRef: handleListboxRef,
        multiple: false,
        onChange: (option)=>{
            var _option$value, _option$value2;
            setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
            onChange == null || onChange((_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
        },
        options,
        stateReducer: listboxReducer,
        value: selectedOption
    };
    const { getRootProps: getListboxRootProps , getOptionProps: getListboxOptionProps , getOptionState , highlightedOption , selectedOption: listboxSelectedOption  } = _listboxUnstyled.useListbox(useListboxParameters);
    const getButtonProps = (otherHandlers = {})=>{
        return _extendsDefault.default({}, getButtonRootProps(_extendsDefault.default({}, otherHandlers, {
            onClick: createHandleButtonClick(otherHandlers),
            onMouseDown: createHandleMouseDown(otherHandlers),
            onKeyDown: createHandleButtonKeyDown(otherHandlers)
        })), {
            'aria-expanded': open,
            'aria-haspopup': 'listbox'
        });
    };
    const getListboxProps = (otherHandlers = {})=>getListboxRootProps(_extendsDefault.default({}, otherHandlers, {
            onBlur: createHandleListboxBlur(otherHandlers),
            onKeyUp: createHandleListboxKeyUp(otherHandlers)
        }))
    ;
    const getOptionProps = (option, otherHandlers = {})=>{
        return getListboxOptionProps(option, _extendsDefault.default({}, otherHandlers, {
            onClick: createHandleListboxItemClick(otherHandlers)
        }));
    };
    _react.useDebugValue({
        selectedOption: listboxSelectedOption,
        open,
        highlightedOption
    });
    return {
        buttonActive,
        buttonFocusVisible,
        disabled,
        getButtonProps,
        getListboxProps,
        getOptionProps,
        getOptionState,
        open,
        value
    };
}
exports.default = useSelect;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","../ButtonUnstyled":"jqfJm","../ListboxUnstyled":"lqFWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWTAI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectUnstyledContext", ()=>SelectUnstyledContext
);
var _react = require("react");
const SelectUnstyledContext = /*#__PURE__*/ _react.createContext(undefined);

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnFdj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSelectUnstyledUtilityClass", ()=>getSelectUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getSelectUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiSelectUnstyled', slot);
}
const selectUnstyledClasses = _generateUtilityClassesDefault.default('MuiSelectUnstyled', [
    'root',
    'button',
    'listbox',
    'popper',
    'active',
    'expanded',
    'disabled',
    'focusVisible'
]);
exports.default = selectUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qLTh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"29SBz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_optionGroupUnstyledDefault.default
);
parcelHelpers.export(exports, "optionGroupUnstyledClasses", ()=>_optionGroupUnstyledClassesDefault.default
);
var _optionGroupUnstyled = require("./OptionGroupUnstyled");
var _optionGroupUnstyledDefault = parcelHelpers.interopDefault(_optionGroupUnstyled);
var _optionGroupUnstyledProps = require("./OptionGroupUnstyledProps");
parcelHelpers.exportAll(_optionGroupUnstyledProps, exports);
var _optionGroupUnstyledClasses = require("./optionGroupUnstyledClasses");
var _optionGroupUnstyledClassesDefault = parcelHelpers.interopDefault(_optionGroupUnstyledClasses);
parcelHelpers.exportAll(_optionGroupUnstyledClasses, exports);

},{"./OptionGroupUnstyled":"7m1qC","./OptionGroupUnstyledProps":"j1Lp7","./optionGroupUnstyledClasses":"fqiEQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7m1qC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _optionGroupUnstyledClasses = require("./optionGroupUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "components",
    "disabled",
    "componentsProps"
];
function useUtilityClasses(disabled) {
    const slots = {
        root: [
            'root',
            disabled && 'disabled'
        ],
        label: [
            'label'
        ],
        list: [
            'list'
        ]
    };
    return _composeClassesDefault.default(slots, _optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass, {});
}
/**
 * An unstyled option group to be used within a SelectUnstyled.
 *
 * Demos:
 *
 * - [Selects](https://mui.com/components/selects/)
 *
 * API:
 *
 * - [OptionGroupUnstyled API](https://mui.com/api/option-group-unstyled/)
 */ const OptionGroupUnstyled = /*#__PURE__*/ _reactDefault.default.forwardRef(function OptionGroupUnstyled(props, ref) {
    var _componentsProps$root, _componentsProps$labe, _componentsProps$list;
    const { className , component , components ={} , disabled =false , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const Root = component || (components == null ? void 0 : components.Root) || 'li';
    const Label = (components == null ? void 0 : components.Label) || 'span';
    const List = (components == null ? void 0 : components.List) || 'ul';
    const classes = useUtilityClasses(disabled);
    const rootProps = _extendsDefault.default({}, other, {
        ref
    }, componentsProps.root, {
        className: _clsxDefault.default(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    });
    const labelProps = _extendsDefault.default({}, componentsProps.label, {
        className: _clsxDefault.default(classes.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className)
    });
    const listProps = _extendsDefault.default({}, componentsProps.list, {
        className: _clsxDefault.default(classes.list, (_componentsProps$list = componentsProps.list) == null ? void 0 : _componentsProps$list.className)
    });
    return /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Label, _extendsDefault.default({}, labelProps, {
                children: props.label
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(List, _extendsDefault.default({}, listProps, {
                children: props.children
            }))
        ]
    }));
});
OptionGroupUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to components.Root.
   * If both are provided, the component is used.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the OptionGroupUnstyled.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Label: _propTypesDefault.default.elementType,
        List: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        label: _propTypesDefault.default.object,
        list: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true` all the options in the group will be disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * The human-readable description of the group.
   */ label: _propTypesDefault.default.node
};
exports.default = OptionGroupUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","clsx":"83C22","prop-types":"7wKI2","react":"21dqq","../composeClasses":"2T3xi","./optionGroupUnstyledClasses":"fqiEQ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqiEQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOptionGroupUnstyledUtilityClass", ()=>getOptionGroupUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getOptionGroupUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiOptionGroupUnstyled', slot);
}
const optionGroupUnstyledClasses = _generateUtilityClassesDefault.default('MuiOptionGroupUnstyled', [
    'root',
    'label',
    'list'
]);
exports.default = optionGroupUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j1Lp7":[function(require,module,exports) {

},{}],"lJtjp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_optionUnstyledDefault.default
);
parcelHelpers.export(exports, "optionUnstyledClasses", ()=>_optionUnstyledClassesDefault.default
);
var _optionUnstyled = require("./OptionUnstyled");
var _optionUnstyledDefault = parcelHelpers.interopDefault(_optionUnstyled);
var _optionUnstyledProps = require("./OptionUnstyledProps");
parcelHelpers.exportAll(_optionUnstyledProps, exports);
var _optionUnstyledClasses = require("./optionUnstyledClasses");
var _optionUnstyledClassesDefault = parcelHelpers.interopDefault(_optionUnstyledClasses);
parcelHelpers.exportAll(_optionUnstyledClasses, exports);

},{"./OptionUnstyled":"93W6A","./OptionUnstyledProps":"gjyhZ","./optionUnstyledClasses":"heGMj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93W6A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _selectUnstyledContext = require("../SelectUnstyled/SelectUnstyledContext");
var _optionUnstyledClasses = require("./optionUnstyledClasses");
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "disabled",
    "value"
];
function useUtilityClasses(ownerState) {
    const { disabled , highlighted , selected  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            highlighted && 'highlighted',
            selected && 'selected'
        ]
    };
    return _composeClassesDefault.default(slots, _optionUnstyledClasses.getOptionUnstyledUtilityClass, {});
}
/**
 * An unstyled option to be used within a SelectUnstyled.
 */ const OptionUnstyled = /*#__PURE__*/ _reactDefault.default.forwardRef(function OptionUnstyled(props, ref) {
    var _componentsProps$root;
    const { children , className , component , components ={} , componentsProps ={} , disabled , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const selectContext = _reactDefault.default.useContext(_selectUnstyledContext.SelectUnstyledContext);
    if (!selectContext) throw new Error('OptionUnstyled must be used within a SelectUnstyled');
    const Root = component || components.Root || 'li';
    const selectOption = {
        value,
        label: children,
        disabled
    };
    const optionState = selectContext.getOptionState(selectOption);
    const optionProps = selectContext.getOptionProps(selectOption);
    const listboxRef = selectContext.listboxRef;
    const ownerState = _extendsDefault.default({}, props, optionState);
    const optionRef = _reactDefault.default.useRef(null);
    const handleRef = _utils.unstable_useForkRef(ref, optionRef);
    _reactDefault.default.useEffect(()=>{
        // Scroll to the currently highlighted option
        if (optionState.highlighted) {
            if (!listboxRef.current || !optionRef.current) return;
            const listboxClientRect = listboxRef.current.getBoundingClientRect();
            const optionClientRect = optionRef.current.getBoundingClientRect();
            if (optionClientRect.top < listboxClientRect.top) listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
            else if (optionClientRect.bottom > listboxClientRect.bottom) listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
        }
    }, [
        optionState.highlighted,
        listboxRef
    ]);
    const classes = useUtilityClasses(ownerState);
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, other, optionProps, componentsProps.root, {
        ref: handleRef,
        className: _clsxDefault.default(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({}, rootProps, {
        children: children
    }));
});
OptionUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to components.Root.
   * If both are provided, the component is used.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the OptionUnstyled.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the option will be disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * The value of the option.
   */ value: _propTypesDefault.default.any.isRequired
};
/**
 * An unstyled option to be used within a SelectUnstyled.
 *
 * Demos:
 *
 * - [Selects](https://mui.com/components/selects/)
 *
 * API:
 *
 * - [OptionUnstyled API](https://mui.com/api/option-unstyled/)
 */ exports.default = /*#__PURE__*/ _reactDefault.default.memo(OptionUnstyled);

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","clsx":"83C22","prop-types":"7wKI2","@mui/utils":"cttLn","../composeClasses":"2T3xi","../SelectUnstyled/SelectUnstyledContext":"dWTAI","./optionUnstyledClasses":"heGMj","../utils/appendOwnerState":"hedlX","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heGMj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOptionUnstyledUtilityClass", ()=>getOptionUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getOptionUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiOptionUnstyled', slot);
}
const optionUnstyledClasses = _generateUtilityClassesDefault.default('MuiOptionUnstyled', [
    'root',
    'disabled',
    'selected',
    'highlighted'
]);
exports.default = optionUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gjyhZ":[function(require,module,exports) {

},{}],"e7nPk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_selectUnstyledDefault.default
);
parcelHelpers.export(exports, "selectUnstyledClasses", ()=>_selectUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useSelect", ()=>_useSelectDefault.default
);
var _selectUnstyled = require("./SelectUnstyled");
var _selectUnstyledDefault = parcelHelpers.interopDefault(_selectUnstyled);
var _selectUnstyledContext = require("./SelectUnstyledContext");
parcelHelpers.exportAll(_selectUnstyledContext, exports);
var _selectUnstyledClasses = require("./selectUnstyledClasses");
var _selectUnstyledClassesDefault = parcelHelpers.interopDefault(_selectUnstyledClasses);
parcelHelpers.exportAll(_selectUnstyledClasses, exports);
var _selectUnstyledTypes = require("./SelectUnstyled.types");
parcelHelpers.exportAll(_selectUnstyledTypes, exports);
var _useSelect = require("./useSelect");
var _useSelectDefault = parcelHelpers.interopDefault(_useSelect);
var _useSelectTypes = require("./useSelect.types");
parcelHelpers.exportAll(_useSelectTypes, exports);

},{"./SelectUnstyled":"gR1Zs","./SelectUnstyledContext":"dWTAI","./selectUnstyledClasses":"lnFdj","./SelectUnstyled.types":"iHOGv","./useSelect":"6m4b6","./useSelect.types":"e2Rja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gR1Zs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _utils1 = require("./utils");
var _useSelect = require("./useSelect");
var _useSelectDefault = parcelHelpers.interopDefault(_useSelect);
var _utils2 = require("../utils");
var _popperUnstyled = require("../PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);
var _selectUnstyledContext = require("./SelectUnstyledContext");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _selectUnstyledClasses = require("./selectUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "autoFocus",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultValue",
    "defaultListboxOpen",
    "disabled",
    "listboxOpen",
    "onChange",
    "onListboxOpenChange",
    "renderValue",
    "value"
];
function defaultRenderSingleValue(selectedOption) {
    var _selectedOption$label;
    return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';
}
function useUtilityClasses(ownerState) {
    const { active , disabled , open , focusVisible  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible',
            active && 'active',
            open && 'expanded'
        ],
        listbox: [
            'listbox',
            disabled && 'disabled'
        ],
        popper: [
            'popper'
        ]
    };
    return _composeClassesDefault.default(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
}
/**
 * The foundation for building custom-styled select components.
 */ const SelectUnstyled = /*#__PURE__*/ _react.forwardRef(function SelectUnstyled(props, ref) {
    var _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;
    const { autoFocus , children , className , component , components ={} , componentsProps ={} , defaultValue , defaultListboxOpen =false , disabled: disabledProp , listboxOpen: listboxOpenProp , onChange , onListboxOpenChange , renderValue: renderValueProp , value: valueProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
    const [groupedOptions, setGroupedOptions] = _react.useState([]);
    const options = _react.useMemo(()=>_utils1.flattenOptionGroups(groupedOptions)
    , [
        groupedOptions
    ]);
    const [listboxOpen, setListboxOpen] = _utils.unstable_useControlled({
        controlled: listboxOpenProp,
        default: defaultListboxOpen,
        name: 'SelectUnstyled',
        state: 'listboxOpen'
    });
    _react.useEffect(()=>{
        setGroupedOptions(_utils1.getOptionsFromChildren(children));
    }, [
        children
    ]);
    const [buttonDefined, setButtonDefined] = _react.useState(false);
    const buttonRef = _react.useRef(null);
    const listboxRef = _react.useRef(null);
    const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
    const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _popperUnstyledDefault.default;
    const handleButtonRefChange = (element)=>{
        buttonRef.current = element;
        if (element != null) setButtonDefined(true);
    };
    const handleButtonRef = _utils.unstable_useForkRef(ref, handleButtonRefChange);
    const handleListboxRef = _utils.unstable_useForkRef(listboxRef, (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref);
    _react.useEffect(()=>{
        if (autoFocus) buttonRef.current.focus();
    }, [
        autoFocus
    ]);
    const handleOpenChange = (isOpen)=>{
        setListboxOpen(isOpen);
        onListboxOpenChange == null || onListboxOpenChange(isOpen);
    };
    const { buttonActive , buttonFocusVisible , disabled , getButtonProps , getListboxProps , getOptionProps , getOptionState , value  } = _useSelectDefault.default({
        buttonComponent: Button,
        buttonRef: handleButtonRef,
        defaultValue,
        disabled: disabledProp,
        listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id,
        listboxRef: handleListboxRef,
        multiple: false,
        onChange,
        onOpenChange: handleOpenChange,
        open: listboxOpen,
        options,
        value: valueProp
    });
    const ownerState = _extendsDefault.default({}, props, {
        active: buttonActive,
        defaultListboxOpen,
        disabled,
        focusVisible: buttonFocusVisible,
        open: listboxOpen,
        renderValue,
        value
    });
    const classes = useUtilityClasses(ownerState);
    const selectedOptions = _react.useMemo(()=>{
        return options.find((o)=>value === o.value
        );
    }, [
        options,
        value
    ]);
    const buttonProps = _utils2.appendOwnerState(Button, _extendsDefault.default({}, getButtonProps(), other, componentsProps.root, {
        className: _clsxDefault.default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root)
    }), ownerState);
    const listboxProps = _utils2.appendOwnerState(ListboxRoot, _extendsDefault.default({}, getListboxProps(), componentsProps.listbox, {
        className: _clsxDefault.default((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes.listbox)
    }), ownerState); // Popper must be a (non-host) component, therefore ownerState will be present within the props
    const popperProps = _utils2.appendOwnerState(Popper, _extendsDefault.default({
        open: listboxOpen,
        anchorEl: buttonRef.current,
        placement: 'bottom-start',
        disablePortal: true,
        role: undefined
    }, componentsProps.popper, {
        className: _clsxDefault.default((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes.popper)
    }), ownerState);
    const context = {
        getOptionProps,
        getOptionState,
        listboxRef
    };
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Button, _extendsDefault.default({}, buttonProps, {
                children: renderValue(selectedOptions)
            })),
            buttonDefined && /*#__PURE__*/ _jsxRuntime.jsx(Popper, _extendsDefault.default({}, popperProps, {
                children: /*#__PURE__*/ _jsxRuntime.jsx(ListboxRoot, _extendsDefault.default({}, listboxProps, {
                    children: /*#__PURE__*/ _jsxRuntime.jsx(_selectUnstyledContext.SelectUnstyledContext.Provider, {
                        value: context,
                        children: children
                    })
                }))
            }))
        ]
    });
});
SelectUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Select.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .shape({
        Listbox: _propTypesDefault.default.elementType,
        Popper: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        listbox: _propTypesDefault.default.object,
        popper: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the select will be initially open.
   * @default false
   */ defaultListboxOpen: _propTypesDefault.default.bool,
    /**
   * The default selected value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any,
    /**
   * If `true`, the select is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */ listboxOpen: _propTypesDefault.default.bool,
    /**
   * Callback fired when an option is selected.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */ onListboxOpenChange: _propTypesDefault.default.func,
    /**
   * Function that customizes the rendering of the selected value.
   */ renderValue: _propTypesDefault.default.func,
    /**
   * The selected value.
   * Set to `null` to deselect all options.
   */ value: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any
};
/**
 * The foundation for building custom-styled select components.
 *
 * Demos:
 *
 * - [Selects](https://mui.com/components/selects/)
 *
 * API:
 *
 * - [SelectUnstyled API](https://mui.com/api/select-unstyled/)
 */ exports.default = SelectUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","./utils":"1lhbu","./useSelect":"6m4b6","../utils":"cgIce","../PopperUnstyled":"hxXeM","./SelectUnstyledContext":"dWTAI","../composeClasses":"2T3xi","./selectUnstyledClasses":"lnFdj","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHOGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"edJYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_sliderUnstyledDefault.default
);
parcelHelpers.export(exports, "SliderValueLabelUnstyled", ()=>_sliderValueLabelUnstyledDefault.default
);
parcelHelpers.export(exports, "sliderUnstyledClasses", ()=>_sliderUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useSlider", ()=>_useSliderDefault.default
);
var _sliderUnstyled = require("./SliderUnstyled");
var _sliderUnstyledDefault = parcelHelpers.interopDefault(_sliderUnstyled);
var _sliderValueLabelUnstyled = require("./SliderValueLabelUnstyled");
var _sliderValueLabelUnstyledDefault = parcelHelpers.interopDefault(_sliderValueLabelUnstyled);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderUnstyledClassesDefault = parcelHelpers.interopDefault(_sliderUnstyledClasses);
var _useSlider = require("./useSlider");
var _useSliderDefault = parcelHelpers.interopDefault(_useSlider);
parcelHelpers.exportAll(_sliderUnstyledClasses, exports);

},{"./SliderUnstyled":"cwWsi","./SliderValueLabelUnstyled":"7lyZg","./sliderUnstyledClasses":"hIwb8","./useSlider":"hBvEc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwWsi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderValueLabelUnstyled = require("./SliderValueLabelUnstyled");
var _sliderValueLabelUnstyledDefault = parcelHelpers.interopDefault(_sliderValueLabelUnstyled);
var _useSlider = require("./useSlider");
var _useSliderDefault = parcelHelpers.interopDefault(_useSlider);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-label",
    "aria-valuetext",
    "className",
    "component",
    "classes",
    "disableSwap",
    "disabled",
    "getAriaLabel",
    "getAriaValueText",
    "marks",
    "max",
    "min",
    "name",
    "onChange",
    "onChangeCommitted",
    "onMouseDown",
    "orientation",
    "scale",
    "step",
    "tabIndex",
    "track",
    "value",
    "valueLabelDisplay",
    "valueLabelFormat",
    "isRtl",
    "components",
    "componentsProps"
];
const Identity = (x)=>x
;
const useUtilityClasses = (ownerState)=>{
    const { disabled , dragging , marked , orientation , track , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            dragging && 'dragging',
            marked && 'marked',
            orientation === 'vertical' && 'vertical',
            track === 'inverted' && 'trackInverted',
            track === false && 'trackFalse'
        ],
        rail: [
            'rail'
        ],
        track: [
            'track'
        ],
        mark: [
            'mark'
        ],
        markActive: [
            'markActive'
        ],
        markLabel: [
            'markLabel'
        ],
        markLabelActive: [
            'markLabelActive'
        ],
        valueLabel: [
            'valueLabel'
        ],
        thumb: [
            'thumb',
            disabled && 'disabled'
        ],
        active: [
            'active'
        ],
        disabled: [
            'disabled'
        ],
        focusVisible: [
            'focusVisible'
        ]
    };
    return _composeClassesDefault.default(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);
};
const Forward = ({ children  })=>children
;
const SliderUnstyled = /*#__PURE__*/ _react.forwardRef(function SliderUnstyled(props, ref) {
    var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;
    const { 'aria-label': ariaLabel , 'aria-valuetext': ariaValuetext , className , component , classes: classesProp , disableSwap =false , disabled =false , getAriaLabel , getAriaValueText , marks: marksProp = false , max =100 , min =0 , onMouseDown , orientation ='horizontal' , scale =Identity , step =1 , track ='normal' , valueLabelDisplay ='off' , valueLabelFormat =Identity , isRtl =false , components ={} , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded); // all props with defaults
    // consider extracting to hook an reusing the lint rule for the varints
    const ownerState = _extendsDefault.default({}, props, {
        mark: marksProp,
        classes: classesProp,
        disabled,
        isRtl,
        max,
        min,
        orientation,
        scale,
        step,
        track,
        valueLabelDisplay,
        valueLabelFormat
    });
    const { axisProps , getRootProps , getHiddenInputProps , getThumbProps , open , active , axis , range , focusVisible , dragging , marks , values , trackOffset , trackLeap  } = _useSliderDefault.default(_extendsDefault.default({}, ownerState, {
        ref
    }));
    ownerState.marked = marks.length > 0 && marks.some((mark)=>mark.label
    );
    ownerState.dragging = dragging;
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : 'span';
    const railProps = _appendOwnerStateDefault.default(Rail, componentsProps.rail, ownerState);
    const Track = (_components$Track = components.Track) != null ? _components$Track : 'span';
    const trackProps = _appendOwnerStateDefault.default(Track, componentsProps.track, ownerState);
    const trackStyle = _extendsDefault.default({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
    const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
    const thumbProps = _appendOwnerStateDefault.default(Thumb, componentsProps.thumb, ownerState);
    const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : _sliderValueLabelUnstyledDefault.default;
    const valueLabelProps = _appendOwnerStateDefault.default(ValueLabel, componentsProps.valueLabel, ownerState);
    const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : 'span';
    const markProps = _appendOwnerStateDefault.default(Mark, componentsProps.mark, ownerState);
    const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : 'span';
    const markLabelProps = _appendOwnerStateDefault.default(MarkLabel, componentsProps.markLabel, ownerState);
    const Input = components.Input || 'input';
    const inputProps = _appendOwnerStateDefault.default(Input, componentsProps.input, ownerState);
    const hiddenInputProps = getHiddenInputProps();
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, getRootProps({
        onMouseDown
    }), {
        className: _clsxDefault.default(classes.root, rootProps.className, className),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Rail, _extendsDefault.default({}, railProps, {
                className: _clsxDefault.default(classes.rail, railProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Track, _extendsDefault.default({}, trackProps, {
                className: _clsxDefault.default(classes.track, trackProps.className),
                style: _extendsDefault.default({}, trackStyle, trackProps.style)
            })),
            marks.map((mark, index)=>{
                const percent = _useSlider.valueToPercent(mark.value, min, max);
                const style = axisProps[axis].offset(percent);
                let markActive;
                if (track === false) markActive = values.indexOf(mark.value) !== -1;
                else markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
                return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
                    children: [
                        /*#__PURE__*/ _jsxRuntime.jsx(Mark, _extendsDefault.default({
                            "data-index": index
                        }, markProps, !_isHostComponentDefault.default(Mark) && {
                            markActive
                        }, {
                            style: _extendsDefault.default({}, style, markProps.style),
                            className: _clsxDefault.default(classes.mark, markProps.className, markActive && classes.markActive)
                        })),
                        mark.label != null ? /*#__PURE__*/ _jsxRuntime.jsx(MarkLabel, _extendsDefault.default({
                            "aria-hidden": true,
                            "data-index": index
                        }, markLabelProps, !_isHostComponentDefault.default(MarkLabel) && {
                            markLabelActive: markActive
                        }, {
                            style: _extendsDefault.default({}, style, markLabelProps.style),
                            className: _clsxDefault.default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
                            children: mark.label
                        })) : null
                    ]
                }, mark.value);
            }),
            values.map((value, index)=>{
                const percent = _useSlider.valueToPercent(value, min, max);
                const style = axisProps[axis].offset(percent);
                const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
                return /*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
                    children: /*#__PURE__*/ _jsxRuntime.jsx(ValueLabelComponent, _extendsDefault.default({}, !_isHostComponentDefault.default(ValueLabelComponent) && {
                        valueLabelFormat,
                        valueLabelDisplay,
                        value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
                        index,
                        open: open === index || active === index || valueLabelDisplay === 'on',
                        disabled
                    }, valueLabelProps, {
                        className: _clsxDefault.default(classes.valueLabel, valueLabelProps.className),
                        children: /*#__PURE__*/ _jsxRuntime.jsx(Thumb, _extendsDefault.default({
                            "data-index": index
                        }, thumbProps, getThumbProps(), {
                            className: _clsxDefault.default(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)
                        }, !_isHostComponentDefault.default(Thumb) && {
                            ownerState: _extendsDefault.default({}, ownerState, thumbProps.ownerState)
                        }, {
                            style: _extendsDefault.default({}, style, {
                                pointerEvents: disableSwap && active !== index ? 'none' : undefined
                            }, thumbProps.style),
                            children: /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({}, hiddenInputProps, {
                                "data-index": index,
                                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                                "aria-valuenow": scale(value),
                                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                                value: values[index]
                            }, !_isHostComponentDefault.default(Input) && {
                                ownerState: _extendsDefault.default({}, ownerState, inputProps.ownerState)
                            }, inputProps, {
                                style: _extendsDefault.default({}, hiddenInputProps.style, inputProps.style)
                            }))
                        }))
                    }))
                }, index);
            })
        ]
    }));
});
SliderUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The label of the slider.
   */ 'aria-label': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-label'] != null) return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        return null;
    }),
    /**
   * The id of the element containing a label for the slider.
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */ 'aria-valuetext': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-valuetext'] != null) return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        return null;
    }),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Mark: _propTypesDefault.default.elementType,
        MarkLabel: _propTypesDefault.default.elementType,
        Rail: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Thumb: _propTypesDefault.default.elementType,
        Track: _propTypesDefault.default.elementType,
        ValueLabel: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Slider.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        mark: _propTypesDefault.default.object,
        markLabel: _propTypesDefault.default.object,
        rail: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object,
        thumb: _propTypesDefault.default.object,
        track: _propTypesDefault.default.object,
        valueLabel: _propTypesDefault.default.shape({
            className: _propTypesDefault.default.string,
            components: _propTypesDefault.default.shape({
                Root: _propTypesDefault.default.elementType
            }),
            style: _propTypesDefault.default.object,
            value: _propTypesDefault.default.oneOfType([
                _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
                _propTypesDefault.default.number
            ]),
            valueLabelDisplay: _propTypesDefault.default.oneOf([
                'auto',
                'off',
                'on'
            ])
        })
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */ disableSwap: _propTypesDefault.default.bool,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaLabel: _propTypesDefault.default.func,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaValueText: _propTypesDefault.default.func,
    /**
   * Indicates whether the theme context has rtl direction. It is set automatically.
   * @default false
   */ isRtl: _propTypesDefault.default.bool,
    /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */ marks: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
            label: _propTypesDefault.default.node,
            value: _propTypesDefault.default.number.isRequired
        })),
        _propTypesDefault.default.bool
    ]),
    /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */ max: _propTypesDefault.default.number,
    /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */ min: _propTypesDefault.default.number,
    /**
   * Name attribute of the hidden `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */ onChangeCommitted: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseDown: _propTypesDefault.default.func,
    /**
   * The component orientation.
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * A transformation function, to change the scale of the slider.
   * @default (x) => x
   */ scale: _propTypesDefault.default.func,
    /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */ step: _propTypesDefault.default.number,
    /**
   * Tab index attribute of the hidden `input` element.
   */ tabIndex: _propTypesDefault.default.number,
    /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */ track: _propTypesDefault.default.oneOf([
        'inverted',
        'normal',
        false
    ]),
    /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */ valueLabelDisplay: _propTypesDefault.default.oneOf([
        'auto',
        'off',
        'on'
    ]),
    /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @default (x) => x
   */ valueLabelFormat: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.string
    ])
};
exports.default = SliderUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../utils/appendOwnerState":"hedlX","../utils/isHostComponent":"b3wck","../composeClasses":"2T3xi","./sliderUnstyledClasses":"hIwb8","./SliderValueLabelUnstyled":"7lyZg","./useSlider":"hBvEc","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIwb8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSliderUtilityClass", ()=>getSliderUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getSliderUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiSlider', slot);
}
const sliderUnstyledClasses = _generateUtilityClassesDefault.default('MuiSlider', [
    'root',
    'active',
    'focusVisible',
    'disabled',
    'dragging',
    'marked',
    'vertical',
    'trackInverted',
    'trackFalse',
    'rail',
    'track',
    'mark',
    'markActive',
    'markLabel',
    'markLabelActive',
    'thumb',
    'valueLabel',
    'valueLabelOpen',
    'valueLabelCircle',
    'valueLabelLabel'
]);
exports.default = sliderUnstyledClasses;

},{"../generateUtilityClasses":"6i04V","../generateUtilityClass":"81TS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lyZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderUnstyledClassesDefault = parcelHelpers.interopDefault(_sliderUnstyledClasses);
var _jsxRuntime = require("react/jsx-runtime");
const useValueLabelClasses = (props)=>{
    const { open  } = props;
    const utilityClasses = {
        offset: _clsxDefault.default(open && _sliderUnstyledClassesDefault.default.valueLabelOpen),
        circle: _sliderUnstyledClassesDefault.default.valueLabelCircle,
        label: _sliderUnstyledClassesDefault.default.valueLabelLabel
    };
    return utilityClasses;
};
/**
 * @ignore - internal component.
 */ function SliderValueLabelUnstyled(props) {
    const { children , className , value , theme  } = props;
    const classes = useValueLabelClasses(props);
    return /*#__PURE__*/ _react.cloneElement(children, {
        className: _clsxDefault.default(children.props.className)
    }, /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            children.props.children,
            /*#__PURE__*/ _jsxRuntime.jsx("span", {
                className: _clsxDefault.default(classes.offset, className),
                theme: theme,
                "aria-hidden": true,
                children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: classes.circle,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                        className: classes.label,
                        children: value
                    })
                })
            })
        ]
    }));
}
SliderValueLabelUnstyled.propTypes = {
    children: _propTypesDefault.default.element.isRequired,
    className: _propTypesDefault.default.string,
    theme: _propTypesDefault.default.any,
    value: _propTypesDefault.default.node
};
exports.default = SliderValueLabelUnstyled;

},{"react":"21dqq","prop-types":"7wKI2","clsx":"83C22","./sliderUnstyledClasses":"hIwb8","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBvEc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "valueToPercent", ()=>valueToPercent
);
parcelHelpers.export(exports, "Identity", ()=>Identity
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
function asc(a, b) {
    return a - b;
}
function clamp(value, min, max) {
    if (value == null) return min;
    return Math.min(Math.max(min, value), max);
}
function findClosest(values, currentValue) {
    var _values$reduce;
    const { index: closestIndex  } = (_values$reduce = values.reduce((acc, value, index)=>{
        const distance = Math.abs(currentValue - value);
        if (acc === null || distance < acc.distance || distance === acc.distance) return {
            distance,
            index
        };
        return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
}
function trackFinger(event, touchId) {
    // The event is TouchEvent
    if (touchId.current !== undefined && event.changedTouches) {
        const touchEvent = event;
        for(let i = 0; i < touchEvent.changedTouches.length; i += 1){
            const touch = touchEvent.changedTouches[i];
            if (touch.identifier === touchId.current) return {
                x: touch.clientX,
                y: touch.clientY
            };
        }
        return false;
    } // The event is MouseEvent
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
    // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
    // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
    if (Math.abs(num) < 1) {
        const parts = num.toExponential().split('e-');
        const matissaDecimalPart = parts[0].split('.')[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split('.')[1];
    return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
    const nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({ values , newValue , index  }) {
    const output = values.slice();
    output[index] = newValue;
    return output.sort(asc);
}
function focusThumb({ sliderRef , activeIndex , setActive  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = _utils.unstable_ownerDocument(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
        var _sliderRef$current2;
        (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) setActive(activeIndex);
}
const axisProps = {
    horizontal: {
        offset: (percent)=>({
                left: `${percent}%`
            })
        ,
        leap: (percent)=>({
                width: `${percent}%`
            })
    },
    'horizontal-reverse': {
        offset: (percent)=>({
                right: `${percent}%`
            })
        ,
        leap: (percent)=>({
                width: `${percent}%`
            })
    },
    vertical: {
        offset: (percent)=>({
                bottom: `${percent}%`
            })
        ,
        leap: (percent)=>({
                height: `${percent}%`
            })
    }
};
const Identity = (x)=>x
; // TODO: remove support for Safari < 13.
// https://caniuse.com/#search=touch-action
//
// Safari, on iOS, supports touch action since v13.
// Over 80% of the iOS phones are compatible
// in August 2020.
// Utilizing the CSS.supports method to check if touch-action is supported.
// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
// is supported on both Edge@12 and IE if CSS.supports is not available that means that
// touch-action will be supported
let cachedSupportsTouchActionNone;
function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === undefined) {
        if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
        else cachedSupportsTouchActionNone = true;
    }
    return cachedSupportsTouchActionNone;
}
function useSlider(props) {
    const { ref , 'aria-labelledby': ariaLabelledby , defaultValue , disableSwap =false , disabled =false , marks: marksProp = false , max =100 , min =0 , name , onChange , onChangeCommitted , orientation ='horizontal' , scale =Identity , step =1 , tabIndex , value: valueProp , isRtl =false  } = props;
    const touchId = _react.useRef(); // We can't use the :active browser pseudo-classes.
    // - The active state isn't triggered when clicking on the rail.
    // - The active state isn't transferred when inversing a range slider.
    const [active, setActive] = _react.useState(-1);
    const [open, setOpen] = _react.useState(-1);
    const [dragging, setDragging] = _react.useState(false);
    const moveCount = _react.useRef(0);
    const [valueDerived, setValueState] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue != null ? defaultValue : min,
        name: 'Slider'
    });
    const handleChange = onChange && ((event, value, thumbIndex)=>{
        // Redefine target to allow name and value to be read.
        // This allows seamless integration with the most popular form libraries.
        // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
        // Clone the event to not override `target` of the original event.
        const nativeEvent = event.nativeEvent || event; // @ts-ignore The nativeEvent is function, not object
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, 'target', {
            writable: true,
            value: {
                value,
                name
            }
        });
        onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values = range ? valueDerived.slice().sort(asc) : [
        valueDerived
    ];
    values = values.map((value)=>clamp(value, min, max)
    );
    const marks = marksProp === true && step !== null ? [
        ...Array(Math.floor((max - min) / step) + 1)
    ].map((_, index)=>({
            value: min + step * index
        })
    ) : marksProp || [];
    const marksValues = marks.map((mark)=>mark.value
    );
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(-1);
    const sliderRef = _react.useRef();
    const handleFocusRef = _utils.unstable_useForkRef(focusVisibleRef, sliderRef);
    const handleRef = _utils.unstable_useForkRef(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers)=>(event)=>{
            var _otherHandlers$onFocu;
            const index = Number(event.currentTarget.getAttribute('data-index'));
            handleFocusVisible(event);
            if (isFocusVisibleRef.current === true) setFocusVisible(index);
            setOpen(index);
            otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
        }
    ;
    const createHandleHiddenInputBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$onBlur;
            handleBlurVisible(event);
            if (isFocusVisibleRef.current === false) setFocusVisible(-1);
            setOpen(-1);
            otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
        }
    ;
    _utils.unstable_useEnhancedEffect(()=>{
        if (disabled && sliderRef.current.contains(document.activeElement)) {
            var _document$activeEleme;
            // This is necessary because Firefox and Safari will keep focus
            // on a disabled element:
            // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
            // @ts-ignore
            (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
        }
    }, [
        disabled
    ]);
    if (disabled && active !== -1) setActive(-1);
    if (disabled && focusVisible !== -1) setFocusVisible(-1);
    const createHandleHiddenInputChange = (otherHandlers)=>(event)=>{
            var _otherHandlers$onChan;
            (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
            const index = Number(event.currentTarget.getAttribute('data-index'));
            const value = values[index];
            const marksIndex = marksValues.indexOf(value); // @ts-ignore
            let newValue = event.target.valueAsNumber;
            if (marks && step == null) newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
            newValue = clamp(newValue, min, max);
            if (marks && step == null) {
                const currentMarkIndex = marksValues.indexOf(values[index]);
                newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
            }
            if (range) {
                // Bound the new value to the thumb's neighbours.
                if (disableSwap) newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
                const previousValue = newValue;
                newValue = setValueIndex({
                    values,
                    newValue,
                    index
                });
                let activeIndex = index; // Potentially swap the index if needed.
                if (!disableSwap) activeIndex = newValue.indexOf(previousValue);
                focusThumb({
                    sliderRef,
                    activeIndex
                });
            }
            setValueState(newValue);
            setFocusVisible(index);
            if (handleChange) handleChange(event, newValue, index);
            if (onChangeCommitted) onChangeCommitted(event, newValue);
        }
    ;
    const previousIndex = _react.useRef();
    let axis = orientation;
    if (isRtl && orientation === 'horizontal') axis += '-reverse';
    const getFingerNewValue = ({ finger , move =false , values: values2  })=>{
        const { current: slider  } = sliderRef;
        const { width , height , bottom , left  } = slider.getBoundingClientRect();
        let percent;
        if (axis.indexOf('vertical') === 0) percent = (bottom - finger.y) / height;
        else percent = (finger.x - left) / width;
        if (axis.indexOf('-reverse') !== -1) percent = 1 - percent;
        let newValue;
        newValue = percentToValue(percent, min, max);
        if (step) newValue = roundValueToStep(newValue, step, min);
        else {
            const closestIndex = findClosest(marksValues, newValue);
            newValue = marksValues[closestIndex];
        }
        newValue = clamp(newValue, min, max);
        let activeIndex = 0;
        if (range) {
            if (!move) activeIndex = findClosest(values2, newValue);
            else activeIndex = previousIndex.current;
             // Bound the new value to the thumb's neighbours.
            if (disableSwap) newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
            const previousValue = newValue;
            newValue = setValueIndex({
                values: values2,
                newValue,
                index: activeIndex
            }); // Potentially swap the index if needed.
            if (!(disableSwap && move)) {
                activeIndex = newValue.indexOf(previousValue);
                previousIndex.current = activeIndex;
            }
        }
        return {
            newValue,
            activeIndex
        };
    };
    const handleTouchMove = _utils.unstable_useEventCallback((nativeEvent)=>{
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) return;
        moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.
        // @ts-ignore buttons doesn't not exists on touch event
        if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            handleTouchEnd(nativeEvent);
            return;
        }
        const { newValue , activeIndex  } = getFingerNewValue({
            finger,
            move: true,
            values
        });
        focusThumb({
            sliderRef,
            activeIndex,
            setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) setDragging(true);
        if (handleChange) handleChange(nativeEvent, newValue, activeIndex);
    });
    const handleTouchEnd = _utils.unstable_useEventCallback((nativeEvent)=>{
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) return;
        const { newValue  } = getFingerNewValue({
            finger,
            values
        });
        setActive(-1);
        if (nativeEvent.type === 'touchend') setOpen(-1);
        if (onChangeCommitted) onChangeCommitted(nativeEvent, newValue);
        touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define
        stopListening();
    });
    const handleTouchStart = _utils.unstable_useEventCallback((nativeEvent)=>{
        if (disabled) return;
         // If touch-action: none; is not supported we need to prevent the scroll manually.
        if (!doesSupportTouchActionNone()) nativeEvent.preventDefault();
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) // A number that uniquely identifies the current finger in the touch session.
        touchId.current = touch.identifier;
        const finger = trackFinger(nativeEvent, touchId);
        if (finger !== false) {
            const { newValue , activeIndex  } = getFingerNewValue({
                finger,
                values
            });
            focusThumb({
                sliderRef,
                activeIndex,
                setActive
            });
            setValueState(newValue);
            if (handleChange) handleChange(nativeEvent, newValue, activeIndex);
        }
        moveCount.current = 0;
        const doc = _utils.unstable_ownerDocument(sliderRef.current);
        doc.addEventListener('touchmove', handleTouchMove);
        doc.addEventListener('touchend', handleTouchEnd);
    });
    const stopListening = _react.useCallback(()=>{
        const doc = _utils.unstable_ownerDocument(sliderRef.current);
        doc.removeEventListener('mousemove', handleTouchMove);
        doc.removeEventListener('mouseup', handleTouchEnd);
        doc.removeEventListener('touchmove', handleTouchMove);
        doc.removeEventListener('touchend', handleTouchEnd);
    }, [
        handleTouchEnd,
        handleTouchMove
    ]);
    _react.useEffect(()=>{
        const { current: slider  } = sliderRef;
        slider.addEventListener('touchstart', handleTouchStart, {
            passive: doesSupportTouchActionNone()
        });
        return ()=>{
            // @ts-ignore
            slider.removeEventListener('touchstart', handleTouchStart, {
                passive: doesSupportTouchActionNone()
            });
            stopListening();
        };
    }, [
        stopListening,
        handleTouchStart
    ]);
    _react.useEffect(()=>{
        if (disabled) stopListening();
    }, [
        disabled,
        stopListening
    ]);
    const createHandleMouseDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous;
            (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
            if (disabled) return;
            if (event.defaultPrevented) return;
             // Only handle left clicks
            if (event.button !== 0) return;
             // Avoid text selection
            event.preventDefault();
            const finger = trackFinger(event, touchId);
            if (finger !== false) {
                const { newValue , activeIndex  } = getFingerNewValue({
                    finger,
                    values
                });
                focusThumb({
                    sliderRef,
                    activeIndex,
                    setActive
                });
                setValueState(newValue);
                if (handleChange) handleChange(event, newValue, activeIndex);
            }
            moveCount.current = 0;
            const doc = _utils.unstable_ownerDocument(sliderRef.current);
            doc.addEventListener('mousemove', handleTouchMove);
            doc.addEventListener('mouseup', handleTouchEnd);
        }
    ;
    const trackOffset = valueToPercent(range ? values[0] : min, min, max);
    const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
    const getRootProps = (otherHandlers)=>{
        const ownEventHandlers = {
            onMouseDown: createHandleMouseDown(otherHandlers || {})
        };
        const mergedEventHandlers = _extendsDefault.default({}, otherHandlers, ownEventHandlers);
        return _extendsDefault.default({
            ref: handleRef
        }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous2;
            (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
            const index = Number(event.currentTarget.getAttribute('data-index'));
            setOpen(index);
        }
    ;
    const createHandleMouseLeave = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous3;
            (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
            setOpen(-1);
        }
    ;
    const getThumbProps = (otherHandlers)=>{
        const ownEventHandlers = {
            onMouseOver: createHandleMouseOver(otherHandlers || {}),
            onMouseLeave: createHandleMouseLeave(otherHandlers || {})
        };
        const mergedEventHandlers = _extendsDefault.default({}, otherHandlers, ownEventHandlers);
        return _extendsDefault.default({}, mergedEventHandlers);
    };
    const getHiddenInputProps = (otherHandlers)=>{
        const ownEventHandlers = {
            onChange: createHandleHiddenInputChange(otherHandlers || {}),
            onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
            onBlur: createHandleHiddenInputBlur(otherHandlers || {})
        };
        const mergedEventHandlers = _extendsDefault.default({}, otherHandlers, ownEventHandlers);
        return _extendsDefault.default({
            tabIndex,
            'aria-labelledby': ariaLabelledby,
            'aria-orientation': orientation,
            'aria-valuemax': scale(max),
            'aria-valuemin': scale(min),
            name,
            type: 'range',
            min: props.min,
            max: props.max,
            step: props.step,
            disabled
        }, mergedEventHandlers, {
            style: _extendsDefault.default({}, _utils.visuallyHidden, {
                direction: isRtl ? 'rtl' : 'ltr',
                // So that VoiceOver's focus indicator matches the thumb's dimensions
                width: '100%',
                height: '100%'
            })
        });
    };
    return {
        axis,
        axisProps,
        getRootProps,
        getHiddenInputProps,
        getThumbProps,
        dragging,
        marks,
        values,
        active,
        focusVisible,
        open,
        range,
        trackOffset,
        trackLeap
    };
}
exports.default = useSlider;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jWF6i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_switchUnstyledDefault.default
);
parcelHelpers.export(exports, "useSwitch", ()=>_useSwitchDefault.default
);
parcelHelpers.export(exports, "switchUnstyledClasses", ()=>_switchUnstyledClassesDefault.default
);
var _switchUnstyled = require("./SwitchUnstyled");
var _switchUnstyledDefault = parcelHelpers.interopDefault(_switchUnstyled);
parcelHelpers.exportAll(_switchUnstyled, exports);
var _useSwitch = require("./useSwitch");
var _useSwitchDefault = parcelHelpers.interopDefault(_useSwitch);
parcelHelpers.exportAll(_useSwitch, exports);
var _switchUnstyledClasses = require("./switchUnstyledClasses");
var _switchUnstyledClassesDefault = parcelHelpers.interopDefault(_switchUnstyledClasses);
parcelHelpers.exportAll(_switchUnstyledClasses, exports);

},{"./SwitchUnstyled":"jbnP6","./useSwitch":"4pYJ6","./switchUnstyledClasses":"jscTW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbnP6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _useSwitch = require("./useSwitch");
var _useSwitchDefault = parcelHelpers.interopDefault(_useSwitch);
var _switchUnstyledClasses = require("./switchUnstyledClasses");
var _switchUnstyledClassesDefault = parcelHelpers.interopDefault(_switchUnstyledClasses);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "checked",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultChecked",
    "disabled",
    "onBlur",
    "onChange",
    "onFocus",
    "onFocusVisible",
    "readOnly",
    "required"
];
/**
 * The foundation for building custom-styled switches.
 *
 * Demos:
 *
 * - [Switches](https://mui.com/components/switches/)
 *
 * API:
 *
 * - [SwitchUnstyled API](https://mui.com/api/switch-unstyled/)
 */ const SwitchUnstyled = /*#__PURE__*/ _react.forwardRef(function SwitchUnstyled(props, ref) {
    var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;
    const { checked: checkedProp , className , component , components ={} , componentsProps ={} , defaultChecked , disabled: disabledProp , onBlur , onChange , onFocus , onFocusVisible , readOnly: readOnlyProp  } = props, otherProps = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const useSwitchProps = {
        checked: checkedProp,
        defaultChecked,
        disabled: disabledProp,
        onBlur,
        onChange,
        onFocus,
        onFocusVisible,
        readOnly: readOnlyProp
    };
    const { getInputProps , checked , disabled , focusVisible , readOnly  } = _useSwitchDefault.default(useSwitchProps);
    const ownerState = _extendsDefault.default({}, props, {
        checked,
        disabled,
        focusVisible,
        readOnly
    });
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({}, otherProps, componentsProps.root), ownerState);
    const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
    const thumbProps = _appendOwnerStateDefault.default(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
    const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
    const inputProps = _appendOwnerStateDefault.default(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
    const Track = components.Track === null ? ()=>null
     : (_components$Track = components.Track) != null ? _components$Track : 'span';
    const trackProps = _appendOwnerStateDefault.default(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
    const stateClasses = _clsxDefault.default(checked && _switchUnstyledClassesDefault.default.checked, disabled && _switchUnstyledClassesDefault.default.disabled, focusVisible && _switchUnstyledClassesDefault.default.focusVisible, readOnly && _switchUnstyledClassesDefault.default.readOnly);
    return /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
        ref: ref
    }, rootProps, {
        className: _clsxDefault.default(_switchUnstyledClassesDefault.default.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Track, _extendsDefault.default({}, trackProps, {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.track, trackProps == null ? void 0 : trackProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Thumb, _extendsDefault.default({}, thumbProps, {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.thumb, thumbProps == null ? void 0 : thumbProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({}, getInputProps(inputProps), {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.input, inputProps == null ? void 0 : inputProps.className)
            }))
        ]
    }));
});
SwitchUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the component is checked.
   */ checked: _propTypesDefault.default.bool,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Switch.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Thumb: _propTypesDefault.default.elementType,
        Track: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.elementType,
            _propTypesDefault.default.oneOf([
                null
            ])
        ])
    }),
    /**
   * The props used for each slot inside the Switch.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object,
        thumb: _propTypesDefault.default.object,
        track: _propTypesDefault.default.object
    }),
    /**
   * The default checked state. Use when the component is not controlled.
   */ defaultChecked: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocusVisible: _propTypesDefault.default.func,
    /**
   * If `true`, the component is read only.
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   */ required: _propTypesDefault.default.bool
};
exports.default = SwitchUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","./useSwitch":"4pYJ6","./switchUnstyledClasses":"jscTW","../utils/appendOwnerState":"hedlX","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4pYJ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
function useSwitch(props) {
    const { checked: checkedProp , defaultChecked , disabled , onBlur , onChange , onFocus , onFocusVisible , readOnly , required  } = props;
    const [checked, setCheckedState] = _utils.unstable_useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'Switch',
        state: 'checked'
    });
    const handleInputChange = (event, otherHandler)=>{
        // Workaround for https://github.com/facebook/react/issues/9023
        if (event.nativeEvent.defaultPrevented) return;
        setCheckedState(event.target.checked);
        onChange == null || onChange(event);
        otherHandler == null || otherHandler(event);
    };
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useEffect(()=>{
        isFocusVisibleRef.current = focusVisible;
    }, [
        focusVisible,
        isFocusVisibleRef
    ]);
    const inputRef = _react.useRef(null);
    const handleFocus = (event, otherHandler)=>{
        // Fix for https://github.com/facebook/react/issues/7769
        if (!inputRef.current) inputRef.current = event.currentTarget;
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            onFocusVisible == null || onFocusVisible(event);
        }
        onFocus == null || onFocus(event);
        otherHandler == null || otherHandler(event);
    };
    const handleBlur = (event, otherHandler)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        onBlur == null || onBlur(event);
        otherHandler == null || otherHandler(event);
    };
    const handleRefChange = _utils.unstable_useForkRef(focusVisibleRef, inputRef);
    const getInputProps = (otherProps = {})=>_extendsDefault.default({
            checked: checkedProp,
            defaultChecked,
            disabled,
            readOnly,
            required,
            type: 'checkbox'
        }, otherProps, {
            onChange: (event)=>handleInputChange(event, otherProps.onChange)
            ,
            onFocus: (event)=>handleFocus(event, otherProps.onFocus)
            ,
            onBlur: (event)=>handleBlur(event, otherProps.onBlur)
            ,
            ref: handleRefChange
        })
    ;
    return {
        checked,
        disabled: Boolean(disabled),
        focusVisible,
        getInputProps,
        readOnly: Boolean(readOnly)
    };
}
exports.default = useSwitch;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jscTW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSwitchUnstyledUtilityClass", ()=>getSwitchUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getSwitchUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiSwitch', slot);
}
const switchUnstyledClasses = _generateUtilityClassesDefault.default('MuiSwitch', [
    'root',
    'input',
    'track',
    'thumb',
    'checked',
    'disabled',
    'focusVisible',
    'readOnly'
]);
exports.default = switchUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7v1F9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_tabPanelUnstyledDefault.default
);
parcelHelpers.export(exports, "tabPanelUnstyledClasses", ()=>_tabPanelUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useTabPanel", ()=>_useTabPanelDefault.default
);
var _tabPanelUnstyled = require("./TabPanelUnstyled");
var _tabPanelUnstyledDefault = parcelHelpers.interopDefault(_tabPanelUnstyled);
var _tabPanelUnstyledClasses = require("./tabPanelUnstyledClasses");
var _tabPanelUnstyledClassesDefault = parcelHelpers.interopDefault(_tabPanelUnstyledClasses);
parcelHelpers.exportAll(_tabPanelUnstyledClasses, exports);
var _useTabPanel = require("./useTabPanel");
var _useTabPanelDefault = parcelHelpers.interopDefault(_useTabPanel);
parcelHelpers.exportAll(_useTabPanel, exports);

},{"./TabPanelUnstyled":"bzSwY","./tabPanelUnstyledClasses":"jjVMv","./useTabPanel":"fl6v1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzSwY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("../utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _tabPanelUnstyledClasses = require("./tabPanelUnstyledClasses");
var _useTabPanel = require("./useTabPanel");
var _useTabPanelDefault = parcelHelpers.interopDefault(_useTabPanel);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "value",
    "components",
    "componentsProps",
    "component"
];
const useUtilityClasses = (ownerState)=>{
    const { hidden  } = ownerState;
    const slots = {
        root: [
            'root',
            hidden && 'hidden'
        ]
    };
    return _composeClassesDefault.default(slots, _tabPanelUnstyledClasses.getTabPanelUnstyledUtilityClass, {});
};
/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/components/tabs/)
 *
 * API:
 *
 * - [TabPanelUnstyled API](https://mui.com/api/tab-panel-unstyled/)
 */ const TabPanelUnstyled = /*#__PURE__*/ _react.forwardRef(function TabPanelUnstyled(props, ref) {
    var _ref, _componentsProps$root;
    const { children , className , components ={} , componentsProps ={} , component  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { hidden , getRootProps  } = _useTabPanelDefault.default(props);
    const ownerState = _extendsDefault.default({}, props, {
        hidden
    });
    const classes = useUtilityClasses(ownerState);
    const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const tabPanelRootProps = _utils.appendOwnerState(TabPanelRoot, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(TabPanelRoot, _extendsDefault.default({}, getRootProps(), {
        ref: ref,
        role: "tabpanel"
    }, tabPanelRootProps, {
        className: _clsxDefault.default(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
        children: !hidden && children
    }));
});
TabPanelUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the TabPanel.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the TabPanel.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]).isRequired
};
exports.default = TabPanelUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","../utils":"cgIce","../composeClasses":"2T3xi","./tabPanelUnstyledClasses":"jjVMv","./useTabPanel":"fl6v1","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjVMv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTabPanelUnstyledUtilityClass", ()=>getTabPanelUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getTabPanelUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('TabPanelUnstyled', slot);
}
const tabPanelUnstyledClasses = _generateUtilityClassesDefault.default('TabPanelUnstyled', [
    'root',
    'hidden'
]);
exports.default = tabPanelUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fl6v1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tabsUnstyled = require("../TabsUnstyled");
const useTabPanel = (props)=>{
    const { value  } = props;
    const context = _tabsUnstyled.useTabContext();
    if (context === null) throw new Error('No TabContext provided');
    const hidden = value !== context.value;
    const id = _tabsUnstyled.getPanelId(context, value);
    const tabId = _tabsUnstyled.getTabId(context, value);
    const getRootProps = ()=>{
        return {
            'aria-labelledby': tabId,
            hidden,
            id
        };
    };
    return {
        hidden,
        getRootProps
    };
};
exports.default = useTabPanel;

},{"../TabsUnstyled":"bCtat","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCtat":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_tabsUnstyledDefault.default
);
parcelHelpers.export(exports, "TabsContext", ()=>_tabsContextDefault.default
);
parcelHelpers.export(exports, "tabsUnstyledClasses", ()=>_tabsUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useTabs", ()=>_useTabsDefault.default
);
var _tabsUnstyled = require("./TabsUnstyled");
var _tabsUnstyledDefault = parcelHelpers.interopDefault(_tabsUnstyled);
var _tabsContext = require("./TabsContext");
var _tabsContextDefault = parcelHelpers.interopDefault(_tabsContext);
parcelHelpers.exportAll(_tabsContext, exports);
var _tabsUnstyledClasses = require("./tabsUnstyledClasses");
var _tabsUnstyledClassesDefault = parcelHelpers.interopDefault(_tabsUnstyledClasses);
parcelHelpers.exportAll(_tabsUnstyledClasses, exports);
var _useTabs = require("./useTabs");
var _useTabsDefault = parcelHelpers.interopDefault(_useTabs);
parcelHelpers.exportAll(_useTabs, exports);

},{"./TabsUnstyled":"jh9e4","./TabsContext":"ipnpy","./tabsUnstyledClasses":"lW66o","./useTabs":"jhxYH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jh9e4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("../utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _tabsUnstyledClasses = require("./tabsUnstyledClasses");
var _useTabs = require("./useTabs");
var _useTabsDefault = parcelHelpers.interopDefault(_useTabs);
var _tabsContext = require("./TabsContext");
var _tabsContextDefault = parcelHelpers.interopDefault(_tabsContext);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "value",
    "defaultValue",
    "orientation",
    "direction",
    "component",
    "components",
    "componentsProps",
    "onChange",
    "selectionFollowsFocus"
];
const useUtilityClasses = (ownerState)=>{
    const { orientation  } = ownerState;
    const slots = {
        root: [
            'root',
            orientation
        ]
    };
    return _composeClassesDefault.default(slots, _tabsUnstyledClasses.getTabsUnstyledUtilityClass, {});
};
/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/components/tabs/)
 *
 * API:
 *
 * - [TabsUnstyled API](https://mui.com/api/tabs-unstyled/)
 */ const TabsUnstyled = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var _ref, _componentsProps$root;
    const { children , className , orientation ='horizontal' , direction ='ltr' , component , components ={} , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { tabsContextValue , getRootProps  } = _useTabsDefault.default(props);
    const ownerState = _extendsDefault.default({}, props, {
        orientation,
        direction
    });
    const classes = useUtilityClasses(ownerState);
    const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const tabsRootProps = _utils.appendOwnerState(TabsRoot, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(TabsRoot, _extendsDefault.default({}, getRootProps(), tabsRootProps, {
        ref: ref,
        className: _clsxDefault.default(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
        children: /*#__PURE__*/ _jsxRuntime.jsx(_tabsContextDefault.default.Provider, {
            value: tabsContextValue,
            children: children
        })
    }));
});
TabsUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Tabs.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Tabs.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            false
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * The direction of the text.
   * @default 'ltr'
   */ direction: _propTypesDefault.default.oneOf([
        'ltr',
        'rtl'
    ]),
    /**
   * Callback invoked when new value is being set.
   */ onChange: _propTypesDefault.default.func,
    /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */ selectionFollowsFocus: _propTypesDefault.default.bool,
    /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `false`.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            false
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ])
};
exports.default = TabsUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","../utils":"cgIce","../composeClasses":"2T3xi","./tabsUnstyledClasses":"lW66o","./useTabs":"jhxYH","./TabsContext":"ipnpy","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lW66o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTabsUnstyledUtilityClass", ()=>getTabsUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getTabsUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('TabsUnstyled', slot);
}
const tabsUnstyledClasses = _generateUtilityClassesDefault.default('TabsUnstyled', [
    'root',
    'horizontal',
    'vertical'
]);
exports.default = tabsUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhxYH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _utils = require("@mui/utils");
const useTabs = (props)=>{
    const { value: valueProp , defaultValue , onChange , orientation , direction , selectionFollowsFocus  } = props;
    const [value, setValue] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Tabs',
        state: 'value'
    });
    const idPrefix = _utils.unstable_useId();
    const onSelected = _react.useCallback((e, newValue)=>{
        setValue(newValue);
        if (onChange) onChange(e, newValue);
    }, [
        onChange,
        setValue
    ]);
    const getRootProps = ()=>{
        return {};
    };
    const tabsContextValue = _react.useMemo(()=>{
        return {
            idPrefix,
            value,
            onSelected,
            orientation,
            direction,
            selectionFollowsFocus
        };
    }, [
        idPrefix,
        value,
        onSelected,
        orientation,
        direction,
        selectionFollowsFocus
    ]);
    return {
        getRootProps,
        tabsContextValue
    };
};
exports.default = useTabs;

},{"react":"21dqq","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ipnpy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @returns {unknown}
 */ parcelHelpers.export(exports, "useTabContext", ()=>useTabContext
);
parcelHelpers.export(exports, "getPanelId", ()=>getPanelId
);
parcelHelpers.export(exports, "getTabId", ()=>getTabId
);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const Context = /*#__PURE__*/ _react.createContext(null);
Context.displayName = 'TabsContext';
function useTabContext() {
    return _react.useContext(Context);
}
function getPanelId(context, value) {
    const { idPrefix  } = context;
    if (idPrefix === null) return null;
    return `${context.idPrefix}-P-${value}`;
}
function getTabId(context, value) {
    const { idPrefix  } = context;
    if (idPrefix === null) return null;
    return `${context.idPrefix}-T-${value}`;
}
exports.default = Context;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGLIZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_tabsListUnstyledDefault.default
);
parcelHelpers.export(exports, "tabsListUnstyledClasses", ()=>_tabsListUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useTabsList", ()=>_useTabsListDefault.default
);
var _tabsListUnstyled = require("./TabsListUnstyled");
var _tabsListUnstyledDefault = parcelHelpers.interopDefault(_tabsListUnstyled);
var _tabsListUnstyledClasses = require("./tabsListUnstyledClasses");
var _tabsListUnstyledClassesDefault = parcelHelpers.interopDefault(_tabsListUnstyledClasses);
parcelHelpers.exportAll(_tabsListUnstyledClasses, exports);
var _useTabsList = require("./useTabsList");
var _useTabsListDefault = parcelHelpers.interopDefault(_useTabsList);
parcelHelpers.exportAll(_useTabsList, exports);

},{"./TabsListUnstyled":"BOUNL","./tabsListUnstyledClasses":"2zmAW","./useTabsList":"7ROZt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BOUNL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _utils = require("../utils");
var _tabsListUnstyledClasses = require("./tabsListUnstyledClasses");
var _useTabsList = require("./useTabsList");
var _useTabsListDefault = parcelHelpers.interopDefault(_useTabsList);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "children",
    "component",
    "components",
    "componentsProps"
];
const useUtilityClasses = (ownerState)=>{
    const { orientation  } = ownerState;
    const slots = {
        root: [
            'root',
            orientation
        ]
    };
    return _composeClassesDefault.default(slots, _tabsListUnstyledClasses.getTabsListUnstyledUtilityClass, {});
};
/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/components/tabs/)
 *
 * API:
 *
 * - [TabsListUnstyled API](https://mui.com/api/tabs-list-unstyled/)
 */ const TabsListUnstyled = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var _ref, _componentsProps$root;
    const { className , component , components ={} , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { isRtl , orientation , getRootProps , processChildren  } = _useTabsListDefault.default(_extendsDefault.default({}, props, {
        ref
    }));
    const ownerState = _extendsDefault.default({}, props, {
        isRtl,
        orientation
    });
    const classes = useUtilityClasses(ownerState);
    const TabsListRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const tabsListRootProps = _utils.appendOwnerState(TabsListRoot, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    const processedChildren = processChildren();
    return /*#__PURE__*/ _jsxRuntime.jsx(TabsListRoot, _extendsDefault.default({}, getRootProps(), tabsListRootProps, {
        className: _clsxDefault.default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root),
        children: processedChildren
    }));
});
TabsListUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the TabsList.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the TabsList.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    })
};
exports.default = TabsListUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","../composeClasses":"2T3xi","../utils":"cgIce","./tabsListUnstyledClasses":"2zmAW","./useTabsList":"7ROZt","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zmAW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTabsListUnstyledUtilityClass", ()=>getTabsListUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getTabsListUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('TabsListUnstyled', slot);
}
const tabsListUnstyledClasses = _generateUtilityClassesDefault.default('TabsListUnstyled', [
    'root',
    'horizontal',
    'vertical'
]);
exports.default = tabsListUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ROZt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _reactIs = require("react-is");
var _tabsUnstyled = require("../TabsUnstyled");
var _extractEventHandlers = require("../utils/extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
const nextItem = (list, item)=>{
    if (!list) return null;
    if (list === item) return list.firstChild;
    if (item && item.nextElementSibling) return item.nextElementSibling;
    return list.firstChild;
};
const previousItem = (list, item)=>{
    if (!list) return null;
    if (list === item) return list.lastChild;
    if (item && item.previousElementSibling) return item.previousElementSibling;
    return list.lastChild;
};
const moveFocus = (list, currentFocus, traversalFunction)=>{
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);
    while(list && nextFocus){
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
            if (wrappedOnce) return;
            wrappedOnce = true;
        } // Same logic as useAutocomplete.js
        const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus);
        else {
            nextFocus.focus();
            return;
        }
    }
};
const useTabsList = (props)=>{
    const { 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledBy , children , ref  } = props;
    const tabsListRef = /*#__PURE__*/ _react.createRef();
    const handleRef = _utils.unstable_useForkRef(tabsListRef, ref);
    const context = _tabsUnstyled.useTabContext();
    if (context === null) throw new Error('No TabContext provided');
    const { value , orientation ='horizontal' , direction ='ltr'  } = context;
    const isRtl = direction === 'rtl';
    const handleKeyDown = (event)=>{
        const list = tabsListRef.current;
        const currentFocus = _utils.unstable_ownerDocument(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
        // though we might warn in the future about nested, interactive elements
        // as a a11y violation
        const role = currentFocus == null ? void 0 : currentFocus.getAttribute('role');
        if (role !== 'tab') return;
        let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
        let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
        if (orientation === 'horizontal' && isRtl) {
            // swap previousItemKey with nextItemKey
            previousItemKey = 'ArrowRight';
            nextItemKey = 'ArrowLeft';
        }
        switch(event.key){
            case previousItemKey:
                event.preventDefault();
                moveFocus(list, currentFocus, previousItem);
                break;
            case nextItemKey:
                event.preventDefault();
                moveFocus(list, currentFocus, nextItem);
                break;
            case 'Home':
                event.preventDefault();
                moveFocus(list, null, nextItem);
                break;
            case 'End':
                event.preventDefault();
                moveFocus(list, null, previousItem);
                break;
            default:
                break;
        }
    };
    const createHandleKeyDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyD;
            handleKeyDown(event);
            (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
        }
    ;
    const getRootProps = (otherHandlers)=>{
        const propsEventHandlers = _extractEventHandlersDefault.default(props);
        const externalEventHandlers = _extendsDefault.default({}, propsEventHandlers, otherHandlers);
        const ownEventHandlers = {
            onKeyDown: createHandleKeyDown(externalEventHandlers)
        };
        const mergedEventHandlers = _extendsDefault.default({}, externalEventHandlers, ownEventHandlers);
        return _extendsDefault.default({
            'aria-label': ariaLabel,
            'aria-labelledby': ariaLabelledBy,
            'aria-orientation': orientation === 'vertical' ? 'vertical' : null,
            role: 'tablist',
            ref: handleRef
        }, mergedEventHandlers);
    };
    const processChildren = _react.useCallback(()=>{
        const valueToIndex = new Map();
        let childIndex = 0;
        const processedChildren = _react.Children.map(children, (child)=>{
            if (!/*#__PURE__*/ _react.isValidElement(child)) return null;
            if (_reactIs.isFragment(child)) console.error([
                "MUI: The Tabs component doesn't accept a Fragment as a child.",
                'Consider providing an array instead.'
            ].join('\n'));
            const childValue = child.props.value === undefined ? childIndex : child.props.value;
            valueToIndex.set(childValue, childIndex);
            childIndex += 1;
            return /*#__PURE__*/ _react.cloneElement(child, _extendsDefault.default({
                value: childValue
            }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
                tabIndex: 0
            } : {
                tabIndex: -1
            }));
        });
        return processedChildren;
    }, [
        children,
        value
    ]);
    return {
        isRtl,
        orientation,
        value,
        processChildren,
        getRootProps
    };
};
exports.default = useTabsList;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","react-is":"7EuwB","../TabsUnstyled":"bCtat","../utils/extractEventHandlers":"iYj1L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8FAI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_tabUnstyledDefault.default
);
parcelHelpers.export(exports, "tabUnstyledClasses", ()=>_tabUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useTab", ()=>_useTabDefault.default
);
var _tabUnstyled = require("./TabUnstyled");
var _tabUnstyledDefault = parcelHelpers.interopDefault(_tabUnstyled);
var _tabUnstyledClasses = require("./tabUnstyledClasses");
var _tabUnstyledClassesDefault = parcelHelpers.interopDefault(_tabUnstyledClasses);
parcelHelpers.exportAll(_tabUnstyledClasses, exports);
var _useTab = require("./useTab");
var _useTabDefault = parcelHelpers.interopDefault(_useTab);
parcelHelpers.exportAll(_useTab, exports);

},{"./TabUnstyled":"45ijg","./tabUnstyledClasses":"3hF2a","./useTab":"iJiVA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45ijg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _tabUnstyledClasses = require("./tabUnstyledClasses");
var _useTab = require("./useTab");
var _useTabDefault = parcelHelpers.interopDefault(_useTab);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "action",
    "children",
    "value",
    "className",
    "disabled",
    "onChange",
    "onClick",
    "onFocus",
    "component",
    "components",
    "componentsProps"
];
const useUtilityClasses = (ownerState)=>{
    const { selected , disabled  } = ownerState;
    const slots = {
        root: [
            'root',
            selected && 'selected',
            disabled && 'disabled'
        ]
    };
    return _composeClassesDefault.default(slots, _tabUnstyledClasses.getTabUnstyledUtilityClass, {});
};
/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/components/tabs/)
 *
 * API:
 *
 * - [TabUnstyled API](https://mui.com/api/tab-unstyled/)
 */ const TabUnstyled = /*#__PURE__*/ _react.forwardRef(function TabUnstyled(props, ref) {
    var _ref, _componentsProps$root;
    const { action , children , className , disabled =false , component , components ={} , componentsProps ={}  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const tabRef = _react.useRef();
    const handleRef = _utils.unstable_useForkRef(tabRef, ref);
    const { active , focusVisible , setFocusVisible , selected , getRootProps  } = _useTabDefault.default(_extendsDefault.default({}, props, {
        ref: handleRef
    }));
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                tabRef.current.focus();
            }
        })
    , [
        setFocusVisible
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        active,
        focusVisible,
        disabled,
        selected
    });
    const classes = useUtilityClasses(ownerState);
    const TabRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const tabRootProps = _appendOwnerStateDefault.default(TabRoot, _extendsDefault.default({}, other, componentsProps.root), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(TabRoot, _extendsDefault.default({}, getRootProps(), tabRootProps, {
        className: _clsxDefault.default(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
        ref: ref,
        children: children
    }));
});
TabUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */ action: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.shape({
            current: _propTypesDefault.default.shape({
                focusVisible: _propTypesDefault.default.func.isRequired
            })
        })
    ]),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Tab.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Tab.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Callback invoked when new value is being set.
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * You can provide your own value. Otherwise, we fall back to the child position index.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ])
};
exports.default = TabUnstyled;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","../composeClasses":"2T3xi","../utils/appendOwnerState":"hedlX","./tabUnstyledClasses":"3hF2a","./useTab":"iJiVA","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hF2a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTabUnstyledUtilityClass", ()=>getTabUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getTabUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('TabUnstyled', slot);
}
const tabUnstyledClasses = _generateUtilityClassesDefault.default('TabUnstyled', [
    'root',
    'selected',
    'disabled'
]);
exports.default = tabUnstyledClasses;

},{"../generateUtilityClass":"81TS1","../generateUtilityClasses":"6i04V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJiVA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _tabsUnstyled = require("../TabsUnstyled");
var _buttonUnstyled = require("../ButtonUnstyled");
const _excluded = [
    "getRootProps"
];
const useTab = (props)=>{
    const { value: valueProp , onChange , onClick , onFocus  } = props;
    const _useButton = _buttonUnstyled.useButton(props), { getRootProps: getRootPropsButton  } = _useButton, otherButtonProps = _objectWithoutPropertiesLooseDefault.default(_useButton, _excluded);
    const context = _tabsUnstyled.useTabContext();
    if (context === null) throw new Error('No TabContext provided');
    const value = valueProp != null ? valueProp : 0;
    const selected = context.value === value;
    const selectionFollowsFocus = context.selectionFollowsFocus;
    const a11yAttributes = {
        role: 'tab',
        'aria-controls': _tabsUnstyled.getPanelId(context, value),
        id: _tabsUnstyled.getTabId(context, value),
        'aria-selected': selected,
        disabled: otherButtonProps.disabled
    };
    const handleFocus = (event)=>{
        if (selectionFollowsFocus && !selected) {
            if (onChange) onChange(event, value);
            context.onSelected(event, value);
        }
        if (onFocus) onFocus(event);
    };
    const handleClick = (event)=>{
        if (!selected) {
            if (onChange) onChange(event, value);
            context.onSelected(event, value);
        }
        if (onClick) onClick(event);
    };
    const getRootProps = (otherHandlers)=>{
        const buttonResolvedProps = getRootPropsButton(_extendsDefault.default({
            onClick: handleClick,
            onFocus: handleFocus
        }, otherHandlers));
        return _extendsDefault.default({}, buttonResolvedProps, a11yAttributes);
    };
    return _extendsDefault.default({
        getRootProps
    }, otherButtonProps, {
        selected
    });
};
exports.default = useTab;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","../TabsUnstyled":"bCtat","../ButtonUnstyled":"jqfJm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5eQzh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_textareaAutosizeDefault.default
);
var _textareaAutosize = require("./TextareaAutosize");
var _textareaAutosizeDefault = parcelHelpers.interopDefault(_textareaAutosize);

},{"./TextareaAutosize":"4iPph","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iPph":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onChange",
    "maxRows",
    "minRows",
    "style",
    "value"
];
function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
}
const styles = {
    shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
    }
};
const TextareaAutosize = /*#__PURE__*/ _react.forwardRef(function TextareaAutosize(props, ref) {
    const { onChange , maxRows , minRows =1 , style , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { current: isControlled  } = _react.useRef(value != null);
    const inputRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(ref, inputRef);
    const shadowRef = _react.useRef(null);
    const renders = _react.useRef(0);
    const [state, setState] = _react.useState({});
    const syncHeight = _react.useCallback(()=>{
        const input = inputRef.current;
        const containerWindow = _utils.unstable_ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.
        if (computedStyle.width === '0px') return;
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';
        if (inputShallow.value.slice(-1) === '\n') // Certain fonts which overflow the line height will cause the textarea
        // to report a different scrollHeight depending on whether the last line
        // is empty. Make it non-empty to avoid this issue.
        inputShallow.value += ' ';
        const boxSizing = computedStyle['box-sizing'];
        const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content
        const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row
        inputShallow.value = 'x';
        const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content
        let outerHeight = innerHeight;
        if (minRows) outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        if (maxRows) outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.
        const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        setState((prevState)=>{
            // Need a large enough difference to update the height.
            // This prevents infinite rendering loop.
            if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
                renders.current += 1;
                return {
                    overflow,
                    outerHeightStyle
                };
            }
            if (renders.current === 20) console.error([
                'MUI: Too many re-renders. The layout is unstable.',
                'TextareaAutosize limits the number of renders to prevent an infinite loop.'
            ].join('\n'));
            return prevState;
        });
    }, [
        maxRows,
        minRows,
        props.placeholder
    ]);
    _react.useEffect(()=>{
        const handleResize = _utils.unstable_debounce(()=>{
            renders.current = 0;
            syncHeight();
        });
        const containerWindow = _utils.unstable_ownerWindow(inputRef.current);
        containerWindow.addEventListener('resize', handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== 'undefined') {
            resizeObserver = new ResizeObserver(handleResize);
            resizeObserver.observe(inputRef.current);
        }
        return ()=>{
            handleResize.clear();
            containerWindow.removeEventListener('resize', handleResize);
            if (resizeObserver) resizeObserver.disconnect();
        };
    }, [
        syncHeight
    ]);
    _utils.unstable_useEnhancedEffect(()=>{
        syncHeight();
    });
    _react.useEffect(()=>{
        renders.current = 0;
    }, [
        value
    ]);
    const handleChange = (event)=>{
        renders.current = 0;
        if (!isControlled) syncHeight();
        if (onChange) onChange(event);
    };
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("textarea", _extendsDefault.default({
                value: value,
                onChange: handleChange,
                ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
                ,
                rows: minRows,
                style: _extendsDefault.default({
                    height: state.outerHeightStyle,
                    // Need a large enough difference to allow scrolling.
                    // This prevents infinite rendering loop.
                    overflow: state.overflow ? 'hidden' : null
                }, style)
            }, other)),
            /*#__PURE__*/ _jsxRuntime.jsx("textarea", {
                "aria-hidden": true,
                className: props.className,
                readOnly: true,
                ref: shadowRef,
                tabIndex: -1,
                style: _extendsDefault.default({}, styles.shadow, style, {
                    padding: 0
                })
            })
        ]
    });
});
TextareaAutosize.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Maximum number of rows to display.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display.
   * @default 1
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ placeholder: _propTypesDefault.default.string,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * @ignore
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ])
};
exports.default = TextareaAutosize;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iyuIG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function createMixins(breakpoints, spacing, mixins) {
    return _extendsDefault.default({
        toolbar: {
            minHeight: 56,
            [`${breakpoints.up('xs')} and (orientation: landscape)`]: {
                minHeight: 48
            },
            [breakpoints.up('sm')]: {
                minHeight: 64
            }
        }
    }, mixins);
}
exports.default = createMixins;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fipky":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "light", ()=>light
);
parcelHelpers.export(exports, "dark", ()=>dark
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _system = require("@mui/system");
var _common = require("../colors/common");
var _commonDefault = parcelHelpers.interopDefault(_common);
var _grey = require("../colors/grey");
var _greyDefault = parcelHelpers.interopDefault(_grey);
var _purple = require("../colors/purple");
var _purpleDefault = parcelHelpers.interopDefault(_purple);
var _red = require("../colors/red");
var _redDefault = parcelHelpers.interopDefault(_red);
var _orange = require("../colors/orange");
var _orangeDefault = parcelHelpers.interopDefault(_orange);
var _blue = require("../colors/blue");
var _blueDefault = parcelHelpers.interopDefault(_blue);
var _lightBlue = require("../colors/lightBlue");
var _lightBlueDefault = parcelHelpers.interopDefault(_lightBlue);
var _green = require("../colors/green");
var _greenDefault = parcelHelpers.interopDefault(_green);
const _excluded = [
    "mode",
    "contrastThreshold",
    "tonalOffset"
];
const light = {
    // The colors used to style the text.
    text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.6)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
        paper: _commonDefault.default.white,
        default: _commonDefault.default.white
    },
    // The colors used to style the action elements.
    action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
    }
};
const dark = {
    text: {
        primary: _commonDefault.default.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
        paper: '#121212',
        default: '#121212'
    },
    action: {
        active: _commonDefault.default.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
    }
};
function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) intent[direction] = intent[shade];
        else if (direction === 'light') intent.light = _system.lighten(intent.main, tonalOffsetLight);
        else if (direction === 'dark') intent.dark = _system.darken(intent.main, tonalOffsetDark);
    }
}
function getDefaultPrimary(mode = 'light') {
    if (mode === 'dark') return {
        main: _blueDefault.default[200],
        light: _blueDefault.default[50],
        dark: _blueDefault.default[400]
    };
    return {
        main: _blueDefault.default[700],
        light: _blueDefault.default[400],
        dark: _blueDefault.default[800]
    };
}
function getDefaultSecondary(mode = 'light') {
    if (mode === 'dark') return {
        main: _purpleDefault.default[200],
        light: _purpleDefault.default[50],
        dark: _purpleDefault.default[400]
    };
    return {
        main: _purpleDefault.default[500],
        light: _purpleDefault.default[300],
        dark: _purpleDefault.default[700]
    };
}
function getDefaultError(mode = 'light') {
    if (mode === 'dark') return {
        main: _redDefault.default[500],
        light: _redDefault.default[300],
        dark: _redDefault.default[700]
    };
    return {
        main: _redDefault.default[700],
        light: _redDefault.default[400],
        dark: _redDefault.default[800]
    };
}
function getDefaultInfo(mode = 'light') {
    if (mode === 'dark') return {
        main: _lightBlueDefault.default[400],
        light: _lightBlueDefault.default[300],
        dark: _lightBlueDefault.default[700]
    };
    return {
        main: _lightBlueDefault.default[700],
        light: _lightBlueDefault.default[500],
        dark: _lightBlueDefault.default[900]
    };
}
function getDefaultSuccess(mode = 'light') {
    if (mode === 'dark') return {
        main: _greenDefault.default[400],
        light: _greenDefault.default[300],
        dark: _greenDefault.default[700]
    };
    return {
        main: _greenDefault.default[800],
        light: _greenDefault.default[500],
        dark: _greenDefault.default[900]
    };
}
function getDefaultWarning(mode = 'light') {
    if (mode === 'dark') return {
        main: _orangeDefault.default[400],
        light: _orangeDefault.default[300],
        dark: _orangeDefault.default[700]
    };
    return {
        main: '#ed6c02',
        // closest to orange[800] that pass 3:1.
        light: _orangeDefault.default[500],
        dark: _orangeDefault.default[900]
    };
}
function createPalette(palette) {
    const { mode ='light' , contrastThreshold =3 , tonalOffset =0.2  } = palette, other = _objectWithoutPropertiesLooseDefault.default(palette, _excluded);
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    function getContrastText(background) {
        const contrastText = _system.getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        {
            const contrast = _system.getContrastRatio(background, contrastText);
            if (contrast < 3) console.error([
                `MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`,
                'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',
                'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'
            ].join('\n'));
        }
        return contrastText;
    }
    const augmentColor = ({ color , name , mainShade =500 , lightShade =300 , darkShade =700  })=>{
        color = _extendsDefault.default({}, color);
        if (!color.main && color[mainShade]) color.main = color[mainShade];
        if (!color.hasOwnProperty('main')) throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
        if (typeof color.main !== 'string') throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });`);
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) color.contrastText = getContrastText(color.main);
        return color;
    };
    const modes = {
        dark,
        light
    };
    if (!modes[mode]) console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    const paletteOutput = _utils.deepmerge(_extendsDefault.default({
        common: // A collection of common colors.
        _commonDefault.default,
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
            color: primary,
            name: 'primary'
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
            color: secondary,
            name: 'secondary',
            mainShade: 'A400',
            lightShade: 'A200',
            darkShade: 'A700'
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
            color: error,
            name: 'error'
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
            color: warning,
            name: 'warning'
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
            color: info,
            name: 'info'
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
            color: success,
            name: 'success'
        }),
        grey: // The grey colors.
        _greyDefault.default,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
}
exports.default = createPalette;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","@mui/system":"Q0Zql","../colors/common":"bwTuH","../colors/grey":"lwTx7","../colors/purple":"f3Uf0","../colors/red":"6mRcQ","../colors/orange":"9tiLD","../colors/blue":"3u97j","../colors/lightBlue":"f81LW","../colors/green":"kH9Ro","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwTuH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const common = {
    black: '#000',
    white: '#fff'
};
exports.default = common;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwTx7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#f5f5f5',
    A200: '#eeeeee',
    A400: '#bdbdbd',
    A700: '#616161'
};
exports.default = grey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f3Uf0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const purple = {
    50: '#f3e5f5',
    100: '#e1bee7',
    200: '#ce93d8',
    300: '#ba68c8',
    400: '#ab47bc',
    500: '#9c27b0',
    600: '#8e24aa',
    700: '#7b1fa2',
    800: '#6a1b9a',
    900: '#4a148c',
    A100: '#ea80fc',
    A200: '#e040fb',
    A400: '#d500f9',
    A700: '#aa00ff'
};
exports.default = purple;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mRcQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000'
};
exports.default = red;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tiLD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const orange = {
    50: '#fff3e0',
    100: '#ffe0b2',
    200: '#ffcc80',
    300: '#ffb74d',
    400: '#ffa726',
    500: '#ff9800',
    600: '#fb8c00',
    700: '#f57c00',
    800: '#ef6c00',
    900: '#e65100',
    A100: '#ffd180',
    A200: '#ffab40',
    A400: '#ff9100',
    A700: '#ff6d00'
};
exports.default = orange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3u97j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const blue = {
    50: '#e3f2fd',
    100: '#bbdefb',
    200: '#90caf9',
    300: '#64b5f6',
    400: '#42a5f5',
    500: '#2196f3',
    600: '#1e88e5',
    700: '#1976d2',
    800: '#1565c0',
    900: '#0d47a1',
    A100: '#82b1ff',
    A200: '#448aff',
    A400: '#2979ff',
    A700: '#2962ff'
};
exports.default = blue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f81LW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const lightBlue = {
    50: '#e1f5fe',
    100: '#b3e5fc',
    200: '#81d4fa',
    300: '#4fc3f7',
    400: '#29b6f6',
    500: '#03a9f4',
    600: '#039be5',
    700: '#0288d1',
    800: '#0277bd',
    900: '#01579b',
    A100: '#80d8ff',
    A200: '#40c4ff',
    A400: '#00b0ff',
    A700: '#0091ea'
};
exports.default = lightBlue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kH9Ro":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const green = {
    50: '#e8f5e9',
    100: '#c8e6c9',
    200: '#a5d6a7',
    300: '#81c784',
    400: '#66bb6a',
    500: '#4caf50',
    600: '#43a047',
    700: '#388e3c',
    800: '#2e7d32',
    900: '#1b5e20',
    A100: '#b9f6ca',
    A200: '#69f0ae',
    A400: '#00e676',
    A700: '#00c853'
};
exports.default = green;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnwpF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
const _excluded = [
    "fontFamily",
    "fontSize",
    "fontWeightLight",
    "fontWeightRegular",
    "fontWeightMedium",
    "fontWeightBold",
    "htmlFontSize",
    "allVariants",
    "pxToRem"
];
function round(value) {
    return Math.round(value * 100000) / 100000;
}
const caseAllCaps = {
    textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(palette, typography) {
    const _ref = typeof typography === 'function' ? typography(palette) : typography, { fontFamily =defaultFontFamily , // The default font size of the Material Specification.
    fontSize =14 , // px
    fontWeightLight =300 , fontWeightRegular =400 , fontWeightMedium =500 , fontWeightBold =700 , // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize =16 , // Apply the CSS properties to all the variants.
    allVariants , pxToRem: pxToRem2  } = _ref, other = _objectWithoutPropertiesLooseDefault.default(_ref, _excluded);
    if (typeof fontSize !== 'number') console.error('MUI: `fontSize` is required to be a number.');
    if (typeof htmlFontSize !== 'number') console.error('MUI: `htmlFontSize` is required to be a number.');
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size)=>`${size / htmlFontSize * coef}rem`
    );
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing)=>_extendsDefault.default({
            fontFamily,
            fontWeight,
            fontSize: pxToRem(size),
            // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
            lineHeight
        }, fontFamily === defaultFontFamily ? {
            letterSpacing: `${round(letterSpacing / size)}em`
        } : {}, casing, allVariants)
    ;
    const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return _utils.deepmerge(_extendsDefault.default({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
    }, variants), other, {
        clone: false // No need to clone deep
    });
}
exports.default = createTypography;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"icWyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
    return [
        `${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`,
        `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`,
        `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`
    ].join(',');
} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = [
    'none',
    createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0),
    createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0),
    createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0),
    createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
    createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
    createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
    createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
    createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
    createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
    createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
    createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
    createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
    createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
    createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
    createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
    createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
    createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
    createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
    createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
    createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
    createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
    createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
    createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
    createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)
];
exports.default = shadows;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b8o6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easing", ()=>easing
);
parcelHelpers.export(exports, "duration", ()=>duration
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const _excluded = [
    "duration",
    "easing",
    "delay"
];
const easing = {
    // This is the most common easing curve.
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
};
function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
    if (!height) return 0;
    const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
    const mergedEasing = _extendsDefault.default({}, easing, inputTransitions.easing);
    const mergedDuration = _extendsDefault.default({}, duration, inputTransitions.duration);
    const create = (props = [
        'all'
    ], options = {})=>{
        const { duration: durationOption = mergedDuration.standard , easing: easingOption = mergedEasing.easeInOut , delay =0  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
        {
            const isString = (value)=>typeof value === 'string'
            ; // IE11 support, replace with Number.isNaN
            // eslint-disable-next-line no-restricted-globals
            const isNumber = (value)=>!isNaN(parseFloat(value))
            ;
            if (!isString(props) && !Array.isArray(props)) console.error('MUI: Argument "props" must be a string or Array.');
            if (!isNumber(durationOption) && !isString(durationOption)) console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            if (!isString(easingOption)) console.error('MUI: Argument "easing" must be a string.');
            if (!isNumber(delay) && !isString(delay)) console.error('MUI: Argument "delay" must be a number or a string.');
            if (Object.keys(other).length !== 0) console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
        }
        return (Array.isArray(props) ? props : [
            props
        ]).map((animatedProp)=>`${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`
        ).join(',');
    };
    return _extendsDefault.default({
        getAutoHeightDuration,
        create
    }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
    });
}
exports.default = createTransitions;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gjLc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// We need to centralize the zIndex definitions as they work
// like global values in the browser.
const zIndex = {
    mobileStepper: 1000,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
};
exports.default = zIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7KyVI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
function createMuiStrictModeTheme(options, ...args) {
    return _createThemeDefault.default(_utils.deepmerge({
        unstable_strictMode: true
    }, options), ...args);
}
exports.default = createMuiStrictModeTheme;

},{"@mui/utils":"cttLn","./createTheme":"8OdgZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RoRm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let warnedOnce = false; // To remove in v6
function createStyles(styles) {
    if (!warnedOnce) {
        console.warn([
            'MUI: createStyles from @mui/material/styles is deprecated.',
            'Please use @mui/styles/createStyles'
        ].join('\n'));
        warnedOnce = true;
    }
    return styles;
}
exports.default = createStyles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWtOa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isUnitless", ()=>isUnitless
) // Ported from Compass
;
// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
// Emulate the sass function "unit"
parcelHelpers.export(exports, "getUnit", ()=>getUnit
) // Emulate the sass function "unitless"
;
parcelHelpers.export(exports, "toUnitless", ()=>toUnitless
) // Convert any CSS <length> or <percentage> value to any another.
;
// From https://github.com/KyleAMathews/convert-css-length
parcelHelpers.export(exports, "convertLength", ()=>convertLength
);
parcelHelpers.export(exports, "alignProperty", ()=>alignProperty
) // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
;
// lineHeight falls under a x pixels grid, 4px in the case of Material Design,
// without changing the relative line height
parcelHelpers.export(exports, "fontGrid", ()=>fontGrid
);
/**
 * generate a responsive version of a given CSS property
 * @example
 * responsiveProperty({
 *   cssProperty: 'fontSize',
 *   min: 15,
 *   max: 20,
 *   unit: 'px',
 *   breakpoints: [300, 600],
 * })
 *
 * // this returns
 *
 * {
 *   fontSize: '15px',
 *   '@media (min-width:300px)': {
 *     fontSize: '17.5px',
 *   },
 *   '@media (min-width:600px)': {
 *     fontSize: '20px',
 *   },
 * }
 * @param {Object} params
 * @param {string} params.cssProperty - The CSS property to be made responsive
 * @param {number} params.min - The smallest value of the CSS property
 * @param {number} params.max - The largest value of the CSS property
 * @param {string} [params.unit] - The unit to be used for the CSS property
 * @param {Array.number} [params.breakpoints]  - An array of breakpoints
 * @param {number} [params.alignStep] - Round scaled value to fall under this grid
 * @returns {Object} responsive styles for {params.cssProperty}
 */ parcelHelpers.export(exports, "responsiveProperty", ()=>responsiveProperty
);
function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
}
function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
}
function toUnitless(length) {
    return parseFloat(length);
}
function convertLength(baseFontSize) {
    return (length, toUnit)=>{
        const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.
        if (fromUnit === toUnit) return length;
         // Convert input length to pixels.
        let pxLength = toUnitless(length);
        if (fromUnit !== 'px') {
            if (fromUnit === 'em') pxLength = toUnitless(length) * toUnitless(baseFontSize);
            else if (fromUnit === 'rem') pxLength = toUnitless(length) * toUnitless(baseFontSize);
        } // Convert length in pixels to the output unit
        let outputLength = pxLength;
        if (toUnit !== 'px') {
            if (toUnit === 'em') outputLength = pxLength / toUnitless(baseFontSize);
            else if (toUnit === 'rem') outputLength = pxLength / toUnitless(baseFontSize);
            else return length;
        }
        return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
}
function alignProperty({ size , grid  }) {
    const sizeBelow = size - size % grid;
    const sizeAbove = sizeBelow + grid;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
}
function fontGrid({ lineHeight , pixels , htmlFontSize  }) {
    return pixels / (lineHeight * htmlFontSize);
}
function responsiveProperty({ cssProperty , min , max , unit ='rem' , breakpoints =[
    600,
    900,
    1200
] , transform =null  }) {
    const output = {
        [cssProperty]: `${min}${unit}`
    };
    const factor = (max - min) / breakpoints[breakpoints.length - 1];
    breakpoints.forEach((breakpoint)=>{
        let value = min + factor * breakpoint;
        if (transform !== null) value = transform(value);
        output[`@media (min-width:${breakpoint}px)`] = {
            [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`
        };
    });
    return output;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kACKQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@mui/utils");
var _cssUtils = require("./cssUtils");
function responsiveFontSizes(themeInput, options = {}) {
    const { breakpoints =[
        'sm',
        'md',
        'lg'
    ] , disableAlign =false , factor =2 , variants =[
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'subtitle1',
        'subtitle2',
        'body1',
        'body2',
        'caption',
        'button',
        'overline'
    ]  } = options;
    const theme = _extendsDefault.default({}, themeInput);
    theme.typography = _extendsDefault.default({}, theme.typography);
    const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem
    // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
    const convert = _cssUtils.convertLength(typography.htmlFontSize);
    const breakpointValues = breakpoints.map((x)=>theme.breakpoints.values[x]
    );
    variants.forEach((variant)=>{
        const style = typography[variant];
        const remFontSize = parseFloat(convert(style.fontSize, 'rem'));
        if (remFontSize <= 1) return;
        const maxFontSize = remFontSize;
        const minFontSize = 1 + (maxFontSize - 1) / factor;
        let { lineHeight  } = style;
        if (!_cssUtils.isUnitless(lineHeight) && !disableAlign) throw new Error(`MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.`);
        if (!_cssUtils.isUnitless(lineHeight)) // make it unitless
        lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
        let transform = null;
        if (!disableAlign) transform = (value)=>_cssUtils.alignProperty({
                size: value,
                grid: _cssUtils.fontGrid({
                    pixels: 4,
                    lineHeight,
                    htmlFontSize: typography.htmlFontSize
                })
            })
        ;
        typography[variant] = _extendsDefault.default({}, style, _cssUtils.responsiveProperty({
            cssProperty: 'fontSize',
            min: minFontSize,
            max: maxFontSize,
            unit: 'rem',
            breakpoints: breakpointValues,
            transform
        }));
    });
    return theme;
}
exports.default = responsiveFontSizes;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/utils":"cttLn","./cssUtils":"lWtOa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5nWMX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
function useTheme() {
    const theme = _system.useTheme(_defaultThemeDefault.default);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useDebugValue(theme);
    return theme;
}
exports.default = useTheme;

},{"react":"21dqq","@mui/system":"Q0Zql","./defaultTheme":"goiH2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"goiH2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
const defaultTheme = _createThemeDefault.default();
exports.default = defaultTheme;

},{"./createTheme":"8OdgZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dewuS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
function useThemeProps({ props , name  }) {
    return _system.useThemeProps({
        props,
        name,
        defaultTheme: _defaultThemeDefault.default
    });
}
exports.default = useThemeProps;

},{"@mui/system":"Q0Zql","./defaultTheme":"goiH2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32xTg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rootShouldForwardProp", ()=>rootShouldForwardProp
);
parcelHelpers.export(exports, "slotShouldForwardProp", ()=>slotShouldForwardProp
);
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
const rootShouldForwardProp = (prop)=>_system.shouldForwardProp(prop) && prop !== 'classes'
;
const slotShouldForwardProp = _system.shouldForwardProp;
const styled = _system.createStyled({
    defaultTheme: _defaultThemeDefault.default,
    rootShouldForwardProp
});
exports.default = styled;

},{"@mui/system":"Q0Zql","./defaultTheme":"goiH2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79jUJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_system.ThemeProvider
);
var _system = require("@mui/system");

},{"@mui/system":"Q0Zql","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkwLQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function makeStyles() {
    throw new Error(`MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.`);
}
exports.default = makeStyles;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4y1OS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function withStyles() {
    throw new Error(`MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.`);
}
exports.default = withStyles;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7tzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function withTheme() {
    throw new Error(`MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.`);
}
exports.default = withTheme;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eRYsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_cssBaselineDefault.default
);
var _cssBaseline = require("./CssBaseline");
var _cssBaselineDefault = parcelHelpers.interopDefault(_cssBaseline);

},{"./CssBaseline":"kiiIA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kiiIA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "html", ()=>html
);
parcelHelpers.export(exports, "body", ()=>body
);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _globalStyles = require("../GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);
var _jsxRuntime = require("react/jsx-runtime");
const html = (theme, enableColorScheme)=>_extendsDefault.default({
        WebkitFontSmoothing: 'antialiased',
        // Antialiasing.
        MozOsxFontSmoothing: 'grayscale',
        // Antialiasing.
        // Change from `box-sizing: content-box` so that `width`
        // is not affected by `padding` or `border`.
        boxSizing: 'border-box',
        // Fix font resize problem in iOS
        WebkitTextSizeAdjust: '100%'
    }, enableColorScheme && {
        colorScheme: theme.palette.mode
    })
;
const body = (theme)=>_extendsDefault.default({
        color: theme.palette.text.primary
    }, theme.typography.body1, {
        backgroundColor: theme.palette.background.default,
        '@media print': {
            // Save printer ink.
            backgroundColor: theme.palette.common.white
        }
    })
;
const styles = (theme, enableColorScheme = false)=>{
    var _theme$components, _theme$components$Mui;
    let defaultStyles = {
        html: html(theme, enableColorScheme),
        '*, *::before, *::after': {
            boxSizing: 'inherit'
        },
        'strong, b': {
            fontWeight: theme.typography.fontWeightBold
        },
        body: _extendsDefault.default({
            margin: 0
        }, body(theme), {
            // Add support for document.body.requestFullScreen().
            // Other elements, if background transparent, are not supported.
            '&::backdrop': {
                backgroundColor: theme.palette.background.default
            }
        })
    };
    const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;
    if (themeOverrides) defaultStyles = [
        defaultStyles,
        themeOverrides
    ];
    return defaultStyles;
};
/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */ function CssBaseline(inProps) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiCssBaseline'
    });
    const { children , enableColorScheme =false  } = props;
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_globalStylesDefault.default, {
                styles: (theme)=>styles(theme, enableColorScheme)
            }),
            children
        ]
    });
}
CssBaseline.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * You can wrap a node.
   */ children: _propTypesDefault.default.node,
    /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */ enableColorScheme: _propTypesDefault.default.bool
};
exports.default = CssBaseline;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","../styles/useThemeProps":"dewuS","../GlobalStyles":"iDS8U","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDS8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_globalStylesDefault.default
);
var _globalStyles = require("./GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);

},{"./GlobalStyles":"io7SJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"io7SJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _system = require("@mui/system");
var _defaultTheme = require("../styles/defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
var _jsxRuntime = require("react/jsx-runtime");
function GlobalStyles(props) {
    return /*#__PURE__*/ _jsxRuntime.jsx(_system.GlobalStyles, _extendsDefault.default({}, props, {
        defaultTheme: _defaultThemeDefault.default
    }));
}
GlobalStyles.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The styles you want to apply globally.
   */ styles: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.number,
        _propTypesDefault.default.object,
        _propTypesDefault.default.shape({
            __emotion_styles: _propTypesDefault.default.any.isRequired
        }),
        _propTypesDefault.default.string,
        _propTypesDefault.default.bool
    ])
};
exports.default = GlobalStyles;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/system":"Q0Zql","../styles/defaultTheme":"goiH2","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLHNH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toolkit = require("@reduxjs/toolkit");
var _vaults = require("./vaults");
var _vaultsDefault = parcelHelpers.interopDefault(_vaults);
var _dialogs = require("./dialogs");
var _dialogsDefault = parcelHelpers.interopDefault(_dialogs);
var _user = require("./user");
var _userDefault = parcelHelpers.interopDefault(_user);
const store = _toolkit.configureStore({
    reducer: {
        vaults: _vaultsDefault.default,
        dialogs: _dialogsDefault.default,
        user: _userDefault.default
    },
    middleware: (getDefaultMiddleware)=>getDefaultMiddleware({
            serializableCheck: {
                // Ignore these action types
                ignoredActions: [
                    "vaults/setCurrent",
                    "vaults/loadVaults/pending",
                    "vaults/loadVaults/fulfilled",
                    "vaults/loadVaults/rejected",
                    "vaults/create/pending",
                    "vaults/create/fulfilled",
                    "vaults/create/rejected",
                    "vaults/lockAll/pending",
                    "vaults/lockAll/fulfilled",
                    "vaults/lockAll/rejected",
                    "vaults/createNewSecureNote/pending",
                    "vaults/createNewSecureNote/fulfilled",
                    "vaults/createNewSecureNote/rejected",
                    "vaults/createNewAccountPassword/pending",
                    "vaults/createNewAccountPassword/fulfilled",
                    "vaults/createNewAccountPassword/rejected",
                    "vaults/createNewCredentials/pending",
                    "vaults/createNewCredentials/fulfilled",
                    "vaults/createNewCredentials/rejected",
                    "vaults/createNewFileUpload/pending",
                    "vaults/createNewFileUpload/fulfilled",
                    "vaults/createNewFileUpload/rejected", 
                ],
                // Ignore these field paths in all actions
                ignoredActionPaths: [],
                // Ignore these paths in the state
                ignoredPaths: [
                    "vaults"
                ]
            }
        })
});
exports.default = store;

},{"@reduxjs/toolkit":"lL1Ef","./vaults":"3zSpK","./dialogs":"3qJjA","./user":"dzJ1K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lL1Ef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MiddlewareArray", ()=>MiddlewareArray
);
parcelHelpers.export(exports, "TaskAbortError", ()=>TaskAbortError
);
parcelHelpers.export(exports, "addListener", ()=>addListener
);
parcelHelpers.export(exports, "clearAllListeners", ()=>clearAllListeners
);
parcelHelpers.export(exports, "configureStore", ()=>configureStore
);
parcelHelpers.export(exports, "createAction", ()=>createAction
);
parcelHelpers.export(exports, "createAsyncThunk", ()=>createAsyncThunk
);
parcelHelpers.export(exports, "createDraftSafeSelector", ()=>createDraftSafeSelector
);
parcelHelpers.export(exports, "createEntityAdapter", ()=>createEntityAdapter
);
parcelHelpers.export(exports, "createImmutableStateInvariantMiddleware", ()=>createImmutableStateInvariantMiddleware
);
parcelHelpers.export(exports, "createListenerMiddleware", ()=>createListenerMiddleware
);
parcelHelpers.export(exports, "createNextState", ()=>_immerDefault.default
);
parcelHelpers.export(exports, "createReducer", ()=>createReducer
);
parcelHelpers.export(exports, "createSelector", ()=>_reselect.createSelector
);
parcelHelpers.export(exports, "createSerializableStateInvariantMiddleware", ()=>createSerializableStateInvariantMiddleware
);
parcelHelpers.export(exports, "createSlice", ()=>createSlice
);
parcelHelpers.export(exports, "current", ()=>_immer.current
);
parcelHelpers.export(exports, "findNonSerializableValue", ()=>findNonSerializableValue
);
parcelHelpers.export(exports, "freeze", ()=>_immer.freeze
);
parcelHelpers.export(exports, "getDefaultMiddleware", ()=>getDefaultMiddleware
);
parcelHelpers.export(exports, "getType", ()=>getType
);
parcelHelpers.export(exports, "isAllOf", ()=>isAllOf
);
parcelHelpers.export(exports, "isAnyOf", ()=>isAnyOf
);
parcelHelpers.export(exports, "isAsyncThunkAction", ()=>isAsyncThunkAction
);
parcelHelpers.export(exports, "isDraft", ()=>_immer.isDraft
);
parcelHelpers.export(exports, "isFulfilled", ()=>isFulfilled
);
parcelHelpers.export(exports, "isImmutableDefault", ()=>isImmutableDefault
);
parcelHelpers.export(exports, "isPending", ()=>isPending
);
parcelHelpers.export(exports, "isPlain", ()=>isPlain
);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
parcelHelpers.export(exports, "isRejected", ()=>isRejected
);
parcelHelpers.export(exports, "isRejectedWithValue", ()=>isRejectedWithValue
);
parcelHelpers.export(exports, "miniSerializeError", ()=>miniSerializeError
);
parcelHelpers.export(exports, "nanoid", ()=>nanoid
);
parcelHelpers.export(exports, "original", ()=>_immer.original
);
parcelHelpers.export(exports, "removeListener", ()=>removeListener
);
parcelHelpers.export(exports, "unwrapResult", ()=>unwrapResult
);
// src/index.ts
var _immer = require("immer");
var _immerDefault = parcelHelpers.interopDefault(_immer);
var _reselect = require("reselect");
// src/configureStore.ts
var _redux = require("redux");
// src/getDefaultMiddleware.ts
var _reduxThunk = require("redux-thunk");
var _reduxThunkDefault = parcelHelpers.interopDefault(_reduxThunk);
parcelHelpers.exportAll(_redux, exports);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __spreadArray = undefined && undefined.__spreadArray || function(to, from) {
    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
    return to;
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function(obj, key, value) {
    return key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value
    }) : obj[key] = value;
};
var __spreadValues = function(a, b) {
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for(var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++){
        var prop = _c[_i];
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = function(a, b) {
    return __defProps(a, __getOwnPropDescs(b));
};
var __async = function(__this, __arguments, generator) {
    return new Promise(function(resolve, reject) {
        var fulfilled = function(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        };
        var rejected = function(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        };
        var step = function(x) {
            return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
        };
        step((generator = generator.apply(__this, __arguments)).next());
    });
};
var createDraftSafeSelector = function() {
    var args = [];
    for(var _i1 = 0; _i1 < arguments.length; _i1++)args[_i1] = arguments[_i1];
    var selector = _reselect.createSelector.apply(void 0, args);
    var wrappedSelector = function(value) {
        var rest = [];
        for(var _i = 1; _i < arguments.length; _i++)rest[_i - 1] = arguments[_i];
        return selector.apply(void 0, __spreadArray([
            _immer.isDraft(value) ? _immer.current(value) : value
        ], rest));
    };
    return wrappedSelector;
};
var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0) return void 0;
    if (typeof arguments[0] === "object") return _redux.compose;
    return _redux.compose.apply(null, arguments);
};
var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop2) {
        return noop2;
    };
};
// src/isPlainObject.ts
function isPlainObject(value) {
    if (typeof value !== "object" || value === null) return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null) return true;
    var baseProto = proto;
    while(Object.getPrototypeOf(baseProto) !== null)baseProto = Object.getPrototypeOf(baseProto);
    return proto === baseProto;
}
// src/utils.ts
function getTimeMeasureUtils(maxDelay, fnName) {
    var elapsed = 0;
    return {
        measureTime: function(fn) {
            var started = Date.now();
            try {
                return fn();
            } finally{
                var finished = Date.now();
                elapsed += finished - started;
            }
        },
        warnIfExceeded: function() {
            if (elapsed > maxDelay) console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
        }
    };
}
var MiddlewareArray = /** @class */ function(_super) {
    __extends(MiddlewareArray1, _super);
    function MiddlewareArray1() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var _this = _super.apply(this, args) || this;
        Object.setPrototypeOf(_this, MiddlewareArray1.prototype);
        return _this;
    }
    Object.defineProperty(MiddlewareArray1, Symbol.species, {
        get: function() {
            return MiddlewareArray1;
        },
        enumerable: false,
        configurable: true
    });
    MiddlewareArray1.prototype.concat = function() {
        var arr = [];
        for(var _i = 0; _i < arguments.length; _i++)arr[_i] = arguments[_i];
        return _super.prototype.concat.apply(this, arr);
    };
    MiddlewareArray1.prototype.prepend = function() {
        var arr = [];
        for(var _i = 0; _i < arguments.length; _i++)arr[_i] = arguments[_i];
        if (arr.length === 1 && Array.isArray(arr[0])) return new (MiddlewareArray1.bind.apply(MiddlewareArray1, __spreadArray([
            void 0
        ], arr[0].concat(this))))();
        return new (MiddlewareArray1.bind.apply(MiddlewareArray1, __spreadArray([
            void 0
        ], arr.concat(this))))();
    };
    return MiddlewareArray1;
}(Array);
// src/immutableStateInvariantMiddleware.ts
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    throw new Error(prefix + ": " + (message || ""));
}
function stringify(obj, serializer, indent, decycler) {
    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
}
function getSerialize(serializer, decycler) {
    var stack = [], keys = [];
    if (!decycler) decycler = function(_, value) {
        if (stack[0] === value) return "[Circular ~]";
        return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
    };
    return function(key, value) {
        if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
            if (~stack.indexOf(value)) value = decycler.call(this, key, value);
        } else stack.push(value);
        return serializer == null ? value : serializer.call(this, key, value);
    };
}
function isImmutableDefault(value) {
    return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
}
function trackForMutations(isImmutable, ignorePaths, obj) {
    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
    return {
        detectMutations: function() {
            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
        }
    };
}
function trackProperties(isImmutable, ignorePaths, obj, path) {
    if (ignorePaths === void 0) ignorePaths = [];
    if (path === void 0) path = "";
    var tracked = {
        value: obj
    };
    if (!isImmutable(obj)) {
        tracked.children = {};
        for(var key in obj){
            var childPath = path ? path + "." + key : key;
            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) continue;
            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
        }
    }
    return tracked;
}
function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
    if (ignorePaths === void 0) ignorePaths = [];
    if (sameParentRef === void 0) sameParentRef = false;
    if (path === void 0) path = "";
    var prevObj = trackedProperty ? trackedProperty.value : void 0;
    var sameRef = prevObj === obj;
    if (sameParentRef && !sameRef && !Number.isNaN(obj)) return {
        wasMutated: true,
        path: path
    };
    if (isImmutable(prevObj) || isImmutable(obj)) return {
        wasMutated: false
    };
    var keysToDetect = {};
    for(var key in trackedProperty.children)keysToDetect[key] = true;
    for(var key in obj)keysToDetect[key] = true;
    for(var key in keysToDetect){
        var childPath = path ? path + "." + key : key;
        if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) continue;
        var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
        if (result.wasMutated) return result;
    }
    return {
        wasMutated: false
    };
}
function createImmutableStateInvariantMiddleware(options) {
    if (options === void 0) options = {};
    var next1, action1;
    var _c1 = options.isImmutable, isImmutable = _c1 === void 0 ? isImmutableDefault : _c1, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
    ignoredPaths = ignoredPaths || ignore;
    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return function(_c) {
        var getState = _c.getState;
        var state = getState();
        var tracker = track(state);
        var result;
        return function(next) {
            return function(action) {
                var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
                measureUtils.measureTime(function() {
                    state = getState();
                    result = tracker.detectMutations();
                    tracker = track(state);
                    invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
                });
                var dispatchedAction = next(action);
                measureUtils.measureTime(function() {
                    state = getState();
                    result = tracker.detectMutations();
                    tracker = track(state);
                    result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
                });
                measureUtils.warnIfExceeded();
                return dispatchedAction;
            };
        };
    };
}
// src/serializableStateInvariantMiddleware.ts
function isPlain(val) {
    var type = typeof val;
    return type === "undefined" || val === null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject(val);
}
function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
    if (path === void 0) path = "";
    if (isSerializable === void 0) isSerializable = isPlain;
    if (ignoredPaths === void 0) ignoredPaths = [];
    var foundNestedSerializable;
    if (!isSerializable(value)) return {
        keyPath: path || "<root>",
        value: value
    };
    if (typeof value !== "object" || value === null) return false;
    var entries = getEntries != null ? getEntries(value) : Object.entries(value);
    var hasIgnoredPaths = ignoredPaths.length > 0;
    for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){
        var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];
        var nestedPath = path ? path + "." + key : key;
        if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) continue;
        if (!isSerializable(nestedValue)) return {
            keyPath: nestedPath,
            value: nestedValue
        };
        if (typeof nestedValue === "object") {
            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
            if (foundNestedSerializable) return foundNestedSerializable;
        }
    }
    return false;
}
function createSerializableStateInvariantMiddleware(options) {
    if (options === void 0) options = {};
    var next2, action2;
    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? [
        "meta.arg",
        "meta.baseQueryMeta"
    ] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j;
    return function(storeAPI) {
        return function(next) {
            return function(action) {
                var result = next(action);
                var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
                if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) measureUtils.measureTime(function() {
                    var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);
                    if (foundActionNonSerializableValue) {
                        var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
                        console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
                    }
                });
                if (!ignoreState) {
                    measureUtils.measureTime(function() {
                        var state = storeAPI.getState();
                        var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);
                        if (foundStateNonSerializableValue) {
                            var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
                            console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
                        }
                    });
                    measureUtils.warnIfExceeded();
                }
                return result;
            };
        };
    };
}
// src/getDefaultMiddleware.ts
function isBoolean(x) {
    return typeof x === "boolean";
}
function curryGetDefaultMiddleware() {
    return function curriedGetDefaultMiddleware(options) {
        return getDefaultMiddleware(options);
    };
}
function getDefaultMiddleware(options) {
    if (options === void 0) options = {};
    var _c = options.thunk, thunk = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e;
    var middlewareArray = new MiddlewareArray();
    if (thunk) {
        if (isBoolean(thunk)) middlewareArray.push(_reduxThunkDefault.default);
        else middlewareArray.push(_reduxThunkDefault.default.withExtraArgument(thunk.extraArgument));
    }
    if (immutableCheck) {
        var immutableOptions = {};
        if (!isBoolean(immutableCheck)) immutableOptions = immutableCheck;
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
    }
    if (serializableCheck) {
        var serializableOptions = {};
        if (!isBoolean(serializableCheck)) serializableOptions = serializableCheck;
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
    }
    return middlewareArray;
}
// src/configureStore.ts
var IS_PRODUCTION = false;
function configureStore(options) {
    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
    var rootReducer;
    if (typeof reducer === "function") rootReducer = reducer;
    else if (isPlainObject(reducer)) rootReducer = _redux.combineReducers(reducer);
    else throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
    var finalMiddleware = middleware;
    if (typeof finalMiddleware === "function") {
        finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) throw new Error("when using a middleware builder function, an array of middleware must be returned");
    }
    if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
        return typeof item !== "function";
    })) throw new Error("each middleware provided to configureStore must be a function");
    var middlewareEnhancer = _redux.applyMiddleware.apply(void 0, finalMiddleware);
    var finalCompose = _redux.compose;
    if (devTools) finalCompose = composeWithDevTools(__spreadValues({
        trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
    var storeEnhancers = [
        middlewareEnhancer
    ];
    if (Array.isArray(enhancers)) storeEnhancers = __spreadArray([
        middlewareEnhancer
    ], enhancers);
    else if (typeof enhancers === "function") storeEnhancers = enhancers(storeEnhancers);
    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
    return _redux.createStore(rootReducer, preloadedState, composedEnhancer);
}
// src/createAction.ts
function createAction(type, prepareAction) {
    function actionCreator() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (prepareAction) {
            var prepared = prepareAction.apply(void 0, args);
            if (!prepared) throw new Error("prepareAction did not return an object");
            return __spreadValues(__spreadValues({
                type: type,
                payload: prepared.payload
            }, "meta" in prepared && {
                meta: prepared.meta
            }), "error" in prepared && {
                error: prepared.error
            });
        }
        return {
            type: type,
            payload: args[0]
        };
    }
    actionCreator.toString = function() {
        return "" + type;
    };
    actionCreator.type = type;
    actionCreator.match = function(action) {
        return action.type === type;
    };
    return actionCreator;
}
function isFSA(action) {
    return isPlainObject(action) && typeof action.type === "string" && Object.keys(action).every(isValidKey);
}
function isValidKey(key) {
    return [
        "type",
        "payload",
        "error",
        "meta"
    ].indexOf(key) > -1;
}
function getType(actionCreator) {
    return "" + actionCreator;
}
// src/mapBuilders.ts
function executeReducerBuilderCallback(builderCallback) {
    var actionsMap = {};
    var actionMatchers = [];
    var defaultCaseReducer;
    var builder = {
        addCase: function(typeOrActionCreator, reducer) {
            if (actionMatchers.length > 0) throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
            if (defaultCaseReducer) throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
            var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
            if (type in actionsMap) throw new Error("addCase cannot be called with two reducers for the same action type");
            actionsMap[type] = reducer;
            return builder;
        },
        addMatcher: function(matcher, reducer) {
            if (defaultCaseReducer) throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
            actionMatchers.push({
                matcher: matcher,
                reducer: reducer
            });
            return builder;
        },
        addDefaultCase: function(reducer) {
            if (defaultCaseReducer) throw new Error("`builder.addDefaultCase` can only be called once");
            defaultCaseReducer = reducer;
            return builder;
        }
    };
    builderCallback(builder);
    return [
        actionsMap,
        actionMatchers,
        defaultCaseReducer
    ];
}
// src/createReducer.ts
function isStateFunction(x) {
    return typeof x === "function";
}
function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
    if (actionMatchers === void 0) actionMatchers = [];
    var _c2 = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [
        mapOrBuilderCallback,
        actionMatchers,
        defaultCaseReducer
    ], actionsMap = _c2[0], finalActionMatchers = _c2[1], finalDefaultCaseReducer = _c2[2];
    var getInitialState;
    if (isStateFunction(initialState)) getInitialState = function() {
        return _immerDefault.default(initialState(), function() {});
    };
    else {
        var frozenInitialState_1 = _immerDefault.default(initialState, function() {});
        getInitialState = function() {
            return frozenInitialState_1;
        };
    }
    function reducer(state, action) {
        if (state === void 0) state = getInitialState();
        var caseReducers = __spreadArray([
            actionsMap[action.type]
        ], finalActionMatchers.filter(function(_c) {
            var matcher = _c.matcher;
            return matcher(action);
        }).map(function(_c) {
            var reducer2 = _c.reducer;
            return reducer2;
        }));
        if (caseReducers.filter(function(cr) {
            return !!cr;
        }).length === 0) caseReducers = [
            finalDefaultCaseReducer
        ];
        return caseReducers.reduce(function(previousState, caseReducer) {
            if (caseReducer) {
                if (_immer.isDraft(previousState)) {
                    var draft = previousState;
                    var result = caseReducer(draft, action);
                    if (typeof result === "undefined") return previousState;
                    return result;
                } else if (!_immer.isDraftable(previousState)) {
                    var result = caseReducer(previousState, action);
                    if (typeof result === "undefined") {
                        if (previousState === null) return previousState;
                        throw Error("A case reducer on a non-draftable value must not return undefined");
                    }
                    return result;
                } else return _immerDefault.default(previousState, function(draft) {
                    return caseReducer(draft, action);
                });
            }
            return previousState;
        }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
}
// src/createSlice.ts
function getType2(slice, actionKey) {
    return slice + "/" + actionKey;
}
function createSlice(options) {
    var name = options.name;
    if (!name) throw new Error("`name` is a required option for createSlice");
    var initialState = typeof options.initialState == "function" ? options.initialState : _immerDefault.default(options.initialState, function() {});
    var reducers = options.reducers || {};
    var reducerNames = Object.keys(reducers);
    var sliceCaseReducersByName = {};
    var sliceCaseReducersByType = {};
    var actionCreators = {};
    reducerNames.forEach(function(reducerName) {
        var maybeReducerWithPrepare = reducers[reducerName];
        var type = getType2(name, reducerName);
        var caseReducer;
        var prepareCallback;
        if ("reducer" in maybeReducerWithPrepare) {
            caseReducer = maybeReducerWithPrepare.reducer;
            prepareCallback = maybeReducerWithPrepare.prepare;
        } else caseReducer = maybeReducerWithPrepare;
        sliceCaseReducersByName[reducerName] = caseReducer;
        sliceCaseReducersByType[type] = caseReducer;
        actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
    });
    function buildReducer() {
        var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [
            options.extraReducers
        ], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
        var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
        return createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
    }
    var _reducer;
    return {
        name: name,
        reducer: function(state, action) {
            if (!_reducer) _reducer = buildReducer();
            return _reducer(state, action);
        },
        actions: actionCreators,
        caseReducers: sliceCaseReducersByName,
        getInitialState: function() {
            if (!_reducer) _reducer = buildReducer();
            return _reducer.getInitialState();
        }
    };
}
// src/entities/entity_state.ts
function getInitialEntityState() {
    return {
        ids: [],
        entities: {}
    };
}
function createInitialStateFactory() {
    function getInitialState(additionalState) {
        if (additionalState === void 0) additionalState = {};
        return Object.assign(getInitialEntityState(), additionalState);
    }
    return {
        getInitialState: getInitialState
    };
}
// src/entities/state_selectors.ts
function createSelectorsFactory() {
    function getSelectors(selectState) {
        var selectIds = function(state) {
            return state.ids;
        };
        var selectEntities = function(state) {
            return state.entities;
        };
        var selectAll = createDraftSafeSelector(selectIds, selectEntities, function(ids, entities) {
            return ids.map(function(id) {
                return entities[id];
            });
        });
        var selectId = function(_, id) {
            return id;
        };
        var selectById = function(entities, id) {
            return entities[id];
        };
        var selectTotal = createDraftSafeSelector(selectIds, function(ids) {
            return ids.length;
        });
        if (!selectState) return {
            selectIds: selectIds,
            selectEntities: selectEntities,
            selectAll: selectAll,
            selectTotal: selectTotal,
            selectById: createDraftSafeSelector(selectEntities, selectId, selectById)
        };
        var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);
        return {
            selectIds: createDraftSafeSelector(selectState, selectIds),
            selectEntities: selectGlobalizedEntities,
            selectAll: createDraftSafeSelector(selectState, selectAll),
            selectTotal: createDraftSafeSelector(selectState, selectTotal),
            selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)
        };
    }
    return {
        getSelectors: getSelectors
    };
}
function createSingleArgumentStateOperator(mutator) {
    var operator = createStateOperator(function(_, state) {
        return mutator(state);
    });
    return function operation(state) {
        return operator(state, void 0);
    };
}
function createStateOperator(mutator) {
    return function operation(state, arg) {
        function isPayloadActionArgument(arg2) {
            return isFSA(arg2);
        }
        var runMutator = function(draft) {
            if (isPayloadActionArgument(arg)) mutator(arg.payload, draft);
            else mutator(arg, draft);
        };
        if (_immer.isDraft(state)) {
            runMutator(state);
            return state;
        } else return _immerDefault.default(state, runMutator);
    };
}
// src/entities/utils.ts
function selectIdValue(entity, selectId) {
    var key = selectId(entity);
    if (key === void 0) console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", entity, "The `selectId` implementation:", selectId.toString());
    return key;
}
function ensureEntitiesArray(entities) {
    if (!Array.isArray(entities)) entities = Object.values(entities);
    return entities;
}
function splitAddedUpdatedEntities(newEntities, selectId, state) {
    newEntities = ensureEntitiesArray(newEntities);
    var added = [];
    var updated = [];
    for(var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++){
        var entity = newEntities_1[_i];
        var id = selectIdValue(entity, selectId);
        if (id in state.entities) updated.push({
            id: id,
            changes: entity
        });
        else added.push(entity);
    }
    return [
        added,
        updated
    ];
}
// src/entities/unsorted_state_adapter.ts
function createUnsortedStateAdapter(selectId) {
    function addOneMutably(entity, state) {
        var key = selectIdValue(entity, selectId);
        if (key in state.entities) return;
        state.ids.push(key);
        state.entities[key] = entity;
    }
    function addManyMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        for(var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++){
            var entity = newEntities_2[_i];
            addOneMutably(entity, state);
        }
    }
    function setOneMutably(entity, state) {
        var key = selectIdValue(entity, selectId);
        if (!(key in state.entities)) state.ids.push(key);
        state.entities[key] = entity;
    }
    function setManyMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        for(var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++){
            var entity = newEntities_3[_i];
            setOneMutably(entity, state);
        }
    }
    function setAllMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        state.ids = [];
        state.entities = {};
        addManyMutably(newEntities, state);
    }
    function removeOneMutably(key, state) {
        return removeManyMutably([
            key
        ], state);
    }
    function removeManyMutably(keys, state) {
        var didMutate = false;
        keys.forEach(function(key) {
            if (key in state.entities) {
                delete state.entities[key];
                didMutate = true;
            }
        });
        if (didMutate) state.ids = state.ids.filter(function(id) {
            return id in state.entities;
        });
    }
    function removeAllMutably(state) {
        Object.assign(state, {
            ids: [],
            entities: {}
        });
    }
    function takeNewKey(keys, update, state) {
        var original2 = state.entities[update.id];
        var updated = Object.assign({}, original2, update.changes);
        var newKey = selectIdValue(updated, selectId);
        var hasNewKey = newKey !== update.id;
        if (hasNewKey) {
            keys[update.id] = newKey;
            delete state.entities[update.id];
        }
        state.entities[newKey] = updated;
        return hasNewKey;
    }
    function updateOneMutably(update, state) {
        return updateManyMutably([
            update
        ], state);
    }
    function updateManyMutably(updates, state) {
        var newKeys = {};
        var updatesPerEntity = {};
        updates.forEach(function(update) {
            if (update.id in state.entities) updatesPerEntity[update.id] = {
                id: update.id,
                changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)
            };
        });
        updates = Object.values(updatesPerEntity);
        var didMutateEntities = updates.length > 0;
        if (didMutateEntities) {
            var didMutateIds = updates.filter(function(update) {
                return takeNewKey(newKeys, update, state);
            }).length > 0;
            if (didMutateIds) state.ids = state.ids.map(function(id) {
                return newKeys[id] || id;
            });
        }
    }
    function upsertOneMutably(entity, state) {
        return upsertManyMutably([
            entity
        ], state);
    }
    function upsertManyMutably(newEntities, state) {
        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];
        updateManyMutably(updated, state);
        addManyMutably(added, state);
    }
    return {
        removeAll: createSingleArgumentStateOperator(removeAllMutably),
        addOne: createStateOperator(addOneMutably),
        addMany: createStateOperator(addManyMutably),
        setOne: createStateOperator(setOneMutably),
        setMany: createStateOperator(setManyMutably),
        setAll: createStateOperator(setAllMutably),
        updateOne: createStateOperator(updateOneMutably),
        updateMany: createStateOperator(updateManyMutably),
        upsertOne: createStateOperator(upsertOneMutably),
        upsertMany: createStateOperator(upsertManyMutably),
        removeOne: createStateOperator(removeOneMutably),
        removeMany: createStateOperator(removeManyMutably)
    };
}
// src/entities/sorted_state_adapter.ts
function createSortedStateAdapter(selectId, sort) {
    var _c3 = createUnsortedStateAdapter(selectId), removeOne = _c3.removeOne, removeMany = _c3.removeMany, removeAll = _c3.removeAll;
    function addOneMutably(entity, state) {
        return addManyMutably([
            entity
        ], state);
    }
    function addManyMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        var models = newEntities.filter(function(model) {
            return !(selectIdValue(model, selectId) in state.entities);
        });
        if (models.length !== 0) merge(models, state);
    }
    function setOneMutably(entity, state) {
        return setManyMutably([
            entity
        ], state);
    }
    function setManyMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        if (newEntities.length !== 0) merge(newEntities, state);
    }
    function setAllMutably(newEntities, state) {
        newEntities = ensureEntitiesArray(newEntities);
        state.entities = {};
        state.ids = [];
        addManyMutably(newEntities, state);
    }
    function updateOneMutably(update, state) {
        return updateManyMutably([
            update
        ], state);
    }
    function takeUpdatedModel(models, update, state) {
        if (!(update.id in state.entities)) return false;
        var original2 = state.entities[update.id];
        var updated = Object.assign({}, original2, update.changes);
        var newKey = selectIdValue(updated, selectId);
        delete state.entities[update.id];
        models.push(updated);
        return newKey !== update.id;
    }
    function updateManyMutably(updates, state) {
        var models = [];
        updates.forEach(function(update) {
            return takeUpdatedModel(models, update, state);
        });
        if (models.length !== 0) merge(models, state);
    }
    function upsertOneMutably(entity, state) {
        return upsertManyMutably([
            entity
        ], state);
    }
    function upsertManyMutably(newEntities, state) {
        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];
        updateManyMutably(updated, state);
        addManyMutably(added, state);
    }
    function areArraysEqual(a, b) {
        if (a.length !== b.length) return false;
        for(var i = 0; i < a.length && i < b.length; i++){
            if (a[i] === b[i]) continue;
            return false;
        }
        return true;
    }
    function merge(models, state) {
        models.forEach(function(model) {
            state.entities[selectId(model)] = model;
        });
        var allEntities = Object.values(state.entities);
        allEntities.sort(sort);
        var newSortedIds = allEntities.map(selectId);
        var ids = state.ids;
        if (!areArraysEqual(ids, newSortedIds)) state.ids = newSortedIds;
    }
    return {
        removeOne: removeOne,
        removeMany: removeMany,
        removeAll: removeAll,
        addOne: createStateOperator(addOneMutably),
        updateOne: createStateOperator(updateOneMutably),
        upsertOne: createStateOperator(upsertOneMutably),
        setOne: createStateOperator(setOneMutably),
        setMany: createStateOperator(setManyMutably),
        setAll: createStateOperator(setAllMutably),
        addMany: createStateOperator(addManyMutably),
        updateMany: createStateOperator(updateManyMutably),
        upsertMany: createStateOperator(upsertManyMutably)
    };
}
// src/entities/create_adapter.ts
function createEntityAdapter(options) {
    if (options === void 0) options = {};
    var _c = __spreadValues({
        sortComparer: false,
        selectId: function(instance) {
            return instance.id;
        }
    }, options), selectId = _c.selectId, sortComparer = _c.sortComparer;
    var stateFactory = createInitialStateFactory();
    var selectorsFactory = createSelectorsFactory();
    var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);
    return __spreadValues(__spreadValues(__spreadValues({
        selectId: selectId,
        sortComparer: sortComparer
    }, stateFactory), selectorsFactory), stateAdapter);
}
// src/nanoid.ts
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = function(size) {
    if (size === void 0) size = 21;
    var id = "";
    var i = size;
    while(i--)id += urlAlphabet[Math.random() * 64 | 0];
    return id;
};
// src/createAsyncThunk.ts
var commonProperties = [
    "name",
    "message",
    "stack",
    "code"
];
var RejectWithValue = /** @class */ function() {
    function RejectWithValue1(payload, meta) {
        this.payload = payload;
        this.meta = meta;
    }
    return RejectWithValue1;
}();
var FulfillWithMeta = /** @class */ function() {
    function FulfillWithMeta1(payload, meta) {
        this.payload = payload;
        this.meta = meta;
    }
    return FulfillWithMeta1;
}();
var miniSerializeError = function(value) {
    if (typeof value === "object" && value !== null) {
        var simpleError = {};
        for(var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++){
            var property = commonProperties_1[_i];
            if (typeof value[property] === "string") simpleError[property] = value[property];
        }
        return simpleError;
    }
    return {
        message: String(value)
    };
};
function createAsyncThunk(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function(payload, requestId, arg, meta) {
        return {
            payload: payload,
            meta: __spreadProps(__spreadValues({}, meta || {}), {
                arg: arg,
                requestId: requestId,
                requestStatus: "fulfilled"
            })
        };
    });
    var pending = createAction(typePrefix + "/pending", function(requestId, arg, meta) {
        return {
            payload: void 0,
            meta: __spreadProps(__spreadValues({}, meta || {}), {
                arg: arg,
                requestId: requestId,
                requestStatus: "pending"
            })
        };
    });
    var rejected = createAction(typePrefix + "/rejected", function(error, requestId, arg, payload, meta) {
        return {
            payload: payload,
            error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
            meta: __spreadProps(__spreadValues({}, meta || {}), {
                arg: arg,
                requestId: requestId,
                rejectedWithValue: !!payload,
                requestStatus: "rejected",
                aborted: (error == null ? void 0 : error.name) === "AbortError",
                condition: (error == null ? void 0 : error.name) === "ConditionError"
            })
        };
    });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : /** @class */ function() {
        function class_1() {
            this.signal = {
                aborted: false,
                addEventListener: function() {},
                dispatchEvent: function() {
                    return false;
                },
                onabort: function() {},
                removeEventListener: function() {}
            };
        }
        class_1.prototype.abort = function() {
            if (!displayedWarning) {
                displayedWarning = true;
                console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
            }
        };
        return class_1;
    }();
    function actionCreator(arg) {
        return function(dispatch, getState, extra) {
            var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
            var abortController = new AC();
            var abortReason;
            var abortedPromise = new Promise(function(_, reject) {
                return abortController.signal.addEventListener("abort", function() {
                    return reject({
                        name: "AbortError",
                        message: abortReason || "Aborted"
                    });
                });
            });
            var started = false;
            function abort(reason) {
                if (started) {
                    abortReason = reason;
                    abortController.abort();
                }
            }
            var promise = function() {
                return __async(this, null, function() {
                    var _a, _b, finalAction, conditionResult, err_1, skipDispatch;
                    return __generator(this, function(_c) {
                        switch(_c.label){
                            case 0:
                                _c.trys.push([
                                    0,
                                    4,
                                    ,
                                    5
                                ]);
                                conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {
                                    getState: getState,
                                    extra: extra
                                });
                                if (!isThenable(conditionResult)) return [
                                    3 /*break*/ ,
                                    2
                                ];
                                return [
                                    4 /*yield*/ ,
                                    conditionResult
                                ];
                            case 1:
                                conditionResult = _c.sent();
                                _c.label = 2;
                            case 2:
                                if (conditionResult === false) throw {
                                    name: "ConditionError",
                                    message: "Aborted due to condition callback returning false."
                                };
                                started = true;
                                dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {
                                    requestId: requestId,
                                    arg: arg
                                }, {
                                    getState: getState,
                                    extra: extra
                                })));
                                return [
                                    4 /*yield*/ ,
                                    Promise.race([
                                        abortedPromise,
                                        Promise.resolve(payloadCreator(arg, {
                                            dispatch: dispatch,
                                            getState: getState,
                                            extra: extra,
                                            requestId: requestId,
                                            signal: abortController.signal,
                                            rejectWithValue: function(value, meta) {
                                                return new RejectWithValue(value, meta);
                                            },
                                            fulfillWithValue: function(value, meta) {
                                                return new FulfillWithMeta(value, meta);
                                            }
                                        })).then(function(result) {
                                            if (result instanceof RejectWithValue) throw result;
                                            if (result instanceof FulfillWithMeta) return fulfilled(result.payload, requestId, arg, result.meta);
                                            return fulfilled(result, requestId, arg);
                                        })
                                    ])
                                ];
                            case 3:
                                finalAction = _c.sent();
                                return [
                                    3 /*break*/ ,
                                    5
                                ];
                            case 4:
                                err_1 = _c.sent();
                                finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                                return [
                                    3 /*break*/ ,
                                    5
                                ];
                            case 5:
                                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                                if (!skipDispatch) dispatch(finalAction);
                                return [
                                    2 /*return*/ ,
                                    finalAction
                                ];
                        }
                    });
                });
            }();
            return Object.assign(promise, {
                abort: abort,
                requestId: requestId,
                arg: arg,
                unwrap: function() {
                    return promise.then(unwrapResult);
                }
            });
        };
    }
    return Object.assign(actionCreator, {
        pending: pending,
        rejected: rejected,
        fulfilled: fulfilled,
        typePrefix: typePrefix
    });
}
function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) throw action.payload;
    if (action.error) throw action.error;
    return action.payload;
}
function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
}
// src/tsHelpers.ts
var hasMatchFunction = function(v) {
    return v && typeof v.match === "function";
};
// src/matchers.ts
var matches = function(matcher, action) {
    if (hasMatchFunction(matcher)) return matcher.match(action);
    else return matcher(action);
};
function isAnyOf() {
    var matchers = [];
    for(var _i = 0; _i < arguments.length; _i++)matchers[_i] = arguments[_i];
    return function(action) {
        return matchers.some(function(matcher) {
            return matches(matcher, action);
        });
    };
}
function isAllOf() {
    var matchers = [];
    for(var _i = 0; _i < arguments.length; _i++)matchers[_i] = arguments[_i];
    return function(action) {
        return matchers.every(function(matcher) {
            return matches(matcher, action);
        });
    };
}
function hasExpectedRequestMetadata(action, validStatus) {
    if (!action || !action.meta) return false;
    var hasValidRequestId = typeof action.meta.requestId === "string";
    var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;
    return hasValidRequestId && hasValidRequestStatus;
}
function isAsyncThunkArray(a) {
    return typeof a[0] === "function" && "pending" in a[0] && "fulfilled" in a[0] && "rejected" in a[0];
}
function isPending() {
    var asyncThunks = [];
    for(var _i = 0; _i < arguments.length; _i++)asyncThunks[_i] = arguments[_i];
    if (asyncThunks.length === 0) return function(action) {
        return hasExpectedRequestMetadata(action, [
            "pending"
        ]);
    };
    if (!isAsyncThunkArray(asyncThunks)) return isPending()(asyncThunks[0]);
    return function(action) {
        var matchers = asyncThunks.map(function(asyncThunk) {
            return asyncThunk.pending;
        });
        var combinedMatcher = isAnyOf.apply(void 0, matchers);
        return combinedMatcher(action);
    };
}
function isRejected() {
    var asyncThunks = [];
    for(var _i = 0; _i < arguments.length; _i++)asyncThunks[_i] = arguments[_i];
    if (asyncThunks.length === 0) return function(action) {
        return hasExpectedRequestMetadata(action, [
            "rejected"
        ]);
    };
    if (!isAsyncThunkArray(asyncThunks)) return isRejected()(asyncThunks[0]);
    return function(action) {
        var matchers = asyncThunks.map(function(asyncThunk) {
            return asyncThunk.rejected;
        });
        var combinedMatcher = isAnyOf.apply(void 0, matchers);
        return combinedMatcher(action);
    };
}
function isRejectedWithValue() {
    var asyncThunks = [];
    for(var _i = 0; _i < arguments.length; _i++)asyncThunks[_i] = arguments[_i];
    var hasFlag = function(action) {
        return action && action.meta && action.meta.rejectedWithValue;
    };
    if (asyncThunks.length === 0) return function(action) {
        var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);
        return combinedMatcher(action);
    };
    if (!isAsyncThunkArray(asyncThunks)) return isRejectedWithValue()(asyncThunks[0]);
    return function(action) {
        var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);
        return combinedMatcher(action);
    };
}
function isFulfilled() {
    var asyncThunks = [];
    for(var _i = 0; _i < arguments.length; _i++)asyncThunks[_i] = arguments[_i];
    if (asyncThunks.length === 0) return function(action) {
        return hasExpectedRequestMetadata(action, [
            "fulfilled"
        ]);
    };
    if (!isAsyncThunkArray(asyncThunks)) return isFulfilled()(asyncThunks[0]);
    return function(action) {
        var matchers = asyncThunks.map(function(asyncThunk) {
            return asyncThunk.fulfilled;
        });
        var combinedMatcher = isAnyOf.apply(void 0, matchers);
        return combinedMatcher(action);
    };
}
function isAsyncThunkAction() {
    var asyncThunks = [];
    for(var _i2 = 0; _i2 < arguments.length; _i2++)asyncThunks[_i2] = arguments[_i2];
    if (asyncThunks.length === 0) return function(action) {
        return hasExpectedRequestMetadata(action, [
            "pending",
            "fulfilled",
            "rejected"
        ]);
    };
    if (!isAsyncThunkArray(asyncThunks)) return isAsyncThunkAction()(asyncThunks[0]);
    return function(action) {
        var matchers = [];
        for(var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++){
            var asyncThunk = asyncThunks_1[_i];
            matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);
        }
        var combinedMatcher = isAnyOf.apply(void 0, matchers);
        return combinedMatcher(action);
    };
}
// src/listenerMiddleware/utils.ts
var assertFunction = function(func, expected) {
    if (typeof func !== "function") throw new TypeError(expected + " is not a function");
};
var noop = function() {};
var catchRejection = function(promise, onError) {
    if (onError === void 0) onError = noop;
    promise.catch(onError);
    return promise;
};
var addAbortSignalListener = function(abortSignal, callback) {
    abortSignal.addEventListener("abort", callback, {
        once: true
    });
};
var abortControllerWithReason = function(abortController, reason) {
    var signal = abortController.signal;
    if (signal.aborted) return;
    if (!("reason" in signal)) Object.defineProperty(signal, "reason", {
        enumerable: true,
        value: reason,
        configurable: true,
        writable: true
    });
    abortController.abort(reason);
};
// src/listenerMiddleware/exceptions.ts
var task = "task";
var listener = "listener";
var completed = "completed";
var cancelled = "cancelled";
var taskCancelled = "task-" + cancelled;
var taskCompleted = "task-" + completed;
var listenerCancelled = listener + "-" + cancelled;
var listenerCompleted = listener + "-" + completed;
var TaskAbortError = /** @class */ function() {
    function TaskAbortError1(code) {
        this.code = code;
        this.name = "TaskAbortError";
        this.message = task + " " + cancelled + " (reason: " + code + ")";
    }
    return TaskAbortError1;
}();
// src/listenerMiddleware/task.ts
var validateActive = function(signal) {
    if (signal.aborted) throw new TaskAbortError(signal.reason);
};
var promisifyAbortSignal = function(signal) {
    return catchRejection(new Promise(function(_, reject) {
        var notifyRejection = function() {
            return reject(new TaskAbortError(signal.reason));
        };
        if (signal.aborted) notifyRejection();
        else addAbortSignalListener(signal, notifyRejection);
    }));
};
var runTask = function(task2, cleanUp) {
    return __async(void 0, null, function() {
        var value, error_1;
        return __generator(this, function(_c) {
            switch(_c.label){
                case 0:
                    _c.trys.push([
                        0,
                        3,
                        4,
                        5
                    ]);
                    return [
                        4 /*yield*/ ,
                        Promise.resolve()
                    ];
                case 1:
                    _c.sent();
                    return [
                        4 /*yield*/ ,
                        task2()
                    ];
                case 2:
                    value = _c.sent();
                    return [
                        2 /*return*/ ,
                        {
                            status: "ok",
                            value: value
                        }
                    ];
                case 3:
                    error_1 = _c.sent();
                    return [
                        2 /*return*/ ,
                        {
                            status: error_1 instanceof TaskAbortError ? "cancelled" : "rejected",
                            error: error_1
                        }
                    ];
                case 4:
                    cleanUp == null || cleanUp();
                    return [
                        7 /*endfinally*/ 
                    ];
                case 5:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
};
var createPause = function(signal) {
    return function(promise) {
        return catchRejection(Promise.race([
            promisifyAbortSignal(signal),
            promise
        ]).then(function(output) {
            validateActive(signal);
            return output;
        }));
    };
};
var createDelay = function(signal) {
    var pause = createPause(signal);
    return function(timeoutMs) {
        return pause(new Promise(function(resolve) {
            return setTimeout(resolve, timeoutMs);
        }));
    };
};
// src/listenerMiddleware/index.ts
var assign = Object.assign;
var INTERNAL_NIL_TOKEN = {};
var alm = "listenerMiddleware";
var createFork = function(parentAbortSignal) {
    var linkControllers = function(controller) {
        return addAbortSignalListener(parentAbortSignal, function() {
            return abortControllerWithReason(controller, parentAbortSignal.reason);
        });
    };
    return function(taskExecutor) {
        assertFunction(taskExecutor, "taskExecutor");
        var childAbortController = new AbortController();
        linkControllers(childAbortController);
        var result = runTask(function() {
            return __async(void 0, null, function() {
                var result2;
                return __generator(this, function(_c) {
                    switch(_c.label){
                        case 0:
                            validateActive(parentAbortSignal);
                            validateActive(childAbortController.signal);
                            return [
                                4 /*yield*/ ,
                                taskExecutor({
                                    pause: createPause(childAbortController.signal),
                                    delay: createDelay(childAbortController.signal),
                                    signal: childAbortController.signal
                                })
                            ];
                        case 1:
                            result2 = _c.sent();
                            validateActive(childAbortController.signal);
                            return [
                                2 /*return*/ ,
                                result2
                            ];
                    }
                });
            });
        }, function() {
            return abortControllerWithReason(childAbortController, taskCompleted);
        });
        return {
            result: createPause(parentAbortSignal)(result),
            cancel: function() {
                abortControllerWithReason(childAbortController, taskCancelled);
            }
        };
    };
};
var createTakePattern = function(startListening, signal) {
    var take = function(predicate, timeout) {
        return __async(void 0, null, function() {
            var unsubscribe, tuplePromise, promises, output;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        validateActive(signal);
                        unsubscribe = function() {};
                        tuplePromise = new Promise(function(resolve) {
                            unsubscribe = startListening({
                                predicate: predicate,
                                effect: function(action, listenerApi) {
                                    listenerApi.unsubscribe();
                                    resolve([
                                        action,
                                        listenerApi.getState(),
                                        listenerApi.getOriginalState()
                                    ]);
                                }
                            });
                        });
                        promises = [
                            promisifyAbortSignal(signal),
                            tuplePromise
                        ];
                        if (timeout != null) promises.push(new Promise(function(resolve) {
                            return setTimeout(resolve, timeout, null);
                        }));
                        _c.label = 1;
                    case 1:
                        _c.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            Promise.race(promises)
                        ];
                    case 2:
                        output = _c.sent();
                        validateActive(signal);
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 3:
                        unsubscribe();
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return function(predicate, timeout) {
        return catchRejection(take(predicate, timeout));
    };
};
var getListenerEntryPropsFrom = function(options) {
    var type = options.type, actionCreator = options.actionCreator, matcher = options.matcher, predicate = options.predicate, effect = options.effect;
    if (type) predicate = createAction(type).match;
    else if (actionCreator) {
        type = actionCreator.type;
        predicate = actionCreator.match;
    } else if (matcher) predicate = matcher;
    else if (predicate) ;
    else throw new Error("Creating or removing a listener requires one of the known fields for matching an action");
    assertFunction(effect, "options.listener");
    return {
        predicate: predicate,
        type: type,
        effect: effect
    };
};
var createListenerEntry = function(options) {
    var _c = getListenerEntryPropsFrom(options), type = _c.type, predicate = _c.predicate, effect = _c.effect;
    var id = nanoid();
    var entry = {
        id: id,
        effect: effect,
        type: type,
        predicate: predicate,
        pending: new Set(),
        unsubscribe: function() {
            throw new Error("Unsubscribe not initialized");
        }
    };
    return entry;
};
var createClearListenerMiddleware = function(listenerMap) {
    return function() {
        listenerMap.forEach(cancelActiveListeners);
        listenerMap.clear();
    };
};
var safelyNotifyError = function(errorHandler, errorToNotify, errorInfo) {
    try {
        errorHandler(errorToNotify, errorInfo);
    } catch (errorHandlerError) {
        setTimeout(function() {
            throw errorHandlerError;
        }, 0);
    }
};
var addListener = createAction(alm + "/add");
var clearAllListeners = createAction(alm + "/removeAll");
var removeListener = createAction(alm + "/remove");
var defaultErrorHandler = function() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    console.error.apply(console, __spreadArray([
        alm + "/error"
    ], args));
};
var cancelActiveListeners = function(entry) {
    entry.pending.forEach(function(controller) {
        abortControllerWithReason(controller, listenerCancelled);
    });
};
function createListenerMiddleware(middlewareOptions) {
    var _this = this;
    if (middlewareOptions === void 0) middlewareOptions = {};
    var listenerMap = new Map();
    var extra = middlewareOptions.extra, _c4 = middlewareOptions.onError, onError = _c4 === void 0 ? defaultErrorHandler : _c4;
    assertFunction(onError, "onError");
    var insertEntry = function(entry) {
        entry.unsubscribe = function() {
            return listenerMap.delete(entry.id);
        };
        listenerMap.set(entry.id, entry);
        return function(cancelOptions) {
            entry.unsubscribe();
            if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) cancelActiveListeners(entry);
        };
    };
    var findListenerEntry = function(comparator) {
        for(var _i = 0, _c = listenerMap.values(); _i < _c.length; _i++){
            var entry = _c[_i];
            if (comparator(entry)) return entry;
        }
        return void 0;
    };
    var startListening = function(options) {
        var entry = findListenerEntry(function(existingEntry) {
            return existingEntry.effect === options.effect;
        });
        if (!entry) entry = createListenerEntry(options);
        return insertEntry(entry);
    };
    var stopListening = function(options) {
        var _c = getListenerEntryPropsFrom(options), type = _c.type, effect = _c.effect, predicate = _c.predicate;
        var entry = findListenerEntry(function(entry2) {
            var matchPredicateOrType = typeof type === "string" ? entry2.type === type : entry2.predicate === predicate;
            return matchPredicateOrType && entry2.effect === effect;
        });
        if (entry) {
            entry.unsubscribe();
            if (options.cancelActive) cancelActiveListeners(entry);
        }
        return !!entry;
    };
    var notifyListener = function(entry, action, api, getOriginalState) {
        return __async(_this, null, function() {
            var internalTaskController, take, listenerError_1;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        internalTaskController = new AbortController();
                        take = createTakePattern(startListening, internalTaskController.signal);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([
                            1,
                            3,
                            4,
                            5
                        ]);
                        entry.pending.add(internalTaskController);
                        return [
                            4 /*yield*/ ,
                            Promise.resolve(entry.effect(action, assign({}, api, {
                                getOriginalState: getOriginalState,
                                condition: function(predicate, timeout) {
                                    return take(predicate, timeout).then(Boolean);
                                },
                                take: take,
                                delay: createDelay(internalTaskController.signal),
                                pause: createPause(internalTaskController.signal),
                                extra: extra,
                                signal: internalTaskController.signal,
                                fork: createFork(internalTaskController.signal),
                                unsubscribe: entry.unsubscribe,
                                subscribe: function() {
                                    listenerMap.set(entry.id, entry);
                                },
                                cancelActiveListeners: function() {
                                    entry.pending.forEach(function(controller, _, set) {
                                        if (controller !== internalTaskController) {
                                            abortControllerWithReason(controller, listenerCancelled);
                                            set.delete(controller);
                                        }
                                    });
                                }
                            })))
                        ];
                    case 2:
                        _c.sent();
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 3:
                        listenerError_1 = _c.sent();
                        if (!(listenerError_1 instanceof TaskAbortError)) safelyNotifyError(onError, listenerError_1, {
                            raisedBy: "effect"
                        });
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 4:
                        abortControllerWithReason(internalTaskController, listenerCompleted);
                        entry.pending.delete(internalTaskController);
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);
    var middleware = function(api) {
        return function(next) {
            return function(action) {
                if (addListener.match(action)) return startListening(action.payload);
                if (clearAllListeners.match(action)) {
                    clearListenerMiddleware();
                    return;
                }
                if (removeListener.match(action)) return stopListening(action.payload);
                var originalState = api.getState();
                var getOriginalState = function() {
                    if (originalState === INTERNAL_NIL_TOKEN) throw new Error(alm + ": getOriginalState can only be called synchronously");
                    return originalState;
                };
                var result;
                try {
                    result = next(action);
                    if (listenerMap.size > 0) {
                        var currentState = api.getState();
                        var listenerEntries = Array.from(listenerMap.values());
                        for(var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++){
                            var entry = listenerEntries_1[_i];
                            var runListener = false;
                            try {
                                runListener = entry.predicate(action, currentState, originalState);
                            } catch (predicateError) {
                                runListener = false;
                                safelyNotifyError(onError, predicateError, {
                                    raisedBy: "predicate"
                                });
                            }
                            if (!runListener) continue;
                            notifyListener(entry, action, api, getOriginalState);
                        }
                    }
                } finally{
                    originalState = INTERNAL_NIL_TOKEN;
                }
                return result;
            };
        };
    };
    return {
        middleware: middleware,
        startListening: startListening,
        stopListening: stopListening,
        clearListeners: clearListenerMiddleware
    };
}
// src/index.ts
_immer.enableES5();

},{"immer":"4sfoz","reselect":"isIsC","redux":"cDNB3","redux-thunk":"iFVTZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sfoz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Immer", ()=>un
);
parcelHelpers.export(exports, "applyPatches", ()=>pn
);
parcelHelpers.export(exports, "castDraft", ()=>K
);
parcelHelpers.export(exports, "castImmutable", ()=>$
);
parcelHelpers.export(exports, "createDraft", ()=>ln
);
parcelHelpers.export(exports, "current", ()=>D
);
parcelHelpers.export(exports, "enableAllPlugins", ()=>J
);
parcelHelpers.export(exports, "enableES5", ()=>N
);
parcelHelpers.export(exports, "enableMapSet", ()=>C
);
parcelHelpers.export(exports, "enablePatches", ()=>T
);
parcelHelpers.export(exports, "finishDraft", ()=>dn
);
parcelHelpers.export(exports, "freeze", ()=>d
);
parcelHelpers.export(exports, "immerable", ()=>L
);
parcelHelpers.export(exports, "isDraft", ()=>r
);
parcelHelpers.export(exports, "isDraftable", ()=>t
);
parcelHelpers.export(exports, "nothing", ()=>H
);
parcelHelpers.export(exports, "original", ()=>e
);
parcelHelpers.export(exports, "produce", ()=>fn
);
parcelHelpers.export(exports, "produceWithPatches", ()=>cn
);
parcelHelpers.export(exports, "setAutoFreeze", ()=>sn
);
parcelHelpers.export(exports, "setUseProxies", ()=>vn
);
function n(n1) {
    for(var r1 = arguments.length, t1 = Array(r1 > 1 ? r1 - 1 : 0), e1 = 1; e1 < r1; e1++)t1[e1 - 1] = arguments[e1];
    var i1 = Y[n1], o1 = i1 ? "function" == typeof i1 ? i1.apply(null, t1) : i1 : "unknown error nr: " + n1;
    throw Error("[Immer] " + o1);
    throw Error("[Immer] minified error nr: " + n1 + (t1.length ? " " + t1.map(function(n2) {
        return "'" + n2 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n3) {
    return !!n3 && !!n3[Q];
}
function t(n4) {
    return !!n4 && (function(n5) {
        if (!n5 || "object" != typeof n5) return !1;
        var r2 = Object.getPrototypeOf(n5);
        if (null === r2) return !0;
        var t2 = Object.hasOwnProperty.call(r2, "constructor") && r2.constructor;
        return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z;
    }(n4) || Array.isArray(n4) || !!n4[L] || !!n4.constructor[L] || s(n4) || v(n4));
}
function e(t3) {
    return r(t3) || n(23, t3), t3[Q].t;
}
function i(n6, r3, t4) {
    void 0 === t4 && (t4 = !1), 0 === o(n6) ? (t4 ? Object.keys : nn)(n6).forEach(function(e2) {
        t4 && "symbol" == typeof e2 || r3(e2, n6[e2], n6);
    }) : n6.forEach(function(t5, e3) {
        return r3(e3, t5, n6);
    });
}
function o(n7) {
    var r4 = n7[Q];
    return r4 ? r4.i > 3 ? r4.i - 4 : r4.i : Array.isArray(n7) ? 1 : s(n7) ? 2 : v(n7) ? 3 : 0;
}
function u(n8, r5) {
    return 2 === o(n8) ? n8.has(r5) : Object.prototype.hasOwnProperty.call(n8, r5);
}
function a(n9, r6) {
    return 2 === o(n9) ? n9.get(r6) : n9[r6];
}
function f(n10, r7, t6) {
    var e4 = o(n10);
    2 === e4 ? n10.set(r7, t6) : 3 === e4 ? (n10.delete(r7), n10.add(t6)) : n10[r7] = t6;
}
function c(n11, r8) {
    return n11 === r8 ? 0 !== n11 || 1 / n11 == 1 / r8 : n11 != n11 && r8 != r8;
}
function s(n12) {
    return X && n12 instanceof Map;
}
function v(n13) {
    return q && n13 instanceof Set;
}
function p(n14) {
    return n14.o || n14.t;
}
function l(n15) {
    if (Array.isArray(n15)) return Array.prototype.slice.call(n15);
    var r9 = rn(n15);
    delete r9[Q];
    for(var t7 = nn(r9), e5 = 0; e5 < t7.length; e5++){
        var i2 = t7[e5], o2 = r9[i2];
        !1 === o2.writable && (o2.writable = !0, o2.configurable = !0), (o2.get || o2.set) && (r9[i2] = {
            configurable: !0,
            writable: !0,
            enumerable: o2.enumerable,
            value: n15[i2]
        });
    }
    return Object.create(Object.getPrototypeOf(n15), r9);
}
function d(n16, e6) {
    return void 0 === e6 && (e6 = !1), y(n16) || r(n16) || !t(n16) ? n16 : (o(n16) > 1 && (n16.set = n16.add = n16.clear = n16.delete = h), Object.freeze(n16), e6 && i(n16, function(n, r10) {
        return d(r10, !0);
    }, !0), n16);
}
function h() {
    n(2);
}
function y(n17) {
    return null == n17 || "object" != typeof n17 || Object.isFrozen(n17);
}
function b(r11) {
    var t8 = tn[r11];
    return t8 || n(18, r11), t8;
}
function m(n18, r12) {
    tn[n18] || (tn[n18] = r12);
}
function _() {
    return U || n(0), U;
}
function j(n19, r13) {
    r13 && (b("Patches"), n19.u = [], n19.s = [], n19.v = r13);
}
function O(n20) {
    g(n20), n20.p.forEach(S), n20.p = null;
}
function g(n21) {
    n21 === U && (U = n21.l);
}
function w(n22) {
    return U = {
        p: [],
        l: U,
        h: n22,
        m: !0,
        _: 0
    };
}
function S(n23) {
    var r14 = n23[Q];
    0 === r14.i || 1 === r14.i ? r14.j() : r14.O = !0;
}
function P(r15, e7) {
    e7._ = e7.p.length;
    var i3 = e7.p[0], o3 = void 0 !== r15 && r15 !== i3;
    return e7.h.g || b("ES5").S(e7, r15, o3), o3 ? (i3[Q].P && (O(e7), n(4)), t(r15) && (r15 = M(e7, r15), e7.l || x(e7, r15)), e7.u && b("Patches").M(i3[Q].t, r15, e7.u, e7.s)) : r15 = M(e7, i3, []), O(e7), e7.u && e7.v(e7.u, e7.s), r15 !== H ? r15 : void 0;
}
function M(n24, r16, t9) {
    if (y(r16)) return r16;
    var e8 = r16[Q];
    if (!e8) return i(r16, function(i4, o5) {
        return A(n24, e8, r16, i4, o5, t9);
    }, !0), r16;
    if (e8.A !== n24) return r16;
    if (!e8.P) return x(n24, e8.t, !0), e8.t;
    if (!e8.I) {
        e8.I = !0, e8.A._--;
        var o4 = 4 === e8.i || 5 === e8.i ? e8.o = l(e8.k) : e8.o;
        i(3 === e8.i ? new Set(o4) : o4, function(r17, i5) {
            return A(n24, e8, o4, r17, i5, t9);
        }), x(n24, o4, !1), t9 && n24.u && b("Patches").R(e8, t9, n24.u, n24.s);
    }
    return e8.o;
}
function A(e9, i6, o6, a1, c1, s1) {
    if (c1 === o6 && n(5), r(c1)) {
        var v1 = M(e9, c1, s1 && i6 && 3 !== i6.i && !u(i6.D, a1) ? s1.concat(a1) : void 0);
        if (f(o6, a1, v1), !r(v1)) return;
        e9.m = !1;
    }
    if (t(c1) && !y(c1)) {
        if (!e9.h.F && e9._ < 1) return;
        M(e9, c1), i6 && i6.A.l || x(e9, c1);
    }
}
function x(n25, r18, t10) {
    void 0 === t10 && (t10 = !1), n25.h.F && n25.m && d(r18, t10);
}
function z(n26, r19) {
    var t11 = n26[Q];
    return (t11 ? p(t11) : n26)[r19];
}
function I(n27, r20) {
    if (r20 in n27) for(var t12 = Object.getPrototypeOf(n27); t12;){
        var e10 = Object.getOwnPropertyDescriptor(t12, r20);
        if (e10) return e10;
        t12 = Object.getPrototypeOf(t12);
    }
}
function k(n28) {
    n28.P || (n28.P = !0, n28.l && k(n28.l));
}
function E(n29) {
    n29.o || (n29.o = l(n29.t));
}
function R(n30, r21, t13) {
    var e11 = s(r21) ? b("MapSet").N(r21, t13) : v(r21) ? b("MapSet").T(r21, t13) : n30.g ? function(n31, r22) {
        var t14 = Array.isArray(n31), e12 = {
            i: t14 ? 1 : 0,
            A: r22 ? r22.A : _(),
            P: !1,
            I: !1,
            D: {},
            l: r22,
            t: n31,
            k: null,
            o: null,
            j: null,
            C: !1
        }, i7 = e12, o7 = en;
        t14 && (i7 = [
            e12
        ], o7 = on);
        var u1 = Proxy.revocable(i7, o7), a2 = u1.revoke, f1 = u1.proxy;
        return e12.k = f1, e12.j = a2, f1;
    }(r21, t13) : b("ES5").J(r21, t13);
    return (t13 ? t13.A : _()).p.push(e11), e11;
}
function D(e13) {
    return r(e13) || n(22, e13), function n32(r23) {
        if (!t(r23)) return r23;
        var e14, u2 = r23[Q], c2 = o(r23);
        if (u2) {
            if (!u2.P && (u2.i < 4 || !b("ES5").K(u2))) return u2.t;
            u2.I = !0, e14 = F(r23, c2), u2.I = !1;
        } else e14 = F(r23, c2);
        return i(e14, function(r24, t15) {
            u2 && a(u2.t, r24) === t15 || f(e14, r24, n32(t15));
        }), 3 === c2 ? new Set(e14) : e14;
    }(e13);
}
function F(n33, r25) {
    switch(r25){
        case 2:
            return new Map(n33);
        case 3:
            return Array.from(n33);
    }
    return l(n33);
}
function N() {
    function t16(n34, r26) {
        var t17 = s2[n34];
        return t17 ? t17.enumerable = r26 : s2[n34] = t17 = {
            configurable: !0,
            enumerable: r26,
            get: function() {
                var r27 = this[Q];
                return f2(r27), en.get(r27, n34);
            },
            set: function(r28) {
                var t18 = this[Q];
                f2(t18), en.set(t18, n34, r28);
            }
        }, t17;
    }
    function e15(n35) {
        for(var r29 = n35.length - 1; r29 >= 0; r29--){
            var t19 = n35[r29][Q];
            if (!t19.P) switch(t19.i){
                case 5:
                    a3(t19) && k(t19);
                    break;
                case 4:
                    o8(t19) && k(t19);
            }
        }
    }
    function o8(n36) {
        for(var r30 = n36.t, t20 = n36.k, e16 = nn(t20), i8 = e16.length - 1; i8 >= 0; i8--){
            var o9 = e16[i8];
            if (o9 !== Q) {
                var a4 = r30[o9];
                if (void 0 === a4 && !u(r30, o9)) return !0;
                var f3 = t20[o9], s3 = f3 && f3[Q];
                if (s3 ? s3.t !== a4 : !c(f3, a4)) return !0;
            }
        }
        var v2 = !!r30[Q];
        return e16.length !== nn(r30).length + (v2 ? 0 : 1);
    }
    function a3(n37) {
        var r31 = n37.k;
        if (r31.length !== n37.t.length) return !0;
        var t21 = Object.getOwnPropertyDescriptor(r31, r31.length - 1);
        if (t21 && !t21.get) return !0;
        for(var e17 = 0; e17 < r31.length; e17++)if (!r31.hasOwnProperty(e17)) return !0;
        return !1;
    }
    function f2(r32) {
        r32.O && n(3, JSON.stringify(p(r32)));
    }
    var s2 = {};
    m("ES5", {
        J: function(n38, r33) {
            var e18 = Array.isArray(n38), i9 = function(n39, r34) {
                if (n39) {
                    for(var e19 = Array(r34.length), i10 = 0; i10 < r34.length; i10++)Object.defineProperty(e19, "" + i10, t16(i10, !0));
                    return e19;
                }
                var o11 = rn(r34);
                delete o11[Q];
                for(var u3 = nn(o11), a5 = 0; a5 < u3.length; a5++){
                    var f4 = u3[a5];
                    o11[f4] = t16(f4, n39 || !!o11[f4].enumerable);
                }
                return Object.create(Object.getPrototypeOf(r34), o11);
            }(e18, n38), o10 = {
                i: e18 ? 5 : 4,
                A: r33 ? r33.A : _(),
                P: !1,
                I: !1,
                D: {},
                l: r33,
                t: n38,
                k: i9,
                o: null,
                O: !1,
                C: !1
            };
            return Object.defineProperty(i9, Q, {
                value: o10,
                writable: !0
            }), i9;
        },
        S: function(n40, t22, o12) {
            o12 ? r(t22) && t22[Q].A === n40 && e15(n40.p) : (n40.u && function n41(r35) {
                if (r35 && "object" == typeof r35) {
                    var t23 = r35[Q];
                    if (t23) {
                        var e20 = t23.t, o13 = t23.k, f5 = t23.D, c3 = t23.i;
                        if (4 === c3) i(o13, function(r36) {
                            r36 !== Q && (void 0 !== e20[r36] || u(e20, r36) ? f5[r36] || n41(o13[r36]) : (f5[r36] = !0, k(t23)));
                        }), i(e20, function(n42) {
                            void 0 !== o13[n42] || u(o13, n42) || (f5[n42] = !1, k(t23));
                        });
                        else if (5 === c3) {
                            if (a3(t23) && (k(t23), f5.length = !0), o13.length < e20.length) for(var s4 = o13.length; s4 < e20.length; s4++)f5[s4] = !1;
                            else for(var v3 = e20.length; v3 < o13.length; v3++)f5[v3] = !0;
                            for(var p1 = Math.min(o13.length, e20.length), l1 = 0; l1 < p1; l1++)o13.hasOwnProperty(l1) || (f5[l1] = !0), void 0 === f5[l1] && n41(o13[l1]);
                        }
                    }
                }
            }(n40.p[0]), e15(n40.p));
        },
        K: function(n43) {
            return 4 === n43.i ? o8(n43) : a3(n43);
        }
    });
}
function T() {
    function e21(n44) {
        if (!t(n44)) return n44;
        if (Array.isArray(n44)) return n44.map(e21);
        if (s(n44)) return new Map(Array.from(n44.entries()).map(function(n45) {
            return [
                n45[0],
                e21(n45[1])
            ];
        }));
        if (v(n44)) return new Set(Array.from(n44).map(e21));
        var r37 = Object.create(Object.getPrototypeOf(n44));
        for(var i11 in n44)r37[i11] = e21(n44[i11]);
        return u(n44, L) && (r37[L] = n44[L]), r37;
    }
    function f6(n46) {
        return r(n46) ? e21(n46) : n46;
    }
    var c4 = "add";
    m("Patches", {
        $: function(r38, t24) {
            return t24.forEach(function(t25) {
                for(var i12 = t25.path, u4 = t25.op, f7 = r38, s5 = 0; s5 < i12.length - 1; s5++){
                    var v4 = o(f7), p2 = "" + i12[s5];
                    0 !== v4 && 1 !== v4 || "__proto__" !== p2 && "constructor" !== p2 || n(24), "function" == typeof f7 && "prototype" === p2 && n(24), "object" != typeof (f7 = a(f7, p2)) && n(15, i12.join("/"));
                }
                var l2 = o(f7), d1 = e21(t25.value), h1 = i12[i12.length - 1];
                switch(u4){
                    case "replace":
                        switch(l2){
                            case 2:
                                return f7.set(h1, d1);
                            case 3:
                                n(16);
                            default:
                                return f7[h1] = d1;
                        }
                    case c4:
                        switch(l2){
                            case 1:
                                return "-" === h1 ? f7.push(d1) : f7.splice(h1, 0, d1);
                            case 2:
                                return f7.set(h1, d1);
                            case 3:
                                return f7.add(d1);
                            default:
                                return f7[h1] = d1;
                        }
                    case "remove":
                        switch(l2){
                            case 1:
                                return f7.splice(h1, 1);
                            case 2:
                                return f7.delete(h1);
                            case 3:
                                return f7.delete(t25.value);
                            default:
                                return delete f7[h1];
                        }
                    default:
                        n(17, u4);
                }
            }), r38;
        },
        R: function(n47, r39, t26, e22) {
            switch(n47.i){
                case 0:
                case 4:
                case 2:
                    return function(n48, r40, t27, e23) {
                        var o14 = n48.t, s6 = n48.o;
                        i(n48.D, function(n49, i13) {
                            var v5 = a(o14, n49), p3 = a(s6, n49), l3 = i13 ? u(o14, n49) ? "replace" : c4 : "remove";
                            if (v5 !== p3 || "replace" !== l3) {
                                var d2 = r40.concat(n49);
                                t27.push("remove" === l3 ? {
                                    op: l3,
                                    path: d2
                                } : {
                                    op: l3,
                                    path: d2,
                                    value: p3
                                }), e23.push(l3 === c4 ? {
                                    op: "remove",
                                    path: d2
                                } : "remove" === l3 ? {
                                    op: c4,
                                    path: d2,
                                    value: f6(v5)
                                } : {
                                    op: "replace",
                                    path: d2,
                                    value: f6(v5)
                                });
                            }
                        });
                    }(n47, r39, t26, e22);
                case 5:
                case 1:
                    return function(n50, r41, t28, e24) {
                        var i14 = n50.t, o15 = n50.D, u5 = n50.o;
                        if (u5.length < i14.length) {
                            var a6 = [
                                u5,
                                i14
                            ];
                            i14 = a6[0], u5 = a6[1];
                            var s7 = [
                                e24,
                                t28
                            ];
                            t28 = s7[0], e24 = s7[1];
                        }
                        for(var v6 = 0; v6 < i14.length; v6++)if (o15[v6] && u5[v6] !== i14[v6]) {
                            var p4 = r41.concat([
                                v6
                            ]);
                            t28.push({
                                op: "replace",
                                path: p4,
                                value: f6(u5[v6])
                            }), e24.push({
                                op: "replace",
                                path: p4,
                                value: f6(i14[v6])
                            });
                        }
                        for(var l4 = i14.length; l4 < u5.length; l4++){
                            var d3 = r41.concat([
                                l4
                            ]);
                            t28.push({
                                op: c4,
                                path: d3,
                                value: f6(u5[l4])
                            });
                        }
                        i14.length < u5.length && e24.push({
                            op: "replace",
                            path: r41.concat([
                                "length"
                            ]),
                            value: i14.length
                        });
                    }(n47, r39, t26, e22);
                case 3:
                    return function(n51, r42, t29, e25) {
                        var i15 = n51.t, o16 = n51.o, u6 = 0;
                        i15.forEach(function(n52) {
                            if (!o16.has(n52)) {
                                var i16 = r42.concat([
                                    u6
                                ]);
                                t29.push({
                                    op: "remove",
                                    path: i16,
                                    value: n52
                                }), e25.unshift({
                                    op: c4,
                                    path: i16,
                                    value: n52
                                });
                            }
                            u6++;
                        }), u6 = 0, o16.forEach(function(n53) {
                            if (!i15.has(n53)) {
                                var o17 = r42.concat([
                                    u6
                                ]);
                                t29.push({
                                    op: c4,
                                    path: o17,
                                    value: n53
                                }), e25.unshift({
                                    op: "remove",
                                    path: o17,
                                    value: n53
                                });
                            }
                            u6++;
                        });
                    }(n47, r39, t26, e22);
            }
        },
        M: function(n54, r43, t30, e26) {
            t30.push({
                op: "replace",
                path: [],
                value: r43 === H ? void 0 : r43
            }), e26.push({
                op: "replace",
                path: [],
                value: n54
            });
        }
    });
}
function C() {
    function r44(n55, r45) {
        function t31() {
            this.constructor = n55;
        }
        a7(n55, r45), n55.prototype = (t31.prototype = r45.prototype, new t31);
    }
    function e27(n56) {
        n56.o || (n56.D = new Map, n56.o = new Map(n56.t));
    }
    function o18(n57) {
        n57.o || (n57.o = new Set, n57.t.forEach(function(r46) {
            if (t(r46)) {
                var e28 = R(n57.A.h, r46, n57);
                n57.p.set(r46, e28), n57.o.add(e28);
            } else n57.o.add(r46);
        }));
    }
    function u7(r47) {
        r47.O && n(3, JSON.stringify(p(r47)));
    }
    var a7 = function(n58, r48) {
        return (a7 = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(n59, r49) {
            n59.__proto__ = r49;
        } || function(n60, r50) {
            for(var t32 in r50)r50.hasOwnProperty(t32) && (n60[t32] = r50[t32]);
        })(n58, r48);
    }, f8 = function() {
        function n61(n62, r51) {
            return this[Q] = {
                i: 2,
                l: r51,
                A: r51 ? r51.A : _(),
                P: !1,
                I: !1,
                o: void 0,
                D: void 0,
                t: n62,
                k: this,
                C: !1,
                O: !1
            }, this;
        }
        r44(n61, Map);
        var o19 = n61.prototype;
        return Object.defineProperty(o19, "size", {
            get: function() {
                return p(this[Q]).size;
            }
        }), o19.has = function(n63) {
            return p(this[Q]).has(n63);
        }, o19.set = function(n64, r52) {
            var t33 = this[Q];
            return u7(t33), p(t33).has(n64) && p(t33).get(n64) === r52 || (e27(t33), k(t33), t33.D.set(n64, !0), t33.o.set(n64, r52), t33.D.set(n64, !0)), this;
        }, o19.delete = function(n65) {
            if (!this.has(n65)) return !1;
            var r53 = this[Q];
            return u7(r53), e27(r53), k(r53), r53.t.has(n65) ? r53.D.set(n65, !1) : r53.D.delete(n65), r53.o.delete(n65), !0;
        }, o19.clear = function() {
            var n66 = this[Q];
            u7(n66), p(n66).size && (e27(n66), k(n66), n66.D = new Map, i(n66.t, function(r54) {
                n66.D.set(r54, !1);
            }), n66.o.clear());
        }, o19.forEach = function(n67, r55) {
            var t34 = this;
            p(this[Q]).forEach(function(e, i17) {
                n67.call(r55, t34.get(i17), i17, t34);
            });
        }, o19.get = function(n68) {
            var r56 = this[Q];
            u7(r56);
            var i18 = p(r56).get(n68);
            if (r56.I || !t(i18)) return i18;
            if (i18 !== r56.t.get(n68)) return i18;
            var o20 = R(r56.A.h, i18, r56);
            return e27(r56), r56.o.set(n68, o20), o20;
        }, o19.keys = function() {
            return p(this[Q]).keys();
        }, o19.values = function() {
            var n69, r57 = this, t35 = this.keys();
            return (n69 = {})[V] = function() {
                return r57.values();
            }, n69.next = function() {
                var n70 = t35.next();
                return n70.done ? n70 : {
                    done: !1,
                    value: r57.get(n70.value)
                };
            }, n69;
        }, o19.entries = function() {
            var n71, r58 = this, t36 = this.keys();
            return (n71 = {})[V] = function() {
                return r58.entries();
            }, n71.next = function() {
                var n72 = t36.next();
                if (n72.done) return n72;
                var e29 = r58.get(n72.value);
                return {
                    done: !1,
                    value: [
                        n72.value,
                        e29
                    ]
                };
            }, n71;
        }, o19[V] = function() {
            return this.entries();
        }, n61;
    }(), c5 = function() {
        function n73(n74, r59) {
            return this[Q] = {
                i: 3,
                l: r59,
                A: r59 ? r59.A : _(),
                P: !1,
                I: !1,
                o: void 0,
                t: n74,
                k: this,
                p: new Map,
                O: !1,
                C: !1
            }, this;
        }
        r44(n73, Set);
        var t37 = n73.prototype;
        return Object.defineProperty(t37, "size", {
            get: function() {
                return p(this[Q]).size;
            }
        }), t37.has = function(n75) {
            var r60 = this[Q];
            return u7(r60), r60.o ? !!r60.o.has(n75) || !(!r60.p.has(n75) || !r60.o.has(r60.p.get(n75))) : r60.t.has(n75);
        }, t37.add = function(n76) {
            var r61 = this[Q];
            return u7(r61), this.has(n76) || (o18(r61), k(r61), r61.o.add(n76)), this;
        }, t37.delete = function(n77) {
            if (!this.has(n77)) return !1;
            var r62 = this[Q];
            return u7(r62), o18(r62), k(r62), r62.o.delete(n77) || !!r62.p.has(n77) && r62.o.delete(r62.p.get(n77));
        }, t37.clear = function() {
            var n78 = this[Q];
            u7(n78), p(n78).size && (o18(n78), k(n78), n78.o.clear());
        }, t37.values = function() {
            var n79 = this[Q];
            return u7(n79), o18(n79), n79.o.values();
        }, t37.entries = function() {
            var n80 = this[Q];
            return u7(n80), o18(n80), n80.o.entries();
        }, t37.keys = function() {
            return this.values();
        }, t37[V] = function() {
            return this.values();
        }, t37.forEach = function(n81, r63) {
            for(var t38 = this.values(), e30 = t38.next(); !e30.done;)n81.call(r63, e30.value, e30.value, this), e30 = t38.next();
        }, n73;
    }();
    m("MapSet", {
        N: function(n82, r64) {
            return new f8(n82, r64);
        },
        T: function(n83, r65) {
            return new c5(n83, r65);
        }
    });
}
function J() {
    N(), C(), T();
}
function K(n84) {
    return n84;
}
function $(n85) {
    return n85;
}
var G, U, W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"), X = "undefined" != typeof Map, q = "undefined" != typeof Set, B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect, H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = !0, G), L = W ? Symbol.for("immer-draftable") : "__$immer_draftable", Q = W ? Symbol.for("immer-state") : "__$immer_state", V = "undefined" != typeof Symbol && Symbol.iterator || "@@iterator", Y = {
    0: "Illegal state",
    1: "Immer drafts cannot have computed properties",
    2: "This object has been frozen and should not be mutated",
    3: function(n86) {
        return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n86;
    },
    4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    5: "Immer forbids circular references",
    6: "The first or second argument to `produce` must be a function",
    7: "The third argument to `produce` must be a function or undefined",
    8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
    10: "The given draft is already finalized",
    11: "Object.defineProperty() cannot be used on an Immer draft",
    12: "Object.setPrototypeOf() cannot be used on an Immer draft",
    13: "Immer only supports deleting array indices",
    14: "Immer only supports setting array indices and the 'length' property",
    15: function(n87) {
        return "Cannot apply patch, path doesn't resolve: " + n87;
    },
    16: 'Sets cannot have "replace" patches.',
    17: function(n88) {
        return "Unsupported patch operation: " + n88;
    },
    18: function(n89) {
        return "The plugin for '" + n89 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n89 + "()` when initializing your application.";
    },
    20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
    21: function(n90) {
        return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n90 + "'";
    },
    22: function(n91) {
        return "'current' expects a draft, got: " + n91;
    },
    23: function(n92) {
        return "'original' expects a draft, got: " + n92;
    },
    24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
}, Z = "" + Object.prototype.constructor, nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n93) {
    return Object.getOwnPropertyNames(n93).concat(Object.getOwnPropertySymbols(n93));
} : Object.getOwnPropertyNames, rn = Object.getOwnPropertyDescriptors || function(n94) {
    var r66 = {};
    return nn(n94).forEach(function(t39) {
        r66[t39] = Object.getOwnPropertyDescriptor(n94, t39);
    }), r66;
}, tn = {}, en = {
    get: function(n95, r67) {
        if (r67 === Q) return n95;
        var e31 = p(n95);
        if (!u(e31, r67)) return function(n96, r68, t40) {
            var e32, i20 = I(r68, t40);
            return i20 ? "value" in i20 ? i20.value : null === (e32 = i20.get) || void 0 === e32 ? void 0 : e32.call(n96.k) : void 0;
        }(n95, e31, r67);
        var i19 = e31[r67];
        return n95.I || !t(i19) ? i19 : i19 === z(n95.t, r67) ? (E(n95), n95.o[r67] = R(n95.A.h, i19, n95)) : i19;
    },
    has: function(n97, r69) {
        return r69 in p(n97);
    },
    ownKeys: function(n98) {
        return Reflect.ownKeys(p(n98));
    },
    set: function(n99, r70, t41) {
        var e33 = I(p(n99), r70);
        if (null == e33 ? void 0 : e33.set) return e33.set.call(n99.k, t41), !0;
        if (!n99.P) {
            var i21 = z(p(n99), r70), o21 = null == i21 ? void 0 : i21[Q];
            if (o21 && o21.t === t41) return n99.o[r70] = t41, n99.D[r70] = !1, !0;
            if (c(t41, i21) && (void 0 !== t41 || u(n99.t, r70))) return !0;
            E(n99), k(n99);
        }
        return n99.o[r70] === t41 && "number" != typeof t41 && (void 0 !== t41 || r70 in n99.o) || (n99.o[r70] = t41, n99.D[r70] = !0, !0);
    },
    deleteProperty: function(n100, r71) {
        return void 0 !== z(n100.t, r71) || r71 in n100.t ? (n100.D[r71] = !1, E(n100), k(n100)) : delete n100.D[r71], n100.o && delete n100.o[r71], !0;
    },
    getOwnPropertyDescriptor: function(n101, r72) {
        var t42 = p(n101), e34 = Reflect.getOwnPropertyDescriptor(t42, r72);
        return e34 ? {
            writable: !0,
            configurable: 1 !== n101.i || "length" !== r72,
            enumerable: e34.enumerable,
            value: t42[r72]
        } : e34;
    },
    defineProperty: function() {
        n(11);
    },
    getPrototypeOf: function(n102) {
        return Object.getPrototypeOf(n102.t);
    },
    setPrototypeOf: function() {
        n(12);
    }
}, on = {};
i(en, function(n103, r73) {
    on[n103] = function() {
        return arguments[0] = arguments[0][0], r73.apply(this, arguments);
    };
}), on.deleteProperty = function(r74, t43) {
    return isNaN(parseInt(t43)) && n(13), on.set.call(this, r74, t43, void 0);
}, on.set = function(r75, t44, e35) {
    return "length" !== t44 && isNaN(parseInt(t44)) && n(14), en.set.call(this, r75[0], t44, e35, r75[0]);
};
var un = function() {
    function e36(r76) {
        var e37 = this;
        this.g = B, this.F = !0, this.produce = function(r77, i23, o22) {
            if ("function" == typeof r77 && "function" != typeof i23) {
                var u8 = i23;
                i23 = r77;
                var a8 = e37;
                return function(n104) {
                    var r78 = this;
                    void 0 === n104 && (n104 = u8);
                    for(var t45 = arguments.length, e38 = Array(t45 > 1 ? t45 - 1 : 0), o23 = 1; o23 < t45; o23++)e38[o23 - 1] = arguments[o23];
                    return a8.produce(n104, function(n105) {
                        var t46;
                        return (t46 = i23).call.apply(t46, [
                            r78,
                            n105
                        ].concat(e38));
                    });
                };
            }
            var f9;
            if ("function" != typeof i23 && n(6), void 0 !== o22 && "function" != typeof o22 && n(7), t(r77)) {
                var c6 = w(e37), s8 = R(e37, r77, void 0), v7 = !0;
                try {
                    f9 = i23(s8), v7 = !1;
                } finally{
                    v7 ? O(c6) : g(c6);
                }
                return "undefined" != typeof Promise && f9 instanceof Promise ? f9.then(function(n106) {
                    return j(c6, o22), P(n106, c6);
                }, function(n107) {
                    throw O(c6), n107;
                }) : (j(c6, o22), P(f9, c6));
            }
            if (!r77 || "object" != typeof r77) {
                if (void 0 === (f9 = i23(r77)) && (f9 = r77), f9 === H && (f9 = void 0), e37.F && d(f9, !0), o22) {
                    var p5 = [], l5 = [];
                    b("Patches").M(r77, f9, p5, l5), o22(p5, l5);
                }
                return f9;
            }
            n(21, r77);
        }, this.produceWithPatches = function(n108, r79) {
            if ("function" == typeof n108) return function(r80) {
                for(var t48 = arguments.length, i25 = Array(t48 > 1 ? t48 - 1 : 0), o25 = 1; o25 < t48; o25++)i25[o25 - 1] = arguments[o25];
                return e37.produceWithPatches(r80, function(r81) {
                    return n108.apply(void 0, [
                        r81
                    ].concat(i25));
                });
            };
            var t47, i24, o24 = e37.produce(n108, r79, function(n109, r82) {
                t47 = n109, i24 = r82;
            });
            return "undefined" != typeof Promise && o24 instanceof Promise ? o24.then(function(n110) {
                return [
                    n110,
                    t47,
                    i24
                ];
            }) : [
                o24,
                t47,
                i24
            ];
        }, "boolean" == typeof (null == r76 ? void 0 : r76.useProxies) && this.setUseProxies(r76.useProxies), "boolean" == typeof (null == r76 ? void 0 : r76.autoFreeze) && this.setAutoFreeze(r76.autoFreeze);
    }
    var i22 = e36.prototype;
    return i22.createDraft = function(e39) {
        t(e39) || n(8), r(e39) && (e39 = D(e39));
        var i26 = w(this), o26 = R(this, e39, void 0);
        return o26[Q].C = !0, g(i26), o26;
    }, i22.finishDraft = function(r83, t49) {
        var e40 = r83 && r83[Q];
        e40 && e40.C || n(9), e40.I && n(10);
        var i27 = e40.A;
        return j(i27, t49), P(void 0, i27);
    }, i22.setAutoFreeze = function(n111) {
        this.F = n111;
    }, i22.setUseProxies = function(r84) {
        r84 && !B && n(20), this.g = r84;
    }, i22.applyPatches = function(n112, t50) {
        var e41;
        for(e41 = t50.length - 1; e41 >= 0; e41--){
            var i28 = t50[e41];
            if (0 === i28.path.length && "replace" === i28.op) {
                n112 = i28.value;
                break;
            }
        }
        e41 > -1 && (t50 = t50.slice(e41 + 1));
        var o27 = b("Patches").$;
        return r(n112) ? o27(n112, t50) : this.produce(n112, function(n113) {
            return o27(n113, t50);
        });
    }, e36;
}(), an = new un, fn = an.produce, cn = an.produceWithPatches.bind(an), sn = an.setAutoFreeze.bind(an), vn = an.setUseProxies.bind(an), pn = an.applyPatches.bind(an), ln = an.createDraft.bind(an), dn = an.finishDraft.bind(an);
exports.default = fn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isIsC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultMemoize", ()=>_defaultMemoize.defaultMemoize
);
parcelHelpers.export(exports, "defaultEqualityCheck", ()=>_defaultMemoize.defaultEqualityCheck
);
parcelHelpers.export(exports, "createSelectorCreator", ()=>createSelectorCreator
);
parcelHelpers.export(exports, "createSelector", ()=>createSelector
);
parcelHelpers.export(exports, "createStructuredSelector", ()=>createStructuredSelector
);
var _defaultMemoize = require("./defaultMemoize");
function getDependencies(funcs) {
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
    if (!dependencies.every(function(dep) {
        return typeof dep === 'function';
    })) {
        var dependencyTypes = dependencies.map(function(dep) {
            return typeof dep === 'function' ? "function " + (dep.name || 'unnamed') + "()" : typeof dep;
        }).join(', ');
        throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
    }
    return dependencies;
}
function createSelectorCreator(memoize) {
    for(var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)memoizeOptionsFromArgs[_key - 1] = arguments[_key];
    var createSelector1 = function createSelector() {
        for(var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)funcs[_key2] = arguments[_key2];
        var _recomputations = 0;
        var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.
        // So, start by declaring the default value here.
        // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)
        var directlyPassedOptions = {
            memoizeOptions: undefined
        }; // Normally, the result func or "output selector" is the last arg
        var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object
        if (typeof resultFunc === 'object') {
            directlyPassedOptions = resultFunc; // and pop the real result func off
            resultFunc = funcs.pop();
        }
        if (typeof resultFunc !== 'function') throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
         // Determine which set of options we're using. Prefer options passed directly,
        // but fall back to options given to createSelectorCreator.
        var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer
        // is an array. In most libs I've looked at, it's an equality function or options object.
        // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full
        // user-provided array of options. Otherwise, it must be just the _first_ arg, and so
        // we wrap it in an array so we can apply it.
        var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [
            memoizeOptions
        ];
        var dependencies = getDependencies(funcs);
        var memoizedResultFunc = memoize.apply(void 0, [
            function() {
                _recomputations++; // apply arguments instead of spreading for performance.
                return resultFunc.apply(null, arguments);
            }
        ].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.
        var selector = memoize(function() {
            var params = [];
            var length = dependencies.length;
            for(var i = 0; i < length; i++)// apply arguments instead of spreading and mutate a local list of params for performance.
            // @ts-ignore
            params.push(dependencies[i].apply(null, arguments));
             // apply arguments instead of spreading for performance.
            _lastResult = memoizedResultFunc.apply(null, params);
            return _lastResult;
        });
        Object.assign(selector, {
            resultFunc: resultFunc,
            memoizedResultFunc: memoizedResultFunc,
            dependencies: dependencies,
            lastResult: function lastResult() {
                return _lastResult;
            },
            recomputations: function recomputations() {
                return _recomputations;
            },
            resetRecomputations: function resetRecomputations() {
                return _recomputations = 0;
            }
        });
        return selector;
    }; // @ts-ignore
    return createSelector1;
}
var createSelector = /* #__PURE__ */ createSelectorCreator(_defaultMemoize.defaultMemoize);
var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {
    if (selectorCreator === void 0) selectorCreator = createSelector;
    if (typeof selectors !== 'object') throw new Error('createStructuredSelector expects first argument to be an object ' + ("where each property is a selector, instead received a " + typeof selectors));
    var objectKeys = Object.keys(selectors);
    var resultSelector = selectorCreator(objectKeys.map(function(key) {
        return selectors[key];
    }), function() {
        for(var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)values[_key3] = arguments[_key3];
        return values.reduce(function(composition, value, index) {
            composition[objectKeys[index]] = value;
            return composition;
        }, {});
    });
    return resultSelector;
};

},{"./defaultMemoize":"gK721","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gK721":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultEqualityCheck", ()=>defaultEqualityCheck
);
parcelHelpers.export(exports, "createCacheKeyComparator", ()=>createCacheKeyComparator
);
// defaultMemoize now supports a configurable cache size with LRU behavior,
// and optional comparison of the result value with existing values
parcelHelpers.export(exports, "defaultMemoize", ()=>defaultMemoize
);
// Cache implementation based on Erik Rasmussen's `lru-memoize`:
// https://github.com/erikras/lru-memoize
var NOT_FOUND = 'NOT_FOUND';
function createSingletonCache(equals) {
    var entry;
    return {
        get: function get(key) {
            if (entry && equals(entry.key, key)) return entry.value;
            return NOT_FOUND;
        },
        put: function put(key, value) {
            entry = {
                key: key,
                value: value
            };
        },
        getEntries: function getEntries() {
            return entry ? [
                entry
            ] : [];
        },
        clear: function clear() {
            entry = undefined;
        }
    };
}
function createLruCache(maxSize, equals) {
    var entries = [];
    function get(key) {
        var cacheIndex = entries.findIndex(function(entry) {
            return equals(key, entry.key);
        }); // We found a cached entry
        if (cacheIndex > -1) {
            var entry1 = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top
            if (cacheIndex > 0) {
                entries.splice(cacheIndex, 1);
                entries.unshift(entry1);
            }
            return entry1.value;
        } // No entry found in cache, return sentinel
        return NOT_FOUND;
    }
    function put(key, value) {
        if (get(key) === NOT_FOUND) {
            // TODO Is unshift slow?
            entries.unshift({
                key: key,
                value: value
            });
            if (entries.length > maxSize) entries.pop();
        }
    }
    function getEntries() {
        return entries;
    }
    function clear() {
        entries = [];
    }
    return {
        get: get,
        put: put,
        getEntries: getEntries,
        clear: clear
    };
}
var defaultEqualityCheck = function defaultEqualityCheck(a, b) {
    return a === b;
};
function createCacheKeyComparator(equalityCheck) {
    return function areArgumentsShallowlyEqual(prev, next) {
        if (prev === null || next === null || prev.length !== next.length) return false;
         // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
        var length = prev.length;
        for(var i = 0; i < length; i++){
            if (!equalityCheck(prev[i], next[i])) return false;
        }
        return true;
    };
}
function defaultMemoize(func, equalityCheckOrOptions) {
    var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {
        equalityCheck: equalityCheckOrOptions
    };
    var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
    var comparator = createCacheKeyComparator(equalityCheck);
    var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons
    function memoized() {
        var value = cache.get(arguments);
        if (value === NOT_FOUND) {
            // @ts-ignore
            value = func.apply(null, arguments);
            if (resultEqualityCheck) {
                var entries = cache.getEntries();
                var matchingEntry = entries.find(function(entry) {
                    return resultEqualityCheck(entry.value, value);
                });
                if (matchingEntry) value = matchingEntry.value;
            }
            cache.put(arguments, value);
        }
        return value;
    }
    memoized.clearCache = function() {
        return cache.clear();
    };
    return memoized;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDNB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__DO_NOT_USE__ActionTypes", ()=>ActionTypes
);
parcelHelpers.export(exports, "applyMiddleware", ()=>applyMiddleware
);
parcelHelpers.export(exports, "bindActionCreators", ()=>bindActionCreators
);
parcelHelpers.export(exports, "combineReducers", ()=>combineReducers
);
parcelHelpers.export(exports, "compose", ()=>compose
);
parcelHelpers.export(exports, "createStore", ()=>createStore
);
var _objectSpread2 = require("@babel/runtime/helpers/esm/objectSpread2");
var _objectSpread2Default = parcelHelpers.interopDefault(_objectSpread2);
/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */ function formatProdErrorMessage(code) {
    return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
}
// Inlined version of the `symbol-observable` polyfill
var $$observable = function() {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();
/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */ var randomString = function randomString() {
    return Math.random().toString(36).substring(7).split('').join('.');
};
var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
};
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */ function isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = obj;
    while(Object.getPrototypeOf(proto) !== null)proto = Object.getPrototypeOf(proto);
    return Object.getPrototypeOf(obj) === proto;
}
// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
function miniKindOf(val) {
    if (val === void 0) return 'undefined';
    if (val === null) return 'null';
    var type = typeof val;
    switch(type){
        case 'boolean':
        case 'string':
        case 'number':
        case 'symbol':
        case 'function':
            return type;
    }
    if (Array.isArray(val)) return 'array';
    if (isDate(val)) return 'date';
    if (isError(val)) return 'error';
    var constructorName = ctorName(val);
    switch(constructorName){
        case 'Symbol':
        case 'Promise':
        case 'WeakMap':
        case 'WeakSet':
        case 'Map':
        case 'Set':
            return constructorName;
    } // other
    return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
}
function ctorName(val) {
    return typeof val.constructor === 'function' ? val.constructor.name : null;
}
function isError(val) {
    return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
}
function isDate(val) {
    if (val instanceof Date) return true;
    return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
}
function kindOf(val) {
    var typeOfVal = typeof val;
    typeOfVal = miniKindOf(val);
    return typeOfVal;
}
/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */ function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
        enhancer = preloadedState;
        preloadedState = undefined;
    }
    if (typeof enhancer !== 'undefined') {
        if (typeof enhancer !== 'function') throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
        return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== 'function') throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */ function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) nextListeners = currentListeners.slice();
    }
    /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */ function getState() {
        if (isDispatching) throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
        return currentState;
    }
    /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */ function subscribe(listener) {
        if (typeof listener !== 'function') throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
        if (isDispatching) throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
            if (!isSubscribed) return;
            if (isDispatching) throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
            currentListeners = null;
        };
    }
    /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */ function dispatch(action) {
        if (!isPlainObject(action)) throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
        if (typeof action.type === 'undefined') throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        if (isDispatching) throw new Error('Reducers may not dispatch actions.');
        try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
        } finally{
            isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for(var i = 0; i < listeners.length; i++){
            var listener = listeners[i];
            listener();
        }
        return action;
    }
    /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */ function replaceReducer(nextReducer) {
        if (typeof nextReducer !== 'function') throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
        currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
        // Any reducers that existed in both the new and old rootReducer
        // will receive the previous state. This effectively populates
        // the new state tree with any relevant data from the old one.
        dispatch({
            type: ActionTypes.REPLACE
        });
    }
    /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */ function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
            /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */ subscribe: function subscribe(observer) {
                if (typeof observer !== 'object' || observer === null) throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
                function observeState() {
                    if (observer.next) observer.next(getState());
                }
                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                    unsubscribe: unsubscribe
                };
            }
        }, _ref[$$observable] = function() {
            return this;
        }, _ref;
    } // When a store is created, an "INIT" action is dispatched so that every
    // reducer returns their initial state. This effectively populates
    // the initial state tree.
    dispatch({
        type: ActionTypes.INIT
    });
    return _ref2 = {
        dispatch: dispatch,
        subscribe: subscribe,
        getState: getState,
        replaceReducer: replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
}
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */ function warning(message) {
    /* eslint-disable no-console */ if (typeof console !== 'undefined' && typeof console.error === 'function') console.error(message);
    /* eslint-enable no-console */ try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
    } catch (e) {} // eslint-disable-line no-empty
}
function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
    if (reducerKeys.length === 0) return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    if (!isPlainObject(inputState)) return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
        return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
        unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE) return;
    if (unexpectedKeys.length > 0) return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
}
function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key) {
        var reducer = reducers[key];
        var initialState = reducer(undefined, {
            type: ActionTypes.INIT
        });
        if (typeof initialState === 'undefined') throw new Error("The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
        if (typeof reducer(undefined, {
            type: ActionTypes.PROBE_UNKNOWN_ACTION()
        }) === 'undefined') throw new Error("The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */ function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for(var i = 0; i < reducerKeys.length; i++){
        var key = reducerKeys[i];
        if (typeof reducers[key] === 'undefined') warning("No reducer provided for key \"" + key + "\"");
        if (typeof reducers[key] === 'function') finalReducers[key] = reducers[key];
    }
    var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
    // keys multiple times.
    var unexpectedKeyCache;
    unexpectedKeyCache = {};
    var shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state, action) {
        if (state === void 0) state = {};
        if (shapeAssertionError) throw shapeAssertionError;
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) warning(warningMessage);
        var hasChanged = false;
        var nextState = {};
        for(var _i = 0; _i < finalReducerKeys.length; _i++){
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === 'undefined') {
                var actionType = action && action.type;
                throw new Error("When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
            }
            nextState[_key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
function bindActionCreator(actionCreator, dispatch) {
    return function() {
        return dispatch(actionCreator.apply(this, arguments));
    };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */ function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') return bindActionCreator(actionCreators, dispatch);
    if (typeof actionCreators !== 'object' || actionCreators === null) throw new Error("bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + "'. " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
    var boundActionCreators = {};
    for(var key in actionCreators){
        var actionCreator = actionCreators[key];
        if (typeof actionCreator === 'function') boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
    return boundActionCreators;
}
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */ function compose() {
    for(var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++)funcs[_key] = arguments[_key];
    if (funcs.length === 0) return function(arg) {
        return arg;
    };
    if (funcs.length === 1) return funcs[0];
    return funcs.reduce(function(a, b) {
        return function() {
            return a(b.apply(void 0, arguments));
        };
    });
}
/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */ function applyMiddleware() {
    for(var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++)middlewares[_key] = arguments[_key];
    return function(createStore1) {
        return function() {
            var store = createStore1.apply(void 0, arguments);
            var _dispatch = function dispatch() {
                throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch() {
                    return _dispatch.apply(void 0, arguments);
                }
            };
            var chain = middlewares.map(function(middleware) {
                return middleware(middlewareAPI);
            });
            _dispatch = compose.apply(void 0, chain)(store.dispatch);
            return _objectSpread2Default.default(_objectSpread2Default.default({}, store), {}, {
                dispatch: _dispatch
            });
        };
    };
}
/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */ function isCrushed() {}
if (typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');

},{"@babel/runtime/helpers/esm/objectSpread2":"bS0uk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bS0uk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _definePropertyJs = require("./defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _definePropertyJsDefault.default(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
exports.default = _objectSpread2;

},{"./defineProperty.js":"hbmCA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hbmCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
exports.default = _defineProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iFVTZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */ function createThunkMiddleware(extraArgument) {
    // Standard Redux middleware definition pattern:
    // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware
    var middleware = function middleware(_ref) {
        var dispatch = _ref.dispatch, getState = _ref.getState;
        return function(next) {
            return function(action) {
                // The thunk middleware looks for any functions that were passed to `store.dispatch`.
                // If this "action" is really a function, call it and return the result.
                if (typeof action === 'function') // Inject the store's `dispatch` and `getState` methods, as well as any "extra arg"
                return action(dispatch, getState, extraArgument);
                 // Otherwise, pass the action down the middleware chain as usual
                return next(action);
            };
        };
    };
    return middleware;
}
var thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version
// with whatever "extra arg" they want to inject into their thunks
thunk.withExtraArgument = createThunkMiddleware;
exports.default = thunk;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3zSpK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadVaults", ()=>loadVaults
);
parcelHelpers.export(exports, "lockAll", ()=>lockAll
);
parcelHelpers.export(exports, "createNewVault", ()=>createNewVault
);
parcelHelpers.export(exports, "createNewAccountPassword", ()=>createNewAccountPassword
);
parcelHelpers.export(exports, "createNewSecureNote", ()=>createNewSecureNote
);
parcelHelpers.export(exports, "createNewCredentials", ()=>createNewCredentials
);
parcelHelpers.export(exports, "createNewFileUpload", ()=>createNewFileUpload
);
parcelHelpers.export(exports, "updateVault", ()=>updateVault
);
parcelHelpers.export(exports, "setCurrent", ()=>setCurrent
);
parcelHelpers.export(exports, "vaultsSelector", ()=>vaultsSelector
);
var _toolkit = require("@reduxjs/toolkit");
var _api = require("./api");
var _apiDefault = parcelHelpers.interopDefault(_api);
const loadVaults = _toolkit.createAsyncThunk("vaults/loadVaults", async (request)=>{
    const { user , worker  } = request;
    const ids = await _apiDefault.default.loadVaults(user);
    console.log(ids);
    const buffers = ids.map(async (id)=>{
        return await _apiDefault.default.getVault(user, id);
    });
    const vaults = await Promise.all(buffers);
    const dict = {};
    for (const [index, id1] of ids.entries())dict[id1] = vaults[index];
    console.log(dict);
    const storage = Object.entries(dict).map(async (item)=>{
        const [id, buffer] = item;
        console.log("worker", worker);
        const vault = await new worker.WebVault();
        console.log("vault", vault);
        try {
            console.log("Calling import buffer...");
            await vault.importBuffer(Array.from(new Uint8Array(buffer)));
            console.log("AFTER IMPORT BUFFER");
        } catch (e) {
            console.error(e);
        }
        return {
            uuid: id,
            label: id,
            vault,
            locked: true
        };
    });
    return await Promise.all(storage);
});
const lockAll = _toolkit.createAsyncThunk("vaults/lockAll", async (storage)=>{
    const stores = [];
    for (const store of storage){
        const newStore = {
            ...store,
            locked: true
        };
        const { vault  } = newStore;
        await vault.lock();
        stores.push(newStore);
    }
    return stores;
});
const createNewVault = _toolkit.createAsyncThunk("vaults/create", async (request)=>{
    const { worker , navigate , result  } = request;
    const { label , password  } = result;
    /* eslint-disable @typescript-eslint/no-explicit-any */ const vault = await new worker.WebVault();
    await vault.initialize(label, password);
    const uuid = await vault.id();
    const index = await vault.getSecretIndex();
    navigate(`/vault/${uuid}`);
    return {
        uuid,
        vault,
        label,
        locked: false,
        index
    };
});
const createNewAccountPassword = _toolkit.createAsyncThunk("vaults/createNewAccountPassword", async (request)=>{
    const { result , owner  } = request;
    const { vault  } = owner;
    await vault.createAccountPassword(result);
    const index = await vault.getSecretIndex();
    return {
        ...owner,
        index
    };
});
const createNewSecureNote = _toolkit.createAsyncThunk("vaults/createNewSecureNote", async (request)=>{
    const { result , owner  } = request;
    const { vault  } = owner;
    await vault.createNote(result);
    const index = await vault.getSecretIndex();
    return {
        ...owner,
        index
    };
});
const createNewCredentials = _toolkit.createAsyncThunk("vaults/createNewCredentials", async (request)=>{
    const { result , owner  } = request;
    const { vault  } = owner;
    await vault.createCredentials(result);
    const index = await vault.getSecretIndex();
    return {
        ...owner,
        index
    };
});
const createNewFileUpload = _toolkit.createAsyncThunk("vaults/createNewFileUpload", async (request)=>{
    const { result , owner  } = request;
    const { vault  } = owner;
    try {
        await vault.createFileUpload(result);
    } catch (e) {
        console.error(e);
    }
    const index = await vault.getSecretIndex();
    return {
        ...owner,
        index
    };
});
const initialState = {
    vaults: [],
    current: null
};
const updateVaultFromThunk = (state, action)=>{
    const { payload  } = action;
    state.current = payload;
    state.vaults = state.vaults.map((prop)=>{
        if (payload.uuid === prop.uuid) return payload;
        else return prop;
    });
};
const vaultsSlice = _toolkit.createSlice({
    name: "vaults",
    initialState,
    reducers: {
        setCurrent: (state, { payload  })=>{
            state.current = payload;
        },
        updateVault: (state, { payload  })=>{
            state.vaults = state.vaults.map((prop)=>{
                if (payload.uuid === prop.uuid) return payload;
                else return prop;
            });
        }
    },
    extraReducers: (builder)=>{
        builder.addCase(createNewVault.fulfilled, (state, action)=>{
            state.vaults = [
                action.payload,
                ...state.vaults
            ];
            state.current = action.payload;
        });
        builder.addCase(loadVaults.fulfilled, (state, action)=>{
            state.vaults = action.payload;
        });
        builder.addCase(lockAll.fulfilled, (state, action)=>{
            state.vaults = action.payload;
        });
        builder.addCase(createNewAccountPassword.fulfilled, updateVaultFromThunk);
        builder.addCase(createNewSecureNote.fulfilled, updateVaultFromThunk);
        builder.addCase(createNewCredentials.fulfilled, updateVaultFromThunk);
        builder.addCase(createNewFileUpload.fulfilled, updateVaultFromThunk);
    }
});
const { updateVault , setCurrent  } = vaultsSlice.actions;
const vaultsSelector = (state)=>state.vaults
;
exports.default = vaultsSlice.reducer;

},{"@reduxjs/toolkit":"lL1Ef","./api":"9RB8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9RB8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Client consumer of the server API.
parcelHelpers.export(exports, "VaultApi", ()=>VaultApi
);
class VaultApi {
    constructor(url){
        this.url = url;
    }
    // Load the vault list for a user.
    async loadVaults(user) {
        const url = `${this.url}/users/${user.address}`;
        const response = await fetch(url);
        return response.json();
    }
    // Load the encrypted vault buffer for a user.
    async getVault(user, id) {
        const url = `${this.url}/users/${user.address}/vaults/${id}`;
        const response = await fetch(url);
        return response.arrayBuffer();
    }
}
const api = new VaultApi("http://localhost:5053/api");
exports.default = api;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qJjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NEW_VAULT", ()=>NEW_VAULT
);
parcelHelpers.export(exports, "NEW_SECURE_NOTE", ()=>NEW_SECURE_NOTE
);
parcelHelpers.export(exports, "NEW_ACCOUNT_PASSWORD", ()=>NEW_ACCOUNT_PASSWORD
);
parcelHelpers.export(exports, "NEW_CREDENTIALS", ()=>NEW_CREDENTIALS
);
parcelHelpers.export(exports, "NEW_FILE_UPLOAD", ()=>NEW_FILE_UPLOAD
);
parcelHelpers.export(exports, "setDialogVisible", ()=>setDialogVisible
);
parcelHelpers.export(exports, "dialogsSelector", ()=>dialogsSelector
);
var _toolkit = require("@reduxjs/toolkit");
const NEW_VAULT = "new-vault";
const NEW_SECURE_NOTE = "new-secure-note";
const NEW_ACCOUNT_PASSWORD = "new-account-password";
const NEW_CREDENTIALS = "new-credentials";
const NEW_FILE_UPLOAD = "new-file-upload";
const initialState = {
    dialogs: {}
};
const dialogsSlice = _toolkit.createSlice({
    name: "dialogs",
    initialState,
    reducers: {
        setDialogVisible: (state, { payload  })=>{
            const [key, value] = payload;
            const dialogs = Object.assign(state.dialogs);
            dialogs[key] = value;
            state.dialogs = dialogs;
        }
    }
});
const { setDialogVisible  } = dialogsSlice.actions;
const dialogsSelector = (state)=>state.dialogs
;
exports.default = dialogsSlice.reducer;

},{"@reduxjs/toolkit":"lL1Ef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dzJ1K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setAuthToken", ()=>setAuthToken
);
parcelHelpers.export(exports, "login", ()=>login
);
parcelHelpers.export(exports, "logout", ()=>logout
);
parcelHelpers.export(exports, "userSelector", ()=>userSelector
);
var _toolkit = require("@reduxjs/toolkit");
const initialState = {
    user: {
        token: "mock-logged-in-token",
        address: "0x8a67d6f4aae8165512774d63992623e10494c69f"
    }
};
const userSlice = _toolkit.createSlice({
    name: "user",
    initialState,
    reducers: {
        login: (state, { payload  })=>{
            state.user = payload;
        },
        logout: (state, { payload  })=>{
            state.user = null;
        },
        setAuthToken: (state, { payload  })=>{
            let user = {
                ...state.user,
                token: payload
            };
            state.user = user;
        }
    }
});
const { setAuthToken , login , logout  } = userSlice.actions;
const userSelector = (state)=>state.user
;
exports.default = userSlice.reducer;

},{"@reduxjs/toolkit":"lL1Ef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jELS":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$a86b = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$a86b.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WorkerContext", ()=>WorkerContext
);
parcelHelpers.export(exports, "webWorker", ()=>webWorker
);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _comlink = require("comlink");
const WorkerContext = /*#__PURE__*/ _react.createContext(null);
console.log("Creating new worker....");
const webWorker = new Worker(require("c403eefe3b81bcb0"));
const worker = _comlink.wrap(webWorker);
const WorkerProvider = (props)=>{
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(WorkerContext.Provider, {
        value: worker,
        children: props.children
    }, void 0, false, {
        fileName: "src/worker-provider.tsx",
        lineNumber: 16,
        columnNumber: 5
    }, undefined);
};
_c = WorkerProvider;
exports.default = WorkerProvider;
var _c;
$RefreshReg$(_c, "WorkerProvider");

  $parcel$ReactRefreshHelpers$a86b.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","comlink":"jUFlY","c403eefe3b81bcb0":"fcwXi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"jUFlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEndpoint", ()=>createEndpoint
);
parcelHelpers.export(exports, "expose", ()=>expose
);
parcelHelpers.export(exports, "proxy", ()=>proxy
);
parcelHelpers.export(exports, "proxyMarker", ()=>proxyMarker
);
parcelHelpers.export(exports, "releaseProxy", ()=>releaseProxy
);
parcelHelpers.export(exports, "transfer", ()=>transfer
);
parcelHelpers.export(exports, "transferHandlers", ()=>transferHandlers
);
parcelHelpers.export(exports, "windowEndpoint", ()=>windowEndpoint
);
parcelHelpers.export(exports, "wrap", ()=>wrap
);
/**
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const proxyMarker = Symbol("Comlink.proxy");
const createEndpoint = Symbol("Comlink.endpoint");
const releaseProxy = Symbol("Comlink.releaseProxy");
const throwMarker = Symbol("Comlink.thrown");
const isObject = (val)=>typeof val === "object" && val !== null || typeof val === "function"
;
/**
 * Internal transfer handle to handle objects marked to proxy.
 */ const proxyTransferHandler = {
    canHandle: (val)=>isObject(val) && val[proxyMarker]
    ,
    serialize (obj) {
        const { port1 , port2  } = new MessageChannel();
        expose(obj, port1);
        return [
            port2,
            [
                port2
            ]
        ];
    },
    deserialize (port) {
        port.start();
        return wrap(port);
    }
};
/**
 * Internal transfer handler to handle thrown exceptions.
 */ const throwTransferHandler = {
    canHandle: (value)=>isObject(value) && throwMarker in value
    ,
    serialize ({ value  }) {
        let serialized;
        if (value instanceof Error) serialized = {
            isError: true,
            value: {
                message: value.message,
                name: value.name,
                stack: value.stack
            }
        };
        else serialized = {
            isError: false,
            value
        };
        return [
            serialized,
            []
        ];
    },
    deserialize (serialized) {
        if (serialized.isError) throw Object.assign(new Error(serialized.value.message), serialized.value);
        throw serialized.value;
    }
};
/**
 * Allows customizing the serialization of certain values.
 */ const transferHandlers = new Map([
    [
        "proxy",
        proxyTransferHandler
    ],
    [
        "throw",
        throwTransferHandler
    ], 
]);
function expose(obj1, ep = self) {
    ep.addEventListener("message", function callback(ev) {
        if (!ev || !ev.data) return;
        const { id , type , path  } = Object.assign({
            path: []
        }, ev.data);
        const argumentList = (ev.data.argumentList || []).map(fromWireValue);
        let returnValue1;
        try {
            const parent = path.slice(0, -1).reduce((obj, prop)=>obj[prop]
            , obj1);
            const rawValue = path.reduce((obj, prop)=>obj[prop]
            , obj1);
            switch(type){
                case "GET" /* GET */ :
                    returnValue1 = rawValue;
                    break;
                case "SET" /* SET */ :
                    parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
                    returnValue1 = true;
                    break;
                case "APPLY" /* APPLY */ :
                    returnValue1 = rawValue.apply(parent, argumentList);
                    break;
                case "CONSTRUCT" /* CONSTRUCT */ :
                    {
                        const value = new rawValue(...argumentList);
                        returnValue1 = proxy(value);
                    }
                    break;
                case "ENDPOINT" /* ENDPOINT */ :
                    {
                        const { port1 , port2  } = new MessageChannel();
                        expose(obj1, port2);
                        returnValue1 = transfer(port1, [
                            port1
                        ]);
                    }
                    break;
                case "RELEASE" /* RELEASE */ :
                    returnValue1 = undefined;
                    break;
                default:
                    return;
            }
        } catch (value1) {
            returnValue1 = {
                value: value1,
                [throwMarker]: 0
            };
        }
        Promise.resolve(returnValue1).catch((value)=>{
            return {
                value,
                [throwMarker]: 0
            };
        }).then((returnValue)=>{
            const [wireValue, transferables] = toWireValue(returnValue);
            ep.postMessage(Object.assign(Object.assign({}, wireValue), {
                id
            }), transferables);
            if (type === "RELEASE" /* RELEASE */ ) {
                // detach and deactive after sending release response above.
                ep.removeEventListener("message", callback);
                closeEndPoint(ep);
            }
        });
    });
    if (ep.start) ep.start();
}
function isMessagePort(endpoint) {
    return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
    if (isMessagePort(endpoint)) endpoint.close();
}
function wrap(ep, target) {
    return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
    if (isReleased) throw new Error("Proxy has been released and is not useable");
}
function createProxy(ep, path = [], target = function() {}) {
    let isProxyReleased = false;
    const proxy1 = new Proxy(target, {
        get (_target, prop) {
            throwIfProxyReleased(isProxyReleased);
            if (prop === releaseProxy) return ()=>{
                return requestResponseMessage(ep, {
                    type: "RELEASE" /* RELEASE */ ,
                    path: path.map((p)=>p.toString()
                    )
                }).then(()=>{
                    closeEndPoint(ep);
                    isProxyReleased = true;
                });
            };
            if (prop === "then") {
                if (path.length === 0) return {
                    then: ()=>proxy1
                };
                const r = requestResponseMessage(ep, {
                    type: "GET" /* GET */ ,
                    path: path.map((p)=>p.toString()
                    )
                }).then(fromWireValue);
                return r.then.bind(r);
            }
            return createProxy(ep, [
                ...path,
                prop
            ]);
        },
        set (_target, prop, rawValue) {
            throwIfProxyReleased(isProxyReleased);
            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a
            // boolean. To show good will, we return true asynchronously ¯\_(ツ)_/¯
            const [value, transferables] = toWireValue(rawValue);
            return requestResponseMessage(ep, {
                type: "SET" /* SET */ ,
                path: [
                    ...path,
                    prop
                ].map((p)=>p.toString()
                ),
                value
            }, transferables).then(fromWireValue);
        },
        apply (_target, _thisArg, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const last = path[path.length - 1];
            if (last === createEndpoint) return requestResponseMessage(ep, {
                type: "ENDPOINT" /* ENDPOINT */ 
            }).then(fromWireValue);
            // We just pretend that `bind()` didn’t happen.
            if (last === "bind") return createProxy(ep, path.slice(0, -1));
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "APPLY" /* APPLY */ ,
                path: path.map((p)=>p.toString()
                ),
                argumentList
            }, transferables).then(fromWireValue);
        },
        construct (_target, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "CONSTRUCT" /* CONSTRUCT */ ,
                path: path.map((p)=>p.toString()
                ),
                argumentList
            }, transferables).then(fromWireValue);
        }
    });
    return proxy1;
}
function myFlat(arr) {
    return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
    const processed = argumentList.map(toWireValue);
    return [
        processed.map((v)=>v[0]
        ),
        myFlat(processed.map((v)=>v[1]
        ))
    ];
}
const transferCache = new WeakMap();
function transfer(obj, transfers) {
    transferCache.set(obj, transfers);
    return obj;
}
function proxy(obj) {
    return Object.assign(obj, {
        [proxyMarker]: true
    });
}
function windowEndpoint(w, context = self, targetOrigin = "*") {
    return {
        postMessage: (msg, transferables)=>w.postMessage(msg, targetOrigin, transferables)
        ,
        addEventListener: context.addEventListener.bind(context),
        removeEventListener: context.removeEventListener.bind(context)
    };
}
function toWireValue(value) {
    for (const [name, handler] of transferHandlers)if (handler.canHandle(value)) {
        const [serializedValue, transferables] = handler.serialize(value);
        return [
            {
                type: "HANDLER" /* HANDLER */ ,
                name,
                value: serializedValue
            },
            transferables, 
        ];
    }
    return [
        {
            type: "RAW" /* RAW */ ,
            value
        },
        transferCache.get(value) || [], 
    ];
}
function fromWireValue(value) {
    switch(value.type){
        case "HANDLER" /* HANDLER */ :
            return transferHandlers.get(value.name).deserialize(value.value);
        case "RAW" /* RAW */ :
            return value.value;
    }
}
function requestResponseMessage(ep, msg, transfers) {
    return new Promise((resolve)=>{
        const id = generateUUID();
        ep.addEventListener("message", function l(ev) {
            if (!ev.data || !ev.data.id || ev.data.id !== id) return;
            ep.removeEventListener("message", l);
            resolve(ev.data);
        });
        if (ep.start) ep.start();
        ep.postMessage(Object.assign({
            id
        }, msg), transfers);
    });
}
function generateUUID() {
    return new Array(4).fill(0).map(()=>Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)
    ).join("-");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fcwXi":[function(require,module,exports) {
let workerURL = require('./helpers/get-worker-url');
let bundleURL = require('./helpers/bundle-url');
let url = bundleURL.getBundleURL('6EXJA') + "worker.7db43ac5.js" + "?" + Date.now();
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"./helpers/get-worker-url":"cn2gM","./helpers/bundle-url":"lgJ39"}],"cn2gM":[function(require,module,exports) {
"use strict";
module.exports = function(workerUrl, origin, isESM) {
    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,
    // use the worker bundle's own url.
    return workerUrl;
    else {
        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.
        var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';
        return URL.createObjectURL(new Blob([
            source
        ], {
            type: 'application/javascript'
        }));
    }
};

},{}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"km3Ru":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args1;
    var timeout = undefined;
    return function(args) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"786KC"}],"41oNQ":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$13a7 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$13a7.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRouterDom = require("react-router-dom");
var _styles = require("@mui/material/styles");
var _box = require("@mui/material/Box");
var _boxDefault = parcelHelpers.interopDefault(_box);
var _appBar = require("@mui/material/AppBar");
var _appBarDefault = parcelHelpers.interopDefault(_appBar);
var _toolbar = require("@mui/material/Toolbar");
var _toolbarDefault = parcelHelpers.interopDefault(_toolbar);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _logotype = require("./logotype");
var _logotypeDefault = parcelHelpers.interopDefault(_logotype);
var _appBarActions = require("./app-bar-actions");
var _appBarActionsDefault = parcelHelpers.interopDefault(_appBarActions);
const NotFound = ()=>/*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
        children: "Page not found"
    }, void 0, false, {
        fileName: "src/app.tsx",
        lineNumber: 16,
        columnNumber: 24
    }, undefined)
;
_c = NotFound;
const Main = _styles.styled("div", {
    shouldForwardProp: (prop)=>prop !== "open"
})(({ theme  })=>({
        flexGrow: 1,
        padding: theme.spacing(3)
    })
);
_c1 = Main;
function App(props) {
    //const { worker } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
        sx: {
            display: "flex",
            flexDirection: "column"
        },
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_appBarDefault.default, {
                position: "relative",
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_toolbarDefault.default, {
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                        sx: {
                            width: "100%"
                        },
                        direction: "row",
                        justifyContent: "space-between",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_logotypeDefault.default, {}, void 0, false, {
                                fileName: "src/app.tsx",
                                lineNumber: 40,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_appBarActionsDefault.default, {}, void 0, false, {
                                fileName: "src/app.tsx",
                                lineNumber: 41,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "src/app.tsx",
                        lineNumber: 35,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/app.tsx",
                    lineNumber: 34,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/app.tsx",
                lineNumber: 33,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(Main, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Routes, {
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Route, {
                        path: "*",
                        element: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(NotFound, {}, void 0, false, void 0, void 0)
                    }, void 0, false, {
                        fileName: "src/app.tsx",
                        lineNumber: 47,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/app.tsx",
                    lineNumber: 46,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/app.tsx",
                lineNumber: 45,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/app.tsx",
        lineNumber: 32,
        columnNumber: 5
    }, this);
}
exports.default = App;
_c2 = App;
var _c, _c1, _c2;
$RefreshReg$(_c, "NotFound");
$RefreshReg$(_c1, "Main");
$RefreshReg$(_c2, "App");

  $parcel$ReactRefreshHelpers$13a7.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-router-dom":"fdOAw","@mui/material/styles":"1lzai","@mui/material/Box":"eQD0H","@mui/material/AppBar":"c3vaq","@mui/material/Toolbar":"h8rSE","@mui/material/Stack":"cuThX","./logotype":"58Jxp","./app-bar-actions":"dogLf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"eQD0H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_boxDefault.default
);
var _box = require("./Box");
var _boxDefault = parcelHelpers.interopDefault(_box);

},{"./Box":"hk5c0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hk5c0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _system = require("@mui/system");
var _className = require("../className");
var _styles = require("../styles");
const defaultTheme = _styles.createTheme();
/**
 * @ignore - do not document.
 */ const Box = _system.createBox({
    defaultTheme,
    defaultClassName: 'MuiBox-root',
    generateClassName: _className.unstable_ClassNameGenerator.generate
});
exports.default = Box;

},{"@mui/system":"Q0Zql","../className":"3zmn3","../styles":"1lzai","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3zmn3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Caution! this module must not include unstyled components import from `@mui/base`, otherwise, it will break the ClassNameGenerator.
 * ❌ import { ... } from '@mui/base';
 * ✅ import { ... } from '@mui/base/utils'; // must be specific base module
 *
 * Issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401
 */ // eslint-disable-next-line import/prefer-default-export
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>_className.unstable_ClassNameGenerator
);
var _className = require("@mui/base/className");

},{"@mui/base/className":"kRsty","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRsty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// eslint-disable-next-line import/prefer-default-export
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>_classNameGeneratorDefault.default
);
var _classNameGenerator = require("./ClassNameGenerator");
var _classNameGeneratorDefault = parcelHelpers.interopDefault(_classNameGenerator);

},{"./ClassNameGenerator":"blICS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3vaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_appBarDefault.default
);
parcelHelpers.export(exports, "appBarClasses", ()=>_appBarClassesDefault.default
);
var _appBar = require("./AppBar");
var _appBarDefault = parcelHelpers.interopDefault(_appBar);
var _appBarClasses = require("./appBarClasses");
var _appBarClassesDefault = parcelHelpers.interopDefault(_appBarClasses);
parcelHelpers.exportAll(_appBarClasses, exports);

},{"./AppBar":"4HScv","./appBarClasses":"c3tiH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4HScv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _appBarClasses = require("./appBarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "color",
    "enableColorOnDark",
    "position"
];
const useUtilityClasses = (ownerState)=>{
    const { color , position , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            `color${_capitalizeDefault.default(color)}`,
            `position${_capitalizeDefault.default(position)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _appBarClasses.getAppBarUtilityClass, classes);
};
const AppBarRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiAppBar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`position${_capitalizeDefault.default(ownerState.position)}`],
            styles[`color${_capitalizeDefault.default(ownerState.color)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extendsDefault.default({
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        boxSizing: 'border-box',
        // Prevent padding issue with the Modal and fixed positioned AppBar.
        flexShrink: 0
    }, ownerState.position === 'fixed' && {
        position: 'fixed',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0,
        '@media print': {
            // Prevent the app bar to be visible on each printed page.
            position: 'absolute'
        }
    }, ownerState.position === 'absolute' && {
        position: 'absolute',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
    }, ownerState.position === 'sticky' && {
        // ⚠️ sticky is not supported by IE11.
        position: 'sticky',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
    }, ownerState.position === 'static' && {
        position: 'static'
    }, ownerState.position === 'relative' && {
        position: 'relative'
    }, ownerState.color === 'default' && {
        backgroundColor: backgroundColorDefault,
        color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
        backgroundColor: theme.palette[ownerState.color].main,
        color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === 'inherit' && {
        color: 'inherit'
    }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
        backgroundColor: null,
        color: null
    }, ownerState.color === 'transparent' && _extendsDefault.default({
        backgroundColor: 'transparent',
        color: 'inherit'
    }, theme.palette.mode === 'dark' && {
        backgroundImage: 'none'
    }));
});
const AppBar = /*#__PURE__*/ _react.forwardRef(function AppBar(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiAppBar'
    });
    const { className , color ='primary' , enableColorOnDark =false , position ='fixed'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        position,
        enableColorOnDark
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(AppBarRoot, _extendsDefault.default({
        square: true,
        component: "header",
        ownerState: ownerState,
        elevation: 4,
        className: _clsxDefault.default(classes.root, className, position === 'fixed' && 'mui-fixed'),
        ref: ref
    }, other));
});
AppBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'default',
            'inherit',
            'primary',
            'secondary',
            'transparent'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If true, the `color` prop is applied in dark mode.
   * @default false
   */ enableColorOnDark: _propTypesDefault.default.bool,
    /**
   * The positioning type. The behavior of the different options is described
   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
   * @default 'fixed'
   */ position: _propTypesDefault.default.oneOf([
        'absolute',
        'fixed',
        'relative',
        'static',
        'sticky'
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = AppBar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","../Paper":"6IiTP","./appBarClasses":"c3tiH","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwNtZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_capitalize;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6IiTP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_paperDefault.default
);
parcelHelpers.export(exports, "paperClasses", ()=>_paperClassesDefault.default
);
var _paper = require("./Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _paperClasses = require("./paperClasses");
var _paperClassesDefault = parcelHelpers.interopDefault(_paperClasses);
parcelHelpers.exportAll(_paperClasses, exports);

},{"./Paper":"35dx7","./paperClasses":"24HY0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"35dx7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _paperClasses = require("./paperClasses"); // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "elevation",
    "square",
    "variant"
];
const getOverlayAlpha = (elevation)=>{
    let alphaValue;
    if (elevation < 1) alphaValue = 5.11916 * elevation ** 2;
    else alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    return (alphaValue / 100).toFixed(2);
};
const useUtilityClasses = (ownerState)=>{
    const { square , elevation , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            !square && 'rounded',
            variant === 'elevation' && `elevation${elevation}`
        ]
    };
    return _base.unstable_composeClasses(slots, _paperClasses.getPaperUtilityClass, classes);
};
const PaperRoot = _styledDefault.default('div', {
    name: 'MuiPaper',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            !ownerState.square && styles.rounded,
            ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        transition: theme.transitions.create('box-shadow')
    }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
    }, ownerState.variant === 'outlined' && {
        border: `1px solid ${theme.palette.divider}`
    }, ownerState.variant === 'elevation' && _extendsDefault.default({
        boxShadow: theme.shadows[ownerState.elevation]
    }, theme.palette.mode === 'dark' && {
        backgroundImage: `linear-gradient(${_system.alpha('#fff', getOverlayAlpha(ownerState.elevation))}, ${_system.alpha('#fff', getOverlayAlpha(ownerState.elevation))})`
    }))
);
const Paper = /*#__PURE__*/ _react.forwardRef(function Paper(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiPaper'
    });
    const { className , component ='div' , elevation =1 , square =false , variant ='elevation'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        component,
        elevation,
        square,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const theme = _useThemeDefault.default();
        if (theme.shadows[elevation] === undefined) console.error([
            `MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`,
            `Please make sure that \`theme.shadows[${elevation}]\` is defined.`
        ].join('\n'));
    }
    return /*#__PURE__*/ _jsxRuntime.jsx(PaperRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other));
});
Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */ elevation: _utils.chainPropTypes(_utils.integerPropType, (props)=>{
        const { elevation , variant  } = props;
        if (elevation > 0 && variant === 'outlined') return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        return null;
    }),
    /**
   * If `true`, rounded corners are disabled.
   * @default false
   */ square: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'elevation'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'elevation',
            'outlined'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Paper;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../styles/useTheme":"5nWMX","./paperClasses":"24HY0","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24HY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPaperUtilityClass", ()=>getPaperUtilityClass
);
var _base = require("@mui/base");
function getPaperUtilityClass(slot) {
    return _base.generateUtilityClass('MuiPaper', slot);
}
const paperClasses = _base.generateUtilityClasses('MuiPaper', [
    'root',
    'rounded',
    'outlined',
    'elevation',
    'elevation0',
    'elevation1',
    'elevation2',
    'elevation3',
    'elevation4',
    'elevation5',
    'elevation6',
    'elevation7',
    'elevation8',
    'elevation9',
    'elevation10',
    'elevation11',
    'elevation12',
    'elevation13',
    'elevation14',
    'elevation15',
    'elevation16',
    'elevation17',
    'elevation18',
    'elevation19',
    'elevation20',
    'elevation21',
    'elevation22',
    'elevation23',
    'elevation24'
]);
exports.default = paperClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3tiH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAppBarUtilityClass", ()=>getAppBarUtilityClass
);
var _base = require("@mui/base");
function getAppBarUtilityClass(slot) {
    return _base.generateUtilityClass('MuiAppBar', slot);
}
const appBarClasses = _base.generateUtilityClasses('MuiAppBar', [
    'root',
    'positionFixed',
    'positionAbsolute',
    'positionSticky',
    'positionStatic',
    'positionRelative',
    'colorDefault',
    'colorPrimary',
    'colorSecondary',
    'colorInherit',
    'colorTransparent'
]);
exports.default = appBarClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h8rSE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toolbarDefault.default
);
parcelHelpers.export(exports, "toolbarClasses", ()=>_toolbarClassesDefault.default
);
var _toolbar = require("./Toolbar");
var _toolbarDefault = parcelHelpers.interopDefault(_toolbar);
var _toolbarClasses = require("./toolbarClasses");
var _toolbarClassesDefault = parcelHelpers.interopDefault(_toolbarClasses);
parcelHelpers.exportAll(_toolbarClasses, exports);

},{"./Toolbar":"3khem","./toolbarClasses":"3S6ew","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3khem":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _toolbarClasses = require("./toolbarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "disableGutters",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disableGutters , variant  } = ownerState;
    const slots = {
        root: [
            'root',
            !disableGutters && 'gutters',
            variant
        ]
    };
    return _base.unstable_composeClasses(slots, _toolbarClasses.getToolbarUtilityClass, classes);
};
const ToolbarRoot = _styledDefault.default('div', {
    name: 'MuiToolbar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            !ownerState.disableGutters && styles.gutters,
            styles[ownerState.variant]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        position: 'relative',
        display: 'flex',
        alignItems: 'center'
    }, !ownerState.disableGutters && {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        [theme.breakpoints.up('sm')]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
        }
    }, ownerState.variant === 'dense' && {
        minHeight: 48
    })
, ({ theme , ownerState  })=>ownerState.variant === 'regular' && theme.mixins.toolbar
);
const Toolbar = /*#__PURE__*/ _react.forwardRef(function Toolbar(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiToolbar'
    });
    const { className , component ='div' , disableGutters =false , variant ='regular'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        component,
        disableGutters,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(ToolbarRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        ownerState: ownerState
    }, other));
});
Toolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
   * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, disables gutter padding.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'regular'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'dense',
            'regular'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Toolbar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./toolbarClasses":"3S6ew","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3S6ew":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getToolbarUtilityClass", ()=>getToolbarUtilityClass
);
var _base = require("@mui/base");
function getToolbarUtilityClass(slot) {
    return _base.generateUtilityClass('MuiToolbar', slot);
}
const toolbarClasses = _base.generateUtilityClasses('MuiToolbar', [
    'root',
    'gutters',
    'regular',
    'dense'
]);
exports.default = toolbarClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cuThX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_stackDefault.default
);
var _stack = require("./Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);

},{"./Stack":"dAbfF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dAbfF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "style", ()=>style
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _system = require("@mui/system");
var _utils = require("@mui/utils");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
/**
 * Return an array with the separator React element interspersed between
 * each React node of the input children.
 *
 * > joinChildren([1,2,3], 0)
 * [1,0,2,0,3]
 */ var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "component",
    "direction",
    "spacing",
    "divider",
    "children"
];
function joinChildren(children, separator) {
    const childrenArray = _react.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index)=>{
        output.push(child);
        if (index < childrenArray.length - 1) output.push(/*#__PURE__*/ _react.cloneElement(separator, {
            key: `separator-${index}`
        }));
        return output;
    }, []);
}
const getSideFromDirection = (direction)=>{
    return ({
        row: 'Left',
        'row-reverse': 'Right',
        column: 'Top',
        'column-reverse': 'Bottom'
    })[direction];
};
const style = ({ ownerState , theme  })=>{
    let styles = _extendsDefault.default({
        display: 'flex'
    }, _system.handleBreakpoints({
        theme
    }, _system.unstable_resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme.breakpoints.values
    }), (propValue)=>({
            flexDirection: propValue
        })
    ));
    if (ownerState.spacing) {
        const transformer = _system.createUnarySpacing(theme);
        const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint)=>{
            if (ownerState.spacing[breakpoint] != null || ownerState.direction[breakpoint] != null) acc[breakpoint] = true;
            return acc;
        }, {});
        const directionValues = _system.unstable_resolveBreakpointValues({
            values: ownerState.direction,
            base
        });
        const spacingValues = _system.unstable_resolveBreakpointValues({
            values: ownerState.spacing,
            base
        });
        const styleFromPropValue = (propValue, breakpoint)=>{
            return {
                '& > :not(style) + :not(style)': {
                    margin: 0,
                    [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: _system.getValue(transformer, propValue)
                }
            };
        };
        styles = _utils.deepmerge(styles, _system.handleBreakpoints({
            theme
        }, spacingValues, styleFromPropValue));
    }
    return styles;
};
const StackRoot = _styledDefault.default('div', {
    name: 'MuiStack',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        return [
            styles.root
        ];
    }
})(style);
const Stack = /*#__PURE__*/ _react.forwardRef(function Stack(inProps, ref) {
    const themeProps = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiStack'
    });
    const props = _system.unstable_extendSxProp(themeProps);
    const { component ='div' , direction ='column' , spacing =0 , divider , children  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = {
        direction,
        spacing
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(StackRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: divider ? joinChildren(children, divider) : children
    }));
});
Stack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */ direction: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'column-reverse',
            'column',
            'row-reverse',
            'row'
        ]),
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOf([
            'column-reverse',
            'column',
            'row-reverse',
            'row'
        ])),
        _propTypesDefault.default.object
    ]),
    /**
   * Add an element between each child.
   */ divider: _propTypesDefault.default.node,
    /**
   * Defines the space between immediate children.
   * @default 0
   */ spacing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.number,
            _propTypesDefault.default.string
        ])),
        _propTypesDefault.default.number,
        _propTypesDefault.default.object,
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = Stack;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/system":"Q0Zql","@mui/utils":"cttLn","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58Jxp":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$4532 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$4532.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _typography = require("@mui/material/Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _link = require("@mui/material/Link");
var _linkDefault = parcelHelpers.interopDefault(_link);
function LogoType() {
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
        variant: "h6",
        noWrap: true,
        component: "div",
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_linkDefault.default, {
            href: "/",
            color: "inherit",
            children: "SOS3"
        }, void 0, false, {
            fileName: "src/logotype.tsx",
            lineNumber: 9,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/logotype.tsx",
        lineNumber: 8,
        columnNumber: 5
    }, this);
}
exports.default = LogoType;
_c = LogoType;
var _c;
$RefreshReg$(_c, "LogoType");

  $parcel$ReactRefreshHelpers$4532.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Typography":"faxSz","@mui/material/Link":"f1yGe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"faxSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_typographyDefault.default
);
parcelHelpers.export(exports, "typographyClasses", ()=>_typographyClassesDefault.default
);
var _typography = require("./Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _typographyClasses = require("./typographyClasses");
var _typographyClassesDefault = parcelHelpers.interopDefault(_typographyClasses);
parcelHelpers.exportAll(_typographyClasses, exports);

},{"./Typography":"chcJ4","./typographyClasses":"aW8pq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chcJ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypographyRoot", ()=>TypographyRoot
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _system = require("@mui/system");
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _typographyClasses = require("./typographyClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "align",
    "className",
    "component",
    "gutterBottom",
    "noWrap",
    "paragraph",
    "variant",
    "variantMapping"
];
const useUtilityClasses = (ownerState)=>{
    const { align , gutterBottom , noWrap , paragraph , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            ownerState.align !== 'inherit' && `align${_capitalizeDefault.default(align)}`,
            gutterBottom && 'gutterBottom',
            noWrap && 'noWrap',
            paragraph && 'paragraph'
        ]
    };
    return _base.unstable_composeClasses(slots, _typographyClasses.getTypographyUtilityClass, classes);
};
const TypographyRoot = _styledDefault.default('span', {
    name: 'MuiTypography',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.variant && styles[ownerState.variant],
            ownerState.align !== 'inherit' && styles[`align${_capitalizeDefault.default(ownerState.align)}`],
            ownerState.noWrap && styles.noWrap,
            ownerState.gutterBottom && styles.gutterBottom,
            ownerState.paragraph && styles.paragraph
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
        textAlign: ownerState.align
    }, ownerState.noWrap && {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
    }, ownerState.gutterBottom && {
        marginBottom: '0.35em'
    }, ownerState.paragraph && {
        marginBottom: 16
    })
);
const defaultVariantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    inherit: 'p'
}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
};
const transformDeprecatedColors = (color)=>{
    return colorTransformations[color] || color;
};
const Typography = /*#__PURE__*/ _react.forwardRef(function Typography(inProps, ref) {
    const themeProps = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTypography'
    });
    const color = transformDeprecatedColors(themeProps.color);
    const props = _system.unstable_extendSxProp(_extendsDefault.default({}, themeProps, {
        color
    }));
    const { align ='inherit' , className , component , gutterBottom =false , noWrap =false , paragraph =false , variant ='body1' , variantMapping =defaultVariantMapping  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
    });
    const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(TypographyRoot, _extendsDefault.default({
        as: Component,
        ref: ref,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className)
    }, other));
});
Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Set the text-align on the component.
   * @default 'inherit'
   */ align: _propTypesDefault.default.oneOf([
        'center',
        'inherit',
        'justify',
        'left',
        'right'
    ]),
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */ gutterBottom: _propTypesDefault.default.bool,
    /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */ noWrap: _propTypesDefault.default.bool,
    /**
   * If `true`, the element will be a paragraph element.
   * @default false
   */ paragraph: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Applies the theme typography styles.
   * @default 'body1'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'body1',
            'body2',
            'button',
            'caption',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'inherit',
            'overline',
            'subtitle1',
            'subtitle2'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */ variantMapping: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .object
};
exports.default = Typography;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/system":"Q0Zql","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","./typographyClasses":"aW8pq","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aW8pq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTypographyUtilityClass", ()=>getTypographyUtilityClass
);
var _base = require("@mui/base");
function getTypographyUtilityClass(slot) {
    return _base.generateUtilityClass('MuiTypography', slot);
}
const typographyClasses = _base.generateUtilityClasses('MuiTypography', [
    'root',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'subtitle1',
    'subtitle2',
    'body1',
    'body2',
    'inherit',
    'button',
    'caption',
    'overline',
    'alignLeft',
    'alignRight',
    'alignCenter',
    'alignJustify',
    'noWrap',
    'gutterBottom',
    'paragraph'
]);
exports.default = typographyClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1yGe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_linkDefault.default
);
parcelHelpers.export(exports, "linkClasses", ()=>_linkClassesDefault.default
);
var _link = require("./Link");
var _linkDefault = parcelHelpers.interopDefault(_link);
var _linkClasses = require("./linkClasses");
var _linkClassesDefault = parcelHelpers.interopDefault(_linkClasses);
parcelHelpers.exportAll(_linkClasses, exports);

},{"./Link":"iAOE0","./linkClasses":"brYtD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAOE0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _linkClasses = require("./linkClasses");
var _linkClassesDefault = parcelHelpers.interopDefault(_linkClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "color",
    "component",
    "onBlur",
    "onFocus",
    "TypographyClasses",
    "underline",
    "variant"
];
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
};
const transformDeprecatedColors = (color)=>{
    return colorTransformations[color] || color;
};
const useUtilityClasses = (ownerState)=>{
    const { classes , component , focusVisible , underline  } = ownerState;
    const slots = {
        root: [
            'root',
            `underline${_capitalizeDefault.default(underline)}`,
            component === 'button' && 'button',
            focusVisible && 'focusVisible'
        ]
    };
    return _base.unstable_composeClasses(slots, _linkClasses.getLinkUtilityClass, classes);
};
const LinkRoot = _styledDefault.default(_typographyDefault.default, {
    name: 'MuiLink',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`underline${_capitalizeDefault.default(ownerState.underline)}`],
            ownerState.component === 'button' && styles.button
        ];
    }
})(({ theme , ownerState  })=>{
    const color = _system.getPath(theme, `palette.${transformDeprecatedColors(ownerState.color)}`) || ownerState.color;
    return _extendsDefault.default({}, ownerState.underline === 'none' && {
        textDecoration: 'none'
    }, ownerState.underline === 'hover' && {
        textDecoration: 'none',
        '&:hover': {
            textDecoration: 'underline'
        }
    }, ownerState.underline === 'always' && {
        textDecoration: 'underline',
        textDecorationColor: color !== 'inherit' ? _system.alpha(color, 0.4) : undefined,
        '&:hover': {
            textDecorationColor: 'inherit'
        }
    }, ownerState.component === 'button' && {
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        MozAppearance: 'none',
        // Reset
        WebkitAppearance: 'none',
        // Reset
        '&::-moz-focus-inner': {
            borderStyle: 'none' // Remove Firefox dotted outline.
        },
        [`&.${_linkClassesDefault.default.focusVisible}`]: {
            outline: 'auto'
        }
    });
});
const Link = /*#__PURE__*/ _react.forwardRef(function Link(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiLink'
    });
    const { className , color ='primary' , component ='a' , onBlur , onFocus , TypographyClasses , underline ='always' , variant ='inherit'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _useIsFocusVisibleDefault.default();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    const handlerRef = _useForkRefDefault.default(ref, focusVisibleRef);
    const handleBlur = (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        if (onBlur) onBlur(event);
    };
    const handleFocus = (event)=>{
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) setFocusVisible(true);
        if (onFocus) onFocus(event);
    };
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        focusVisible,
        underline,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(LinkRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        classes: TypographyClasses,
        color: color,
        component: component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        ownerState: ownerState,
        variant: variant
    }, other));
});
Link.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the link.
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _utils.elementTypeAcceptingRef,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * `classes` prop applied to the [`Typography`](/api/typography/) element.
   */ TypographyClasses: _propTypesDefault.default.object,
    /**
   * Controls when the link should have an underline.
   * @default 'always'
   */ underline: _propTypesDefault.default.oneOf([
        'always',
        'hover',
        'none'
    ]),
    /**
   * Applies the theme typography styles.
   * @default 'inherit'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'body1',
            'body2',
            'button',
            'caption',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'inherit',
            'overline',
            'subtitle1',
            'subtitle2'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Link;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../utils/capitalize":"lwNtZ","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/useIsFocusVisible":"6c2qt","../utils/useForkRef":"Q1vCZ","../Typography":"faxSz","./linkClasses":"brYtD","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6c2qt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useIsFocusVisible;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Q1vCZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useForkRef;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brYtD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLinkUtilityClass", ()=>getLinkUtilityClass
);
var _base = require("@mui/base");
function getLinkUtilityClass(slot) {
    return _base.generateUtilityClass('MuiLink', slot);
}
const linkClasses = _base.generateUtilityClasses('MuiLink', [
    'root',
    'underlineNone',
    'underlineHover',
    'underlineAlways',
    'button',
    'focusVisible'
]);
exports.default = linkClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dogLf":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$4cdc = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$4cdc.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _buttonGroup = require("@mui/material/ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _login = require("@mui/icons-material/Login");
var _loginDefault = parcelHelpers.interopDefault(_login);
var _user = require("./store/user");
var _s = $RefreshSig$();
function AppBarActions() {
    _s();
    const dispatch = _reactRedux.useDispatch();
    const onLogin = ()=>{
        const mock = {
            token: "mock-logged-in-token",
            address: "0x8a67d6f4aae8165512774d63992623e10494c69f"
        };
        dispatch(_user.login(mock));
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonGroupDefault.default, {
            variant: "contained",
            "aria-label": "signup or login",
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                    children: "Signup"
                }, void 0, false, {
                    fileName: "src/app-bar-actions.tsx",
                    lineNumber: 24,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                    onClick: onLogin,
                    endIcon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_loginDefault.default, {}, void 0, false, void 0, void 0),
                    children: "Login"
                }, void 0, false, {
                    fileName: "src/app-bar-actions.tsx",
                    lineNumber: 25,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/app-bar-actions.tsx",
            lineNumber: 23,
            columnNumber: 7
        }, this)
    }, void 0, false);
}
exports.default = AppBarActions;
_s(AppBarActions, "rgTLoBID190wEKCp9+G8W6F7A5M=", false, function() {
    return [
        _reactRedux.useDispatch
    ];
});
_c = AppBarActions;
var _c;
$RefreshReg$(_c, "AppBarActions");

  $parcel$ReactRefreshHelpers$4cdc.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","@mui/material/ButtonGroup":"bAjAE","@mui/material/Button":"73csw","@mui/icons-material/Login":"68wpV","./store/user":"dzJ1K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"bAjAE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonGroupDefault.default
);
parcelHelpers.export(exports, "buttonGroupClasses", ()=>_buttonGroupClassesDefault.default
);
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _buttonGroupClasses = require("./buttonGroupClasses");
var _buttonGroupClassesDefault = parcelHelpers.interopDefault(_buttonGroupClasses);
parcelHelpers.exportAll(_buttonGroupClasses, exports);

},{"./ButtonGroup":"jaIyA","./buttonGroupClasses":"jBw94","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jaIyA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonGroupClasses = require("./buttonGroupClasses");
var _buttonGroupClassesDefault = parcelHelpers.interopDefault(_buttonGroupClasses);
var _buttonGroupContext = require("./ButtonGroupContext");
var _buttonGroupContextDefault = parcelHelpers.interopDefault(_buttonGroupContext);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "disabled",
    "disableElevation",
    "disableFocusRipple",
    "disableRipple",
    "fullWidth",
    "orientation",
    "size",
    "variant"
];
const overridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        {
            [`& .${_buttonGroupClassesDefault.default.grouped}`]: styles.grouped
        },
        {
            [`& .${_buttonGroupClassesDefault.default.grouped}`]: styles[`grouped${_capitalizeDefault.default(ownerState.orientation)}`]
        },
        {
            [`& .${_buttonGroupClassesDefault.default.grouped}`]: styles[`grouped${_capitalizeDefault.default(ownerState.variant)}`]
        },
        {
            [`& .${_buttonGroupClassesDefault.default.grouped}`]: styles[`grouped${_capitalizeDefault.default(ownerState.variant)}${_capitalizeDefault.default(ownerState.orientation)}`]
        },
        {
            [`& .${_buttonGroupClassesDefault.default.grouped}`]: styles[`grouped${_capitalizeDefault.default(ownerState.variant)}${_capitalizeDefault.default(ownerState.color)}`]
        },
        styles.root,
        styles[ownerState.variant],
        ownerState.disableElevation === true && styles.disableElevation,
        ownerState.fullWidth && styles.fullWidth,
        ownerState.orientation === 'vertical' && styles.vertical
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { classes , color , disabled , disableElevation , fullWidth , orientation , variant  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            orientation === 'vertical' && 'vertical',
            fullWidth && 'fullWidth',
            disableElevation && 'disableElevation'
        ],
        grouped: [
            'grouped',
            `grouped${_capitalizeDefault.default(orientation)}`,
            `grouped${_capitalizeDefault.default(variant)}`,
            `grouped${_capitalizeDefault.default(variant)}${_capitalizeDefault.default(orientation)}`,
            `grouped${_capitalizeDefault.default(variant)}${_capitalizeDefault.default(color)}`,
            disabled && 'disabled'
        ]
    };
    return _base.unstable_composeClasses(slots, _buttonGroupClasses.getButtonGroupUtilityClass, classes);
};
const ButtonGroupRoot = _styledDefault.default('div', {
    name: 'MuiButtonGroup',
    slot: 'Root',
    overridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'inline-flex',
        borderRadius: theme.shape.borderRadius
    }, ownerState.variant === 'contained' && {
        boxShadow: theme.shadows[2]
    }, ownerState.disableElevation && {
        boxShadow: 'none'
    }, ownerState.fullWidth && {
        width: '100%'
    }, ownerState.orientation === 'vertical' && {
        flexDirection: 'column'
    }, {
        [`& .${_buttonGroupClassesDefault.default.grouped}`]: _extendsDefault.default({
            minWidth: 40,
            '&:not(:first-of-type)': _extendsDefault.default({}, ownerState.orientation === 'horizontal' && {
                borderTopLeftRadius: 0,
                borderBottomLeftRadius: 0
            }, ownerState.orientation === 'vertical' && {
                borderTopRightRadius: 0,
                borderTopLeftRadius: 0
            }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
                marginLeft: -1
            }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
                marginTop: -1
            }),
            '&:not(:last-of-type)': _extendsDefault.default({}, ownerState.orientation === 'horizontal' && {
                borderTopRightRadius: 0,
                borderBottomRightRadius: 0
            }, ownerState.orientation === 'vertical' && {
                borderBottomRightRadius: 0,
                borderBottomLeftRadius: 0
            }, ownerState.variant === 'text' && ownerState.orientation === 'horizontal' && {
                borderRight: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
            }, ownerState.variant === 'text' && ownerState.orientation === 'vertical' && {
                borderBottom: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
            }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
                borderColor: _system.alpha(theme.palette[ownerState.color].main, 0.5)
            }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
                borderRightColor: 'transparent'
            }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
                borderBottomColor: 'transparent'
            }, ownerState.variant === 'contained' && ownerState.orientation === 'horizontal' && {
                borderRight: `1px solid ${theme.palette.grey[400]}`,
                [`&.${_buttonGroupClassesDefault.default.disabled}`]: {
                    borderRight: `1px solid ${theme.palette.action.disabled}`
                }
            }, ownerState.variant === 'contained' && ownerState.orientation === 'vertical' && {
                borderBottom: `1px solid ${theme.palette.grey[400]}`,
                [`&.${_buttonGroupClassesDefault.default.disabled}`]: {
                    borderBottom: `1px solid ${theme.palette.action.disabled}`
                }
            }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
                borderColor: theme.palette[ownerState.color].dark
            }, {
                '&:hover': _extendsDefault.default({}, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
                    borderRightColor: 'currentColor'
                }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
                    borderBottomColor: 'currentColor'
                })
            }),
            '&:hover': _extendsDefault.default({}, ownerState.variant === 'contained' && {
                boxShadow: 'none'
            })
        }, ownerState.variant === 'contained' && {
            boxShadow: 'none'
        })
    })
);
const ButtonGroup = /*#__PURE__*/ _react.forwardRef(function ButtonGroup(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiButtonGroup'
    });
    const { children , className , color ='primary' , component ='div' , disabled =false , disableElevation =false , disableFocusRipple =false , disableRipple =false , fullWidth =false , orientation ='horizontal' , size ='medium' , variant ='outlined'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        orientation,
        size,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    const context = _react.useMemo(()=>({
            className: classes.grouped,
            color,
            disabled,
            disableElevation,
            disableFocusRipple,
            disableRipple,
            fullWidth,
            size,
            variant
        })
    , [
        color,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        size,
        variant,
        classes.grouped
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(ButtonGroupRoot, _extendsDefault.default({
        as: component,
        role: "group",
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_buttonGroupContextDefault.default.Provider, {
            value: context,
            children: children
        })
    }));
});
ButtonGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, no elevation is used.
   * @default false
   */ disableElevation: _propTypesDefault.default.bool,
    /**
   * If `true`, the button keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the button ripple effect is disabled.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the buttons will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'outlined'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'contained',
            'outlined',
            'text'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = ButtonGroup;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../utils/capitalize":"lwNtZ","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./buttonGroupClasses":"jBw94","./ButtonGroupContext":"fK04u","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBw94":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonGroupUtilityClass", ()=>getButtonGroupUtilityClass
);
var _base = require("@mui/base");
function getButtonGroupUtilityClass(slot) {
    return _base.generateUtilityClass('MuiButtonGroup', slot);
}
const buttonGroupClasses = _base.generateUtilityClasses('MuiButtonGroup', [
    'root',
    'contained',
    'outlined',
    'text',
    'disableElevation',
    'disabled',
    'fullWidth',
    'vertical',
    'grouped',
    'groupedHorizontal',
    'groupedVertical',
    'groupedText',
    'groupedTextHorizontal',
    'groupedTextVertical',
    'groupedTextPrimary',
    'groupedTextSecondary',
    'groupedOutlined',
    'groupedOutlinedHorizontal',
    'groupedOutlinedVertical',
    'groupedOutlinedPrimary',
    'groupedOutlinedSecondary',
    'groupedContained',
    'groupedContainedHorizontal',
    'groupedContainedVertical',
    'groupedContainedPrimary',
    'groupedContainedSecondary'
]);
exports.default = buttonGroupClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK04u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const ButtonGroupContext = /*#__PURE__*/ _react.createContext({});
ButtonGroupContext.displayName = 'ButtonGroupContext';
exports.default = ButtonGroupContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"73csw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonDefault.default
);
parcelHelpers.export(exports, "buttonClasses", ()=>_buttonClassesDefault.default
);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonClasses = require("./buttonClasses");
var _buttonClassesDefault = parcelHelpers.interopDefault(_buttonClasses);
parcelHelpers.exportAll(_buttonClasses, exports);

},{"./Button":"auAGa","./buttonClasses":"dinmT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"auAGa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _buttonClasses = require("./buttonClasses");
var _buttonClassesDefault = parcelHelpers.interopDefault(_buttonClasses);
var _buttonGroupContext = require("../ButtonGroup/ButtonGroupContext");
var _buttonGroupContextDefault = parcelHelpers.interopDefault(_buttonGroupContext);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "color",
    "component",
    "className",
    "disabled",
    "disableElevation",
    "disableFocusRipple",
    "endIcon",
    "focusVisibleClassName",
    "fullWidth",
    "size",
    "startIcon",
    "type",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { color , disableElevation , fullWidth , size , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            `${variant}${_capitalizeDefault.default(color)}`,
            `size${_capitalizeDefault.default(size)}`,
            `${variant}Size${_capitalizeDefault.default(size)}`,
            color === 'inherit' && 'colorInherit',
            disableElevation && 'disableElevation',
            fullWidth && 'fullWidth'
        ],
        label: [
            'label'
        ],
        startIcon: [
            'startIcon',
            `iconSize${_capitalizeDefault.default(size)}`
        ],
        endIcon: [
            'endIcon',
            `iconSize${_capitalizeDefault.default(size)}`
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _buttonClasses.getButtonUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const commonIconStyles = (ownerState)=>_extendsDefault.default({}, ownerState.size === 'small' && {
        '& > *:nth-of-type(1)': {
            fontSize: 18
        }
    }, ownerState.size === 'medium' && {
        '& > *:nth-of-type(1)': {
            fontSize: 20
        }
    }, ownerState.size === 'large' && {
        '& > *:nth-of-type(1)': {
            fontSize: 22
        }
    })
;
const ButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`${ownerState.variant}${_capitalizeDefault.default(ownerState.color)}`],
            styles[`size${_capitalizeDefault.default(ownerState.size)}`],
            styles[`${ownerState.variant}Size${_capitalizeDefault.default(ownerState.size)}`],
            ownerState.color === 'inherit' && styles.colorInherit,
            ownerState.disableElevation && styles.disableElevation,
            ownerState.fullWidth && styles.fullWidth
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({}, theme.typography.button, {
        minWidth: 64,
        padding: '6px 16px',
        borderRadius: theme.shape.borderRadius,
        transition: theme.transitions.create([
            'background-color',
            'box-shadow',
            'border-color',
            'color'
        ], {
            duration: theme.transitions.duration.short
        }),
        '&:hover': _extendsDefault.default({
            textDecoration: 'none',
            backgroundColor: _system.alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
            border: `1px solid ${theme.palette[ownerState.color].main}`,
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'contained' && {
            backgroundColor: theme.palette.grey.A100,
            boxShadow: theme.shadows[4],
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                boxShadow: theme.shadows[2],
                backgroundColor: theme.palette.grey[300]
            }
        }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
            backgroundColor: theme.palette[ownerState.color].dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: theme.palette[ownerState.color].main
            }
        }),
        '&:active': _extendsDefault.default({}, ownerState.variant === 'contained' && {
            boxShadow: theme.shadows[8]
        }),
        [`&.${_buttonClassesDefault.default.focusVisible}`]: _extendsDefault.default({}, ownerState.variant === 'contained' && {
            boxShadow: theme.shadows[6]
        }),
        [`&.${_buttonClassesDefault.default.disabled}`]: _extendsDefault.default({
            color: theme.palette.action.disabled
        }, ownerState.variant === 'outlined' && {
            border: `1px solid ${theme.palette.action.disabledBackground}`
        }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
            border: `1px solid ${theme.palette.action.disabled}`
        }, ownerState.variant === 'contained' && {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
        })
    }, ownerState.variant === 'text' && {
        padding: '6px 8px'
    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].main
    }, ownerState.variant === 'outlined' && {
        padding: '5px 15px',
        border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].main,
        border: `1px solid ${_system.alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === 'contained' && {
        color: theme.palette.getContrastText(theme.palette.grey[300]),
        backgroundColor: theme.palette.grey[300],
        boxShadow: theme.shadows[2]
    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].contrastText,
        backgroundColor: theme.palette[ownerState.color].main
    }, ownerState.color === 'inherit' && {
        color: 'inherit',
        borderColor: 'currentColor'
    }, ownerState.size === 'small' && ownerState.variant === 'text' && {
        padding: '4px 5px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'text' && {
        padding: '8px 11px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
        padding: '3px 9px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
        padding: '7px 21px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
        padding: '4px 10px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
        padding: '8px 22px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
        width: '100%'
    })
, ({ ownerState  })=>ownerState.disableElevation && {
        boxShadow: 'none',
        '&:hover': {
            boxShadow: 'none'
        },
        [`&.${_buttonClassesDefault.default.focusVisible}`]: {
            boxShadow: 'none'
        },
        '&:active': {
            boxShadow: 'none'
        },
        [`&.${_buttonClassesDefault.default.disabled}`]: {
            boxShadow: 'none'
        }
    }
);
const ButtonStartIcon = _styledDefault.default('span', {
    name: 'MuiButton',
    slot: 'StartIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.startIcon,
            styles[`iconSize${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'inherit',
        marginRight: 8,
        marginLeft: -4
    }, ownerState.size === 'small' && {
        marginLeft: -2
    }, commonIconStyles(ownerState))
);
const ButtonEndIcon = _styledDefault.default('span', {
    name: 'MuiButton',
    slot: 'EndIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.endIcon,
            styles[`iconSize${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'inherit',
        marginRight: -4,
        marginLeft: 8
    }, ownerState.size === 'small' && {
        marginRight: -2
    }, commonIconStyles(ownerState))
);
const Button = /*#__PURE__*/ _react.forwardRef(function Button(inProps, ref) {
    // props priority: `inProps` > `contextProps` > `themeDefaultProps`
    const contextProps = _react.useContext(_buttonGroupContextDefault.default);
    const resolvedProps = _utils.internal_resolveProps(contextProps, inProps);
    const props = _useThemePropsDefault.default({
        props: resolvedProps,
        name: 'MuiButton'
    });
    const { children , color ='primary' , component ='button' , className , disabled =false , disableElevation =false , disableFocusRipple =false , endIcon: endIconProp , focusVisibleClassName , fullWidth =false , size ='medium' , startIcon: startIconProp , type , variant ='text'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    const startIcon = startIconProp && /*#__PURE__*/ _jsxRuntime.jsx(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState: ownerState,
        children: startIconProp
    });
    const endIcon = endIconProp && /*#__PURE__*/ _jsxRuntime.jsx(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState: ownerState,
        children: endIconProp
    });
    return /*#__PURE__*/ _jsxRuntime.jsxs(ButtonRoot, _extendsDefault.default({
        ownerState: ownerState,
        className: _clsxDefault.default(className, contextProps.className),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: _clsxDefault.default(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
    }, other, {
        classes: classes,
        children: [
            startIcon,
            children,
            endIcon
        ]
    }));
});
Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'primary',
            'secondary',
            'success',
            'error',
            'info',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, no elevation is used.
   * @default false
   */ disableElevation: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * Element placed after the children.
   */ endIcon: _propTypesDefault.default.node,
    /**
   * @ignore
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */ href: _propTypesDefault.default.string,
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Element placed before the children.
   */ startIcon: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * @ignore
   */ type: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'button',
            'reset',
            'submit'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The variant to use.
   * @default 'text'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'contained',
            'outlined',
            'text'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Button;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../ButtonBase":"aeHoF","../utils/capitalize":"lwNtZ","./buttonClasses":"dinmT","../ButtonGroup/ButtonGroupContext":"fK04u","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeHoF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonBaseDefault.default
);
parcelHelpers.export(exports, "buttonBaseClasses", ()=>_buttonBaseClassesDefault.default
);
parcelHelpers.export(exports, "touchRippleClasses", ()=>_touchRippleClassesDefault.default
);
var _buttonBase = require("./ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _buttonBaseClasses = require("./buttonBaseClasses");
var _buttonBaseClassesDefault = parcelHelpers.interopDefault(_buttonBaseClasses);
parcelHelpers.exportAll(_buttonBaseClasses, exports);
var _touchRippleClasses = require("./touchRippleClasses");
var _touchRippleClassesDefault = parcelHelpers.interopDefault(_touchRippleClasses);
parcelHelpers.exportAll(_touchRippleClasses, exports);

},{"./ButtonBase":"bXqdT","./buttonBaseClasses":"7PrRt","./touchRippleClasses":"8XG51","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXqdT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonBaseRoot", ()=>ButtonBaseRoot
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("@mui/base/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useEventCallback = require("../utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _touchRipple = require("./TouchRipple");
var _touchRippleDefault = parcelHelpers.interopDefault(_touchRipple);
var _buttonBaseClasses = require("./buttonBaseClasses");
var _buttonBaseClassesDefault = parcelHelpers.interopDefault(_buttonBaseClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "action",
    "centerRipple",
    "children",
    "className",
    "component",
    "disabled",
    "disableRipple",
    "disableTouchRipple",
    "focusRipple",
    "focusVisibleClassName",
    "LinkComponent",
    "onBlur",
    "onClick",
    "onContextMenu",
    "onDragLeave",
    "onFocus",
    "onFocusVisible",
    "onKeyDown",
    "onKeyUp",
    "onMouseDown",
    "onMouseLeave",
    "onMouseUp",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "tabIndex",
    "TouchRippleProps",
    "touchRippleRef",
    "type"
];
const useUtilityClasses = (ownerState)=>{
    const { disabled , focusVisible , focusVisibleClassName , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible'
        ]
    };
    const composedClasses = _composeClassesDefault.default(slots, _buttonBaseClasses.getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) composedClasses.root += ` ${focusVisibleClassName}`;
    return composedClasses;
};
const ButtonBaseRoot = _styledDefault.default('button', {
    name: 'MuiButtonBase',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.
    },
    [`&.${_buttonBaseClassesDefault.default.disabled}`]: {
        pointerEvents: 'none',
        // Disable link interactions
        cursor: 'default'
    },
    '@media print': {
        colorAdjust: 'exact'
    }
});
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */ const ButtonBase = /*#__PURE__*/ _react.forwardRef(function ButtonBase(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiButtonBase'
    });
    const { action , centerRipple =false , children , className , component ='button' , disabled =false , disableRipple =false , disableTouchRipple =false , focusRipple =false , LinkComponent ='a' , onBlur , onClick , onContextMenu , onDragLeave , onFocus , onFocusVisible , onKeyDown , onKeyUp , onMouseDown , onMouseLeave , onMouseUp , onTouchEnd , onTouchMove , onTouchStart , tabIndex =0 , TouchRippleProps , touchRippleRef , type  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const buttonRef = _react.useRef(null);
    const rippleRef = _react.useRef(null);
    const handleRippleRef = _useForkRefDefault.default(rippleRef, touchRippleRef);
    const { isFocusVisibleRef , onFocus: handleFocusVisible , onBlur: handleBlurVisible , ref: focusVisibleRef  } = _useIsFocusVisibleDefault.default();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        })
    , []);
    const [mountedState, setMountedState] = _react.useState(false);
    _react.useEffect(()=>{
        setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    _react.useEffect(()=>{
        if (focusVisible && focusRipple && !disableRipple && mountedState) rippleRef.current.pulsate();
    }, [
        disableRipple,
        focusRipple,
        focusVisible,
        mountedState
    ]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return _useEventCallbackDefault.default((event)=>{
            if (eventCallback) eventCallback(event);
            const ignore = skipRippleAction;
            if (!ignore && rippleRef.current) rippleRef.current[rippleAction](event);
            return true;
        });
    }
    const handleMouseDown = useRippleHandler('start', onMouseDown);
    const handleContextMenu = useRippleHandler('stop', onContextMenu);
    const handleDragLeave = useRippleHandler('stop', onDragLeave);
    const handleMouseUp = useRippleHandler('stop', onMouseUp);
    const handleMouseLeave = useRippleHandler('stop', (event)=>{
        if (focusVisible) event.preventDefault();
        if (onMouseLeave) onMouseLeave(event);
    });
    const handleTouchStart = useRippleHandler('start', onTouchStart);
    const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
    const handleTouchMove = useRippleHandler('stop', onTouchMove);
    const handleBlur = useRippleHandler('stop', (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        if (onBlur) onBlur(event);
    }, false);
    const handleFocus = _useEventCallbackDefault.default((event)=>{
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) buttonRef.current = event.currentTarget;
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            if (onFocusVisible) onFocusVisible(event);
        }
        if (onFocus) onFocus(event);
    });
    const isNonNativeButton = ()=>{
        const button = buttonRef.current;
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    /**
   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */ const keydownRef = _react.useRef(false);
    const handleKeyDown = _useEventCallbackDefault.default((event)=>{
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
            keydownRef.current = true;
            rippleRef.current.stop(event, ()=>{
                rippleRef.current.start(event);
            });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
        if (onKeyDown) onKeyDown(event);
         // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
            event.preventDefault();
            if (onClick) onClick(event);
        }
    });
    const handleKeyUp = _useEventCallbackDefault.default((event)=>{
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
            keydownRef.current = false;
            rippleRef.current.stop(event, ()=>{
                rippleRef.current.pulsate(event);
            });
        }
        if (onKeyUp) onKeyUp(event);
         // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) onClick(event);
    });
    let ComponentProp = component;
    if (ComponentProp === 'button' && (other.href || other.to)) ComponentProp = LinkComponent;
    const buttonProps = {};
    if (ComponentProp === 'button') {
        buttonProps.type = type === undefined ? 'button' : type;
        buttonProps.disabled = disabled;
    } else {
        if (!other.href && !other.to) buttonProps.role = 'button';
        if (disabled) buttonProps['aria-disabled'] = disabled;
    }
    const handleOwnRef = _useForkRefDefault.default(focusVisibleRef, buttonRef);
    const handleRef = _useForkRefDefault.default(ref, handleOwnRef);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (enableTouchRipple && !rippleRef.current) console.error([
            'MUI: The `component` prop provided to ButtonBase is invalid.',
            'Please make sure the children prop is rendered in this custom component.'
        ].join('\n'));
    }, [
        enableTouchRipple
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(ButtonBaseRoot, _extendsDefault.default({
        as: ComponentProp,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        onBlur: handleBlur,
        onClick: onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type: type
    }, buttonProps, other, {
        children: [
            children,
            enableTouchRipple ? /*#__PURE__*/ /* TouchRipple is only needed client-side, x2 boost on the server. */ _jsxRuntime.jsx(_touchRippleDefault.default, _extendsDefault.default({
                ref: handleRippleRef,
                center: centerRipple
            }, TouchRippleProps)) : null
        ]
    }));
});
ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */ action: _utils.refType,
    /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */ centerRipple: _propTypesDefault.default.bool,
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _utils.elementTypeAcceptingRef,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */ disableTouchRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */ focusRipple: _propTypesDefault.default.bool,
    /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * @ignore
   */ href: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any,
    /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */ LinkComponent: _propTypesDefault.default.elementType,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onContextMenu: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onDragLeave: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */ onFocusVisible: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyUp: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseLeave: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseUp: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchEnd: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchMove: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchStart: _propTypesDefault.default.func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * @default 0
   */ tabIndex: _propTypesDefault.default.number,
    /**
   * Props applied to the `TouchRipple` element.
   */ TouchRippleProps: _propTypesDefault.default.object,
    /**
   * A ref that points to the `TouchRipple` element.
   */ touchRippleRef: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.shape({
            current: _propTypesDefault.default.shape({
                pulsate: _propTypesDefault.default.func.isRequired,
                start: _propTypesDefault.default.func.isRequired,
                stop: _propTypesDefault.default.func.isRequired
            })
        })
    ]),
    /**
   * @ignore
   */ type: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'button',
            'reset',
            'submit'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = ButtonBase;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base/composeClasses":"2T3xi","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/useForkRef":"Q1vCZ","../utils/useEventCallback":"bucP2","../utils/useIsFocusVisible":"6c2qt","./TouchRipple":"4NaC3","./buttonBaseClasses":"7PrRt","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bucP2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useEventCallback;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NaC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DELAY_RIPPLE", ()=>DELAY_RIPPLE
);
parcelHelpers.export(exports, "TouchRippleRoot", ()=>TouchRippleRoot
);
parcelHelpers.export(exports, "TouchRippleRipple", ()=>TouchRippleRipple
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _ripple = require("./Ripple");
var _rippleDefault = parcelHelpers.interopDefault(_ripple);
var _touchRippleClasses = require("./touchRippleClasses");
var _touchRippleClassesDefault = parcelHelpers.interopDefault(_touchRippleClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "center",
    "classes",
    "className"
];
let _ = (t)=>t
, _t, _t2, _t3, _t4;
const DURATION = 550;
const DELAY_RIPPLE = 80;
const enterKeyframe = _system.keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
const exitKeyframe = _system.keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
const pulsateKeyframe = _system.keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
const TouchRippleRoot = _styledDefault.default('span', {
    name: 'MuiTouchRipple',
    slot: 'Root'
})({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit'
}); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
const TouchRippleRipple = _styledDefault.default(_rippleDefault.default, {
    name: 'MuiTouchRipple',
    slot: 'Ripple'
})(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), _touchRippleClassesDefault.default.rippleVisible, enterKeyframe, DURATION, ({ theme  })=>theme.transitions.easing.easeInOut
, _touchRippleClassesDefault.default.ripplePulsate, ({ theme  })=>theme.transitions.duration.shorter
, _touchRippleClassesDefault.default.child, _touchRippleClassesDefault.default.childLeaving, exitKeyframe, DURATION, ({ theme  })=>theme.transitions.easing.easeInOut
, _touchRippleClassesDefault.default.childPulsate, pulsateKeyframe, ({ theme  })=>theme.transitions.easing.easeInOut
);
/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */ const TouchRipple = /*#__PURE__*/ _react.forwardRef(function TouchRipple(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTouchRipple'
    });
    const { center: centerProp = false , classes ={} , className  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [ripples, setRipples] = _react.useState([]);
    const nextKey = _react.useRef(0);
    const rippleCallback = _react.useRef(null);
    _react.useEffect(()=>{
        if (rippleCallback.current) {
            rippleCallback.current();
            rippleCallback.current = null;
        }
    }, [
        ripples
    ]); // Used to filter out mouse emulated events on mobile.
    const ignoringMouseDown = _react.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.
    const startTimer = _react.useRef(null); // This is the hook called once the previous timeout is ready.
    const startTimerCommit = _react.useRef(null);
    const container = _react.useRef(null);
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(startTimer.current);
        };
    }, []);
    const startCommit = _react.useCallback((params)=>{
        const { pulsate , rippleX , rippleY , rippleSize , cb  } = params;
        setRipples((oldRipples)=>[
                ...oldRipples,
                /*#__PURE__*/ _jsxRuntime.jsx(TouchRippleRipple, {
                    classes: {
                        ripple: _clsxDefault.default(classes.ripple, _touchRippleClassesDefault.default.ripple),
                        rippleVisible: _clsxDefault.default(classes.rippleVisible, _touchRippleClassesDefault.default.rippleVisible),
                        ripplePulsate: _clsxDefault.default(classes.ripplePulsate, _touchRippleClassesDefault.default.ripplePulsate),
                        child: _clsxDefault.default(classes.child, _touchRippleClassesDefault.default.child),
                        childLeaving: _clsxDefault.default(classes.childLeaving, _touchRippleClassesDefault.default.childLeaving),
                        childPulsate: _clsxDefault.default(classes.childPulsate, _touchRippleClassesDefault.default.childPulsate)
                    },
                    timeout: DURATION,
                    pulsate: pulsate,
                    rippleX: rippleX,
                    rippleY: rippleY,
                    rippleSize: rippleSize
                }, nextKey.current)
            ]
        );
        nextKey.current += 1;
        rippleCallback.current = cb;
    }, [
        classes
    ]);
    const start = _react.useCallback((event = {}, options = {}, cb)=>{
        const { pulsate =false , center =centerProp || options.pulsate , fakeElement =false // For test purposes
          } = options;
        if (event.type === 'mousedown' && ignoringMouseDown.current) {
            ignoringMouseDown.current = false;
            return;
        }
        if (event.type === 'touchstart') ignoringMouseDown.current = true;
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
        }; // Get the size of the ripple
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
        } else {
            const { clientX , clientY  } = event.touches ? event.touches[0] : event;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
            rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.
            if (rippleSize % 2 === 0) rippleSize += 1;
        } else {
            const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        } // Touche devices
        if (event.touches) // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        {
            if (startTimerCommit.current === null) {
                // Prepare the ripple effect.
                startTimerCommit.current = ()=>{
                    startCommit({
                        pulsate,
                        rippleX,
                        rippleY,
                        rippleSize,
                        cb
                    });
                }; // Delay the execution of the ripple effect.
                startTimer.current = setTimeout(()=>{
                    if (startTimerCommit.current) {
                        startTimerCommit.current();
                        startTimerCommit.current = null;
                    }
                }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
            }
        } else startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
        });
    }, [
        centerProp,
        startCommit
    ]);
    const pulsate1 = _react.useCallback(()=>{
        start({}, {
            pulsate: true
        });
    }, [
        start
    ]);
    const stop = _react.useCallback((event, cb)=>{
        clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if (event.type === 'touchend' && startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
            startTimer.current = setTimeout(()=>{
                stop(event, cb);
            });
            return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples)=>{
            if (oldRipples.length > 0) return oldRipples.slice(1);
            return oldRipples;
        });
        rippleCallback.current = cb;
    }, []);
    _react.useImperativeHandle(ref, ()=>({
            pulsate: pulsate1,
            start,
            stop
        })
    , [
        pulsate1,
        start,
        stop
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(TouchRippleRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, _touchRippleClassesDefault.default.root, className),
        ref: container
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_reactTransitionGroup.TransitionGroup, {
            component: null,
            exit: true,
            children: ripples
        })
    }));
});
TouchRipple.propTypes = {
    /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */ center: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string
};
exports.default = TouchRipple;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","react-transition-group":"fZSkB","clsx":"83C22","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./Ripple":"bcQQn","./touchRippleClasses":"8XG51","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZSkB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSTransition", ()=>_csstransitionDefault.default
);
parcelHelpers.export(exports, "ReplaceTransition", ()=>_replaceTransitionDefault.default
);
parcelHelpers.export(exports, "SwitchTransition", ()=>_switchTransitionDefault.default
);
parcelHelpers.export(exports, "TransitionGroup", ()=>_transitionGroupDefault.default
);
parcelHelpers.export(exports, "Transition", ()=>_transitionDefault.default
);
parcelHelpers.export(exports, "config", ()=>_configDefault.default
);
var _csstransition = require("./CSSTransition");
var _csstransitionDefault = parcelHelpers.interopDefault(_csstransition);
var _replaceTransition = require("./ReplaceTransition");
var _replaceTransitionDefault = parcelHelpers.interopDefault(_replaceTransition);
var _switchTransition = require("./SwitchTransition");
var _switchTransitionDefault = parcelHelpers.interopDefault(_switchTransition);
var _transitionGroup = require("./TransitionGroup");
var _transitionGroupDefault = parcelHelpers.interopDefault(_transitionGroup);
var _transition = require("./Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);

},{"./CSSTransition":false,"./ReplaceTransition":false,"./SwitchTransition":false,"./TransitionGroup":"5mvFs","./Transition":"cKsrS","./config":"cepoZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5mvFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var _childMapping = require("./utils/ChildMapping");
var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
        return obj[k];
    });
};
var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
        return child;
    }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */ var TransitionGroup = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(TransitionGroup1, _React$Component);
    function TransitionGroup1(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitializedDefault.default(_this)); // Initial children should all be entering, dependent on appear
        _this.state = {
            contextValue: {
                isMounting: true
            },
            handleExited: handleExited,
            firstRender: true
        };
        return _this;
    }
    var _proto = TransitionGroup1.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false
            }
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };
    TransitionGroup1.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
            children: firstRender ? _childMapping.getInitialChildMapping(nextProps, handleExited) : _childMapping.getNextChildMapping(nextProps, prevChildMapping, handleExited),
            firstRender: false
        };
    } // node is `undefined` when user provided `nodeRef` prop
    ;
    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = _childMapping.getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) child.props.onExited(node);
        if (this.mounted) this.setState(function(state) {
            var children = _extendsDefault.default({}, state.children);
            delete children[child.key];
            return {
                children: children
            };
        });
    };
    _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "component",
            "childFactory"
        ]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) return /*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: contextValue
        }, children);
        return /*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: contextValue
        }, /*#__PURE__*/ _reactDefault.default.createElement(Component, props, children));
    };
    return TransitionGroup1;
}(_reactDefault.default.Component);
TransitionGroup.propTypes = {
    /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */ component: _propTypesDefault.default.any,
    /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */ children: _propTypesDefault.default.node,
    /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ appear: _propTypesDefault.default.bool,
    /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */ childFactory: _propTypesDefault.default.func
};
TransitionGroup.defaultProps = defaultProps;
exports.default = TransitionGroup;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/assertThisInitialized":"iy3su","@babel/runtime/helpers/esm/inheritsLoose":"9u2Z8","prop-types":"7wKI2","react":"21dqq","./TransitionGroupContext":"47LXo","./utils/ChildMapping":"8k6ul","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iy3su":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9u2Z8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},{"./setPrototypeOf.js":"3XDFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XDFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47LXo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = _reactDefault.default.createContext(null);

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8k6ul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */ parcelHelpers.export(exports, "getChildMapping", ()=>getChildMapping
);
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */ parcelHelpers.export(exports, "mergeChildMappings", ()=>mergeChildMappings
);
parcelHelpers.export(exports, "getInitialChildMapping", ()=>getInitialChildMapping
);
parcelHelpers.export(exports, "getNextChildMapping", ()=>getNextChildMapping
);
var _react = require("react");
function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
        return mapFn && _react.isValidElement(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) _react.Children.map(children, function(c) {
        return c;
    }).forEach(function(child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
    });
    return result;
}
function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for(var prevKey in prev){
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else pendingKeys.push(prevKey);
    }
    var i;
    var childMapping = {};
    for(var nextKey in next){
        if (nextKeysPending[nextKey]) for(i = 0; i < nextKeysPending[nextKey].length; i++){
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
        childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`
    for(i = 0; i < pendingKeys.length; i++)childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    return childMapping;
}
function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
        return _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, 'appear', props),
            enter: getProp(child, 'enter', props),
            exit: getProp(child, 'exit', props)
        });
    });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!_react.isValidElement(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = _react.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)
        if (hasNext && (!hasPrev || isLeaving)) // console.log('entering', key)
        children[key] = _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
        else if (!hasNext && hasPrev && !isLeaving) // item is old (exiting)
        // console.log('leaving', key)
        children[key] = _react.cloneElement(child, {
            in: false
        });
        else if (hasNext && hasPrev && _react.isValidElement(prevChild)) // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
    });
    return children;
}

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKsrS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UNMOUNTED", ()=>UNMOUNTED
);
parcelHelpers.export(exports, "EXITED", ()=>EXITED
);
parcelHelpers.export(exports, "ENTERING", ()=>ENTERING
);
parcelHelpers.export(exports, "ENTERED", ()=>ENTERED
);
parcelHelpers.export(exports, "EXITING", ()=>EXITING
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _propTypes1 = require("./utils/PropTypes");
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */ var Transition = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Transition1, _React$Component);
    function Transition1(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    Transition1.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    ;
    var _proto = Transition1.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();
            if (nextStatus === ENTERING) this.performEnter(mounting);
            else this.performExit();
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [
            appearing
        ] : [
            _reactDomDefault.default.findDOMNode(this),
            appearing
        ], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
        if (!mounting && !enter || _configDefault.default.disabled) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(maybeNode);
            });
            return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(maybeNode, maybeAppearing);
                });
            });
        });
    };
    _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : _reactDomDefault.default.findDOMNode(this); // no exit animation skip right to EXITED
        if (!exit || _configDefault.default.disabled) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(maybeNode);
            });
            return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(maybeNode);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDomDefault.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [
                this.nextCallback
            ] : [
                node,
                this.nextCallback
            ], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "children",
            "in",
            "mountOnEnter",
            "unmountOnExit",
            "appear",
            "enter",
            "exit",
            "timeout",
            "addEndListener",
            "onEnter",
            "onEntering",
            "onEntered",
            "onExit",
            "onExiting",
            "onExited",
            "nodeRef"
        ]);
        return(/*#__PURE__*/ // allows for nested Transitions
        _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: null
        }, typeof children === 'function' ? children(status, childProps) : _reactDefault.default.cloneElement(_reactDefault.default.Children.only(children), childProps)));
    };
    return Transition1;
}(_reactDefault.default.Component);
Transition.contextType = _transitionGroupContextDefault.default;
Transition.propTypes = {
    /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */ nodeRef: _propTypesDefault.default.shape({
        current: typeof Element === 'undefined' ? _propTypesDefault.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _propTypesDefault.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
    }),
    /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */ children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func.isRequired,
        _propTypesDefault.default.element.isRequired
    ]).isRequired,
    /**
   * Show the component; triggers the enter or exit states
   */ in: _propTypesDefault.default.bool,
    /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */ mountOnEnter: _propTypesDefault.default.bool,
    /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */ unmountOnExit: _propTypesDefault.default.bool,
    /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */ appear: _propTypesDefault.default.bool,
    /**
   * Enable or disable enter transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * Enable or disable exit transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */ timeout: function timeout(props) {
        var pt = _propTypes1.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEnter: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEntered: _propTypesDefault.default.func,
    /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExit: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExiting: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */ onExited: _propTypesDefault.default.func
}; // Name the function so it is clearer in the documentation
function noop() {}
Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
exports.default = Transition;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/inheritsLoose":"9u2Z8","prop-types":"7wKI2","react":"21dqq","react-dom":"j6uA9","./config":"cepoZ","./utils/PropTypes":"9Zqaa","./TransitionGroupContext":"47LXo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cepoZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    disabled: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Zqaa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutsShape", ()=>timeoutsShape
);
parcelHelpers.export(exports, "classNamesShape", ()=>classNamesShape
);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var timeoutsShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.number,
        exit: _propTypesDefault.default.number,
        appear: _propTypesDefault.default.number
    }).isRequired
]);
var classNamesShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        active: _propTypesDefault.default.string
    }),
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        enterDone: _propTypesDefault.default.string,
        enterActive: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        exitDone: _propTypesDefault.default.string,
        exitActive: _propTypesDefault.default.string
    })
]);

},{"prop-types":"7wKI2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bcQQn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
function Ripple(props) {
    const { className , classes , pulsate =false , rippleX , rippleY , rippleSize , in: inProp , onExited , timeout  } = props;
    const [leaving, setLeaving] = _react.useState(false);
    const rippleClassName = _clsxDefault.default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
    };
    const childClassName = _clsxDefault.default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) setLeaving(true);
    _react.useEffect(()=>{
        if (!inProp && onExited != null) {
            // react-transition-group#onExited
            const timeoutId = setTimeout(onExited, timeout);
            return ()=>{
                clearTimeout(timeoutId);
            };
        }
        return undefined;
    }, [
        onExited,
        inProp,
        timeout
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: childClassName
        })
    });
}
Ripple.propTypes = {
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    className: _propTypesDefault.default.string,
    /**
   * @ignore - injected from TransitionGroup
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore - injected from TransitionGroup
   */ onExited: _propTypesDefault.default.func,
    /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */ pulsate: _propTypesDefault.default.bool,
    /**
   * Diameter of the ripple.
   */ rippleSize: _propTypesDefault.default.number,
    /**
   * Horizontal position of the ripple center.
   */ rippleX: _propTypesDefault.default.number,
    /**
   * Vertical position of the ripple center.
   */ rippleY: _propTypesDefault.default.number,
    /**
   * exit delay
   */ timeout: _propTypesDefault.default.number.isRequired
};
exports.default = Ripple;

},{"react":"21dqq","prop-types":"7wKI2","clsx":"83C22","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8XG51":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTouchRippleUtilityClass", ()=>getTouchRippleUtilityClass
);
var _base = require("@mui/base");
function getTouchRippleUtilityClass(slot) {
    return _base.generateUtilityClass('MuiTouchRipple', slot);
}
const touchRippleClasses = _base.generateUtilityClasses('MuiTouchRipple', [
    'root',
    'ripple',
    'rippleVisible',
    'ripplePulsate',
    'child',
    'childLeaving',
    'childPulsate'
]);
exports.default = touchRippleClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PrRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonBaseUtilityClass", ()=>getButtonBaseUtilityClass
);
var _base = require("@mui/base");
function getButtonBaseUtilityClass(slot) {
    return _base.generateUtilityClass('MuiButtonBase', slot);
}
const buttonBaseClasses = _base.generateUtilityClasses('MuiButtonBase', [
    'root',
    'disabled',
    'focusVisible'
]);
exports.default = buttonBaseClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dinmT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonUtilityClass", ()=>getButtonUtilityClass
);
var _base = require("@mui/base");
function getButtonUtilityClass(slot) {
    return _base.generateUtilityClass('MuiButton', slot);
}
const buttonClasses = _base.generateUtilityClasses('MuiButton', [
    'root',
    'text',
    'textInherit',
    'textPrimary',
    'textSecondary',
    'outlined',
    'outlinedInherit',
    'outlinedPrimary',
    'outlinedSecondary',
    'contained',
    'containedInherit',
    'containedPrimary',
    'containedSecondary',
    'disableElevation',
    'focusVisible',
    'disabled',
    'colorInherit',
    'textSizeSmall',
    'textSizeMedium',
    'textSizeLarge',
    'outlinedSizeSmall',
    'outlinedSizeMedium',
    'outlinedSizeLarge',
    'containedSizeSmall',
    'containedSizeMedium',
    'containedSizeLarge',
    'sizeMedium',
    'sizeSmall',
    'sizeLarge',
    'fullWidth',
    'startIcon',
    'endIcon',
    'iconSizeSmall',
    'iconSizeMedium',
    'iconSizeLarge'
]);
exports.default = buttonClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"68wpV":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M11 7 9.6 8.4l2.6 2.6H2v2h10.2l-2.6 2.6L11 17l5-5-5-5zm9 12h-8v2h8c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-8v2h8v14z"
}), 'Login');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"7XM86":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"lVV9C":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _utils.createSvgIcon;
    }
});
var _utils = require("@mui/material/utils");

},{"@mui/material/utils":"9bp9M"}],"9bp9M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "capitalize", ()=>_capitalizeDefault.default
);
parcelHelpers.export(exports, "createChainedFunction", ()=>_createChainedFunctionDefault.default
);
parcelHelpers.export(exports, "createSvgIcon", ()=>_createSvgIconDefault.default
);
parcelHelpers.export(exports, "debounce", ()=>_debounceDefault.default
);
parcelHelpers.export(exports, "deprecatedPropType", ()=>_deprecatedPropTypeDefault.default
);
parcelHelpers.export(exports, "isMuiElement", ()=>_isMuiElementDefault.default
);
parcelHelpers.export(exports, "ownerDocument", ()=>_ownerDocumentDefault.default
);
parcelHelpers.export(exports, "ownerWindow", ()=>_ownerWindowDefault.default
);
parcelHelpers.export(exports, "requirePropFactory", ()=>_requirePropFactoryDefault.default
);
parcelHelpers.export(exports, "setRef", ()=>_setRefDefault.default
);
parcelHelpers.export(exports, "unstable_useEnhancedEffect", ()=>_useEnhancedEffectDefault.default
);
parcelHelpers.export(exports, "unstable_useId", ()=>_useIdDefault.default
);
parcelHelpers.export(exports, "unsupportedProp", ()=>_unsupportedPropDefault.default
);
parcelHelpers.export(exports, "useControlled", ()=>_useControlledDefault.default
);
parcelHelpers.export(exports, "useEventCallback", ()=>_useEventCallbackDefault.default
);
parcelHelpers.export(exports, "useForkRef", ()=>_useForkRefDefault.default
);
parcelHelpers.export(exports, "useIsFocusVisible", ()=>_useIsFocusVisibleDefault.default
) // TODO: remove this export once ClassNameGenerator is stable
;
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>unstable_ClassNameGenerator
);
var _className = require("@mui/base/className");
var _capitalize = require("./capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _createSvgIcon = require("./createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
var _debounce = require("./debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _deprecatedPropType = require("./deprecatedPropType");
var _deprecatedPropTypeDefault = parcelHelpers.interopDefault(_deprecatedPropType);
var _isMuiElement = require("./isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
var _requirePropFactory = require("./requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useId = require("./useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
var _unsupportedProp = require("./unsupportedProp");
var _unsupportedPropDefault = parcelHelpers.interopDefault(_unsupportedProp);
var _useControlled = require("./useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useForkRef = require("./useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useIsFocusVisible = require("./useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
const unstable_ClassNameGenerator = {
    configure: (generator)=>{
        console.warn([
            'MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.',
            '',
            "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead",
            '',
            'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401',
            '',
            'The updated documentation: https://mui.com/guides/classname-generator/'
        ].join('\n'));
        _className.unstable_ClassNameGenerator.configure(generator);
    }
};

},{"@mui/base/className":"kRsty","./capitalize":"lwNtZ","./createChainedFunction":"6dEve","./createSvgIcon":"f9XLK","./debounce":"aggDu","./deprecatedPropType":"3GBYl","./isMuiElement":"guro1","./ownerDocument":"jIL4x","./ownerWindow":"9PRFD","./requirePropFactory":"gQOX7","./setRef":"kZmdZ","./useEnhancedEffect":"jIOpS","./useId":"99ilJ","./unsupportedProp":"96UVu","./useControlled":"68YU6","./useEventCallback":"bucP2","./useForkRef":"Q1vCZ","./useIsFocusVisible":"6c2qt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dEve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_createChainedFunction;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9XLK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _svgIcon = require("../SvgIcon");
var _svgIconDefault = parcelHelpers.interopDefault(_svgIcon);
/**
 * Private module reserved for @mui packages.
 */ var _jsxRuntime = require("react/jsx-runtime");
function createSvgIcon(path, displayName) {
    const Component = (props, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(_svgIconDefault.default, _extendsDefault.default({
            "data-testid": `${displayName}Icon`,
            ref: ref
        }, props, {
            children: path
        }))
    ;
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = `${displayName}Icon`;
    Component.muiName = _svgIconDefault.default.muiName;
    return /*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(Component));
}
exports.default = createSvgIcon;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","../SvgIcon":"egDpG","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egDpG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_svgIconDefault.default
);
parcelHelpers.export(exports, "svgIconClasses", ()=>_svgIconClassesDefault.default
);
var _svgIcon = require("./SvgIcon");
var _svgIconDefault = parcelHelpers.interopDefault(_svgIcon);
var _svgIconClasses = require("./svgIconClasses");
var _svgIconClassesDefault = parcelHelpers.interopDefault(_svgIconClasses);
parcelHelpers.exportAll(_svgIconClasses, exports);

},{"./SvgIcon":"hkHYU","./svgIconClasses":"bWKdX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hkHYU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _svgIconClasses = require("./svgIconClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "fontSize",
    "htmlColor",
    "inheritViewBox",
    "titleAccess",
    "viewBox"
];
const useUtilityClasses = (ownerState)=>{
    const { color , fontSize , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            color !== 'inherit' && `color${_capitalizeDefault.default(color)}`,
            `fontSize${_capitalizeDefault.default(fontSize)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
};
const SvgIconRoot = _styledDefault.default('svg', {
    name: 'MuiSvgIcon',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.color !== 'inherit' && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            styles[`fontSize${_capitalizeDefault.default(ownerState.fontSize)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _theme$palette$ownerS, _theme$palette, _theme$palette$ownerS2, _theme$palette2, _theme$palette2$actio, _theme$palette3, _theme$palette3$actio;
    return {
        userSelect: 'none',
        width: '1em',
        height: '1em',
        display: 'inline-block',
        fill: 'currentColor',
        flexShrink: 0,
        transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
            duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
        }),
        fontSize: ({
            inherit: 'inherit',
            small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
            medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
            large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875'
        })[ownerState.fontSize],
        // TODO v5 deprecate, v6 remove for sx
        color: (_theme$palette$ownerS = (_theme$palette = theme.palette) == null ? void 0 : (_theme$palette$ownerS2 = _theme$palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : ({
            action: (_theme$palette2 = theme.palette) == null ? void 0 : (_theme$palette2$actio = _theme$palette2.action) == null ? void 0 : _theme$palette2$actio.active,
            disabled: (_theme$palette3 = theme.palette) == null ? void 0 : (_theme$palette3$actio = _theme$palette3.action) == null ? void 0 : _theme$palette3$actio.disabled,
            inherit: undefined
        })[ownerState.color]
    };
});
const SvgIcon = /*#__PURE__*/ _react.forwardRef(function SvgIcon(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSvgIcon'
    });
    const { children , className , color ='inherit' , component ='svg' , fontSize ='medium' , htmlColor , inheritViewBox =false , titleAccess , viewBox ='0 0 24 24'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox
    });
    const more = {};
    if (!inheritViewBox) more.viewBox = viewBox;
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(SvgIconRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
    }, more, other, {
        children: [
            children,
            titleAccess ? /*#__PURE__*/ _jsxRuntime.jsx("title", {
                children: titleAccess
            }) : null
        ]
    }));
});
SvgIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Node passed into the SVG element.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'action',
            'disabled',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */ fontSize: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'large',
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Applies a color attribute to the SVG element.
   */ htmlColor: _propTypesDefault.default.string,
    /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */ inheritViewBox: _propTypesDefault.default.bool,
    /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */ shapeRendering: _propTypesDefault.default.string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */ titleAccess: _propTypesDefault.default.string,
    /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */ viewBox: _propTypesDefault.default.string
};
SvgIcon.muiName = 'SvgIcon';
exports.default = SvgIcon;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../utils/capitalize":"lwNtZ","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./svgIconClasses":"bWKdX","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWKdX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSvgIconUtilityClass", ()=>getSvgIconUtilityClass
);
var _base = require("@mui/base");
function getSvgIconUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSvgIcon', slot);
}
const svgIconClasses = _base.generateUtilityClasses('MuiSvgIcon', [
    'root',
    'colorPrimary',
    'colorSecondary',
    'colorAction',
    'colorError',
    'colorDisabled',
    'fontSizeInherit',
    'fontSizeSmall',
    'fontSizeMedium',
    'fontSizeLarge'
]);
exports.default = svgIconClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aggDu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_debounce;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GBYl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_deprecatedPropType;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"guro1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_isMuiElement;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIL4x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_ownerDocument;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9PRFD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_ownerWindow;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQOX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_requirePropFactory;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kZmdZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_setRef;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99ilJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useId;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96UVu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_unsupportedProp;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"68YU6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useControlled;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8UrHx":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$66e0 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$66e0.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _styles = require("@mui/material/styles");
var _box = require("@mui/material/Box");
var _boxDefault = parcelHelpers.interopDefault(_box);
var _drawer = require("@mui/material/Drawer");
var _drawerDefault = parcelHelpers.interopDefault(_drawer);
var _appBar = require("@mui/material/AppBar");
var _appBarDefault = parcelHelpers.interopDefault(_appBar);
var _toolbar = require("@mui/material/Toolbar");
var _toolbarDefault = parcelHelpers.interopDefault(_toolbar);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _divider = require("@mui/material/Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _menu = require("@mui/icons-material/Menu");
var _menuDefault = parcelHelpers.interopDefault(_menu);
var _chevronLeft = require("@mui/icons-material/ChevronLeft");
var _chevronLeftDefault = parcelHelpers.interopDefault(_chevronLeft);
var _chevronRight = require("@mui/icons-material/ChevronRight");
var _chevronRightDefault = parcelHelpers.interopDefault(_chevronRight);
var _user = require("../store/user");
var _vaults = require("../store/vaults");
var _home = require("./home");
var _homeDefault = parcelHelpers.interopDefault(_home);
var _vaultList = require("./vault-list");
var _vaultListDefault = parcelHelpers.interopDefault(_vaultList);
var _vault = require("./vault");
var _vaultDefault = parcelHelpers.interopDefault(_vault);
var _dialogs = require("./dialogs");
var _dialogsDefault = parcelHelpers.interopDefault(_dialogs);
var _appBarActions = require("./app-bar-actions");
var _appBarActionsDefault = parcelHelpers.interopDefault(_appBarActions);
var _logotype = require("../logotype");
var _logotypeDefault = parcelHelpers.interopDefault(_logotype);
var _s = $RefreshSig$();
const NotFound = ()=>/*#__PURE__*/ _jsxDevRuntime.jsxDEV("h3", {
        children: "Page not found"
    }, void 0, false, {
        fileName: "src/authenticated/index.tsx",
        lineNumber: 31,
        columnNumber: 24
    }, undefined)
;
_c = NotFound;
const drawerWidth = 240;
const Main = _styles.styled("div", {
    shouldForwardProp: (prop)=>prop !== "open"
})(({ theme , open  })=>({
        flexGrow: 1,
        padding: theme.spacing(3),
        transition: theme.transitions.create("margin", {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.leavingScreen
        }),
        marginLeft: `-${drawerWidth}px`,
        ...open && {
            transition: theme.transitions.create("margin", {
                easing: theme.transitions.easing.easeOut,
                duration: theme.transitions.duration.enteringScreen
            }),
            marginLeft: 0
        }
    })
);
_c1 = Main;
const AppBar = _styles.styled(_appBarDefault.default, {
    shouldForwardProp: (prop)=>prop !== "open"
})(({ theme , open  })=>({
        transition: theme.transitions.create([
            "margin",
            "width"
        ], {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.leavingScreen
        }),
        ...open && {
            width: `calc(100% - ${drawerWidth}px)`,
            marginLeft: `${drawerWidth}px`,
            transition: theme.transitions.create([
                "margin",
                "width"
            ], {
                easing: theme.transitions.easing.easeOut,
                duration: theme.transitions.duration.enteringScreen
            })
        }
    })
);
_c2 = AppBar;
const DrawerHeader = _styles.styled("div")(({ theme  })=>({
        display: "flex",
        alignItems: "center",
        padding: theme.spacing(0, 1),
        // necessary for content to be below app bar
        ...theme.mixins.toolbar,
        justifyContent: "flex-end"
    })
);
_c3 = DrawerHeader;
function AuthenticatedApp(props) {
    _s();
    var _s1 = $RefreshSig$();
    const { worker  } = props;
    const theme = _styles.useTheme();
    const { user  } = _reactRedux.useSelector(_user.userSelector);
    const dispatch = _reactRedux.useDispatch();
    _react.useEffect(_s1(()=>{
        _s1();
        const useLoadVaults = async ()=>{
            console.log("Loading user vaults...");
            dispatch(_vaults.loadVaults({
                user,
                worker
            }));
        };
        useLoadVaults();
    }, "pjXRIx1qIC42GAStoac0txuPYoo=", true), [
        user
    ]);
    const [drawerOpen, setDrawerOpen] = _react.useState(false);
    const handleDrawerOpen = ()=>setDrawerOpen(true)
    ;
    const handleDrawerClose = ()=>setDrawerOpen(false)
    ;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
        sx: {
            display: "flex"
        },
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(AppBar, {
                position: "fixed",
                open: drawerOpen,
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_toolbarDefault.default, {
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                        sx: {
                            width: "100%"
                        },
                        direction: "row",
                        justifyContent: "space-between",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                                direction: "row",
                                alignItems: "center",
                                children: [
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                                        color: "inherit",
                                        "aria-label": "open drawer",
                                        onClick: handleDrawerOpen,
                                        edge: "start",
                                        sx: {
                                            mr: 2,
                                            ...drawerOpen && {
                                                display: "none"
                                            }
                                        },
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_menuDefault.default, {}, void 0, false, {
                                            fileName: "src/authenticated/index.tsx",
                                            lineNumber: 125,
                                            columnNumber: 17
                                        }, this)
                                    }, void 0, false, {
                                        fileName: "src/authenticated/index.tsx",
                                        lineNumber: 118,
                                        columnNumber: 15
                                    }, this),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_logotypeDefault.default, {}, void 0, false, {
                                        fileName: "src/authenticated/index.tsx",
                                        lineNumber: 127,
                                        columnNumber: 15
                                    }, this)
                                ]
                            }, void 0, true, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 117,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_appBarActionsDefault.default, {}, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 130,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 112,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/authenticated/index.tsx",
                    lineNumber: 111,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/index.tsx",
                lineNumber: 110,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_drawerDefault.default, {
                sx: {
                    width: drawerWidth,
                    flexShrink: 0,
                    "& .MuiDrawer-paper": {
                        width: drawerWidth,
                        boxSizing: "border-box"
                    }
                },
                variant: "persistent",
                anchor: "left",
                open: drawerOpen,
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(DrawerHeader, {
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                            onClick: handleDrawerClose,
                            children: theme.direction === "ltr" ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_chevronLeftDefault.default, {}, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 150,
                                columnNumber: 15
                            }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_chevronRightDefault.default, {}, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 152,
                                columnNumber: 15
                            }, this)
                        }, void 0, false, {
                            fileName: "src/authenticated/index.tsx",
                            lineNumber: 148,
                            columnNumber: 11
                        }, this)
                    }, void 0, false, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 147,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {}, void 0, false, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 156,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_vaultListDefault.default, {}, void 0, false, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 157,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/index.tsx",
                lineNumber: 134,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(Main, {
                open: drawerOpen,
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(DrawerHeader, {}, void 0, false, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 160,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Routes, {
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Route, {
                                path: "/",
                                element: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_homeDefault.default, {}, void 0, false, void 0, void 0)
                            }, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 163,
                                columnNumber: 11
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Route, {
                                path: "/vault/:id",
                                element: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_vaultDefault.default, {}, void 0, false, void 0, void 0)
                            }, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 164,
                                columnNumber: 11
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_reactRouterDom.Route, {
                                path: "*",
                                element: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(NotFound, {}, void 0, false, void 0, void 0)
                            }, void 0, false, {
                                fileName: "src/authenticated/index.tsx",
                                lineNumber: 165,
                                columnNumber: 11
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 162,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogsDefault.default, {
                        worker: worker
                    }, void 0, false, {
                        fileName: "src/authenticated/index.tsx",
                        lineNumber: 168,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/index.tsx",
                lineNumber: 159,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/index.tsx",
        lineNumber: 109,
        columnNumber: 5
    }, this);
}
exports.default = AuthenticatedApp;
_s(AuthenticatedApp, "xysJ58CJ0d8BWR1HkrstKrCu4ZI=", false, function() {
    return [
        _styles.useTheme,
        _reactRedux.useSelector,
        _reactRedux.useDispatch
    ];
});
_c4 = AuthenticatedApp;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "NotFound");
$RefreshReg$(_c1, "Main");
$RefreshReg$(_c2, "AppBar");
$RefreshReg$(_c3, "DrawerHeader");
$RefreshReg$(_c4, "AuthenticatedApp");

  $parcel$ReactRefreshHelpers$66e0.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-router-dom":"fdOAw","react-redux":"bdVon","@mui/material/styles":"1lzai","@mui/material/Box":"eQD0H","@mui/material/Drawer":"hMEec","@mui/material/AppBar":"c3vaq","@mui/material/Toolbar":"h8rSE","@mui/material/Stack":"cuThX","@mui/material/Divider":"lHE5Y","@mui/material/IconButton":"38BrD","@mui/icons-material/Menu":"eYtXA","@mui/icons-material/ChevronLeft":"7xa75","@mui/icons-material/ChevronRight":"3dP5K","../store/user":"dzJ1K","../store/vaults":"3zSpK","./home":"sngh0","./vault-list":"2tBl6","./vault":"h6uh8","./dialogs":"2IXgn","./app-bar-actions":"iuGQM","../logotype":"58Jxp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"hMEec":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_drawerDefault.default
);
parcelHelpers.export(exports, "drawerClasses", ()=>_drawerClassesDefault.default
);
var _drawer = require("./Drawer");
var _drawerDefault = parcelHelpers.interopDefault(_drawer);
var _drawerClasses = require("./drawerClasses");
var _drawerClassesDefault = parcelHelpers.interopDefault(_drawerClasses);
parcelHelpers.exportAll(_drawerClasses, exports);

},{"./Drawer":"cLVEp","./drawerClasses":"aFQC1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLVEp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isHorizontal", ()=>isHorizontal
);
parcelHelpers.export(exports, "getAnchor", ()=>getAnchor
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _modal = require("../Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _slide = require("../Slide");
var _slideDefault = parcelHelpers.interopDefault(_slide);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _drawerClasses = require("./drawerClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "BackdropProps"
], _excluded2 = [
    "anchor",
    "BackdropProps",
    "children",
    "className",
    "elevation",
    "hideBackdrop",
    "ModalProps",
    "onClose",
    "open",
    "PaperProps",
    "SlideProps",
    "TransitionComponent",
    "transitionDuration",
    "variant"
];
const overridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.root,
        (ownerState.variant === 'permanent' || ownerState.variant === 'persistent') && styles.docked,
        styles.modal
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { classes , anchor , variant  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        docked: [
            (variant === 'permanent' || variant === 'persistent') && 'docked'
        ],
        modal: [
            'modal'
        ],
        paper: [
            'paper',
            `paperAnchor${_capitalizeDefault.default(anchor)}`,
            variant !== 'temporary' && `paperAnchorDocked${_capitalizeDefault.default(anchor)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _drawerClasses.getDrawerUtilityClass, classes);
};
const DrawerRoot = _styledDefault.default(_modalDefault.default, {
    name: 'MuiDrawer',
    slot: 'Root',
    overridesResolver
})(({ theme  })=>({
        zIndex: theme.zIndex.drawer
    })
);
const DrawerDockedRoot = _styledDefault.default('div', {
    shouldForwardProp: _styled.rootShouldForwardProp,
    name: 'MuiDrawer',
    slot: 'Docked',
    skipVariantsResolver: false,
    overridesResolver
})({
    flex: '0 0 auto'
});
const DrawerPaper = _styledDefault.default(_paperDefault.default, {
    name: 'MuiDrawer',
    slot: 'Paper',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.paper,
            styles[`paperAnchor${_capitalizeDefault.default(ownerState.anchor)}`],
            ownerState.variant !== 'temporary' && styles[`paperAnchorDocked${_capitalizeDefault.default(ownerState.anchor)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        overflowY: 'auto',
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        flex: '1 0 auto',
        zIndex: theme.zIndex.drawer,
        // Add iOS momentum scrolling for iOS < 13.0
        WebkitOverflowScrolling: 'touch',
        // temporary style
        position: 'fixed',
        top: 0,
        // We disable the focus ring for mouse, touch and keyboard users.
        // At some point, it would be better to keep it for keyboard users.
        // :focus-ring CSS pseudo-class will help.
        outline: 0
    }, ownerState.anchor === 'left' && {
        left: 0
    }, ownerState.anchor === 'top' && {
        top: 0,
        left: 0,
        right: 0,
        height: 'auto',
        maxHeight: '100%'
    }, ownerState.anchor === 'right' && {
        right: 0
    }, ownerState.anchor === 'bottom' && {
        top: 'auto',
        left: 0,
        bottom: 0,
        right: 0,
        height: 'auto',
        maxHeight: '100%'
    }, ownerState.anchor === 'left' && ownerState.variant !== 'temporary' && {
        borderRight: `1px solid ${theme.palette.divider}`
    }, ownerState.anchor === 'top' && ownerState.variant !== 'temporary' && {
        borderBottom: `1px solid ${theme.palette.divider}`
    }, ownerState.anchor === 'right' && ownerState.variant !== 'temporary' && {
        borderLeft: `1px solid ${theme.palette.divider}`
    }, ownerState.anchor === 'bottom' && ownerState.variant !== 'temporary' && {
        borderTop: `1px solid ${theme.palette.divider}`
    })
);
const oppositeDirection = {
    left: 'right',
    right: 'left',
    top: 'down',
    bottom: 'up'
};
function isHorizontal(anchor) {
    return [
        'left',
        'right'
    ].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
    return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
/**
 * The props of the [Modal](/api/modal/) component are available
 * when `variant="temporary"` is set.
 */ const Drawer = /*#__PURE__*/ _react.forwardRef(function Drawer(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDrawer'
    });
    const theme = _useThemeDefault.default();
    const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { anchor: anchorProp = 'left' , BackdropProps , children , className , elevation =16 , hideBackdrop =false , ModalProps: { BackdropProps: BackdropPropsProp  } = {} , onClose , open =false , PaperProps ={} , SlideProps , // eslint-disable-next-line react/prop-types
    TransitionComponent =_slideDefault.default , transitionDuration =defaultTransitionDuration , variant ='temporary'  } = props, ModalProps = _objectWithoutPropertiesLooseDefault.default(props.ModalProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2); // Let's assume that the Drawer will always be rendered on user space.
    // We use this state is order to skip the appear transition during the
    // initial mount of the component.
    const mounted = _react.useRef(false);
    _react.useEffect(()=>{
        mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extendsDefault.default({}, props, {
        anchor,
        elevation,
        open,
        variant
    }, other);
    const classes = useUtilityClasses(ownerState);
    const drawer = /*#__PURE__*/ _jsxRuntime.jsx(DrawerPaper, _extendsDefault.default({
        elevation: variant === 'temporary' ? elevation : 0,
        square: true
    }, PaperProps, {
        className: _clsxDefault.default(classes.paper, PaperProps.className),
        ownerState: ownerState,
        children: children
    }));
    if (variant === 'permanent') return /*#__PURE__*/ _jsxRuntime.jsx(DrawerDockedRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, classes.docked, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: drawer
    }));
    const slidingDrawer = /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        in: open,
        direction: oppositeDirection[anchorInvariant],
        timeout: transitionDuration,
        appear: mounted.current
    }, SlideProps, {
        children: drawer
    }));
    if (variant === 'persistent') return /*#__PURE__*/ _jsxRuntime.jsx(DrawerDockedRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, classes.docked, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: slidingDrawer
    }));
     // variant === temporary
    return /*#__PURE__*/ _jsxRuntime.jsx(DrawerRoot, _extendsDefault.default({
        BackdropProps: _extendsDefault.default({}, BackdropProps, BackdropPropsProp, {
            transitionDuration
        }),
        className: _clsxDefault.default(classes.root, classes.modal, className),
        open: open,
        ownerState: ownerState,
        onClose: onClose,
        hideBackdrop: hideBackdrop,
        ref: ref
    }, other, ModalProps, {
        children: slidingDrawer
    }));
});
Drawer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Side from which the drawer will appear.
   * @default 'left'
   */ anchor: _propTypesDefault.default.oneOf([
        'bottom',
        'left',
        'right',
        'top'
    ]),
    /**
   * @ignore
   */ BackdropProps: _propTypesDefault.default.object,
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The elevation of the drawer.
   * @default 16
   */ elevation: _utils.integerPropType,
    /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */ hideBackdrop: _propTypesDefault.default.bool,
    /**
   * Props applied to the [`Modal`](/api/modal/) element.
   * @default {}
   */ ModalProps: _propTypesDefault.default.object,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   * @default false
   */ open: _propTypesDefault.default.bool,
    /**
   * Props applied to the [`Paper`](/api/paper/) element.
   * @default {}
   */ PaperProps: _propTypesDefault.default.object,
    /**
   * Props applied to the [`Slide`](/api/slide/) element.
   */ SlideProps: _propTypesDefault.default.object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * The variant to use.
   * @default 'temporary'
   */ variant: _propTypesDefault.default.oneOf([
        'permanent',
        'persistent',
        'temporary'
    ])
};
exports.default = Drawer;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","../Modal":"lSUh1","../Slide":"fZVcF","../Paper":"6IiTP","../utils/capitalize":"lwNtZ","../styles/useTheme":"5nWMX","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./drawerClasses":"aFQC1","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lSUh1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_modalDefault.default
);
var _modalUnstyled = require("@mui/base/ModalUnstyled");
parcelHelpers.exportAll(_modalUnstyled, exports);
var _modal = require("./Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
parcelHelpers.exportAll(_modal, exports);

},{"@mui/base/ModalUnstyled":"gyieE","./Modal":"C2mYW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"C2mYW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modalClasses", ()=>modalClasses
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _modalUnstyled = require("@mui/base/ModalUnstyled");
var _modalUnstyledDefault = parcelHelpers.interopDefault(_modalUnstyled);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _backdrop = require("../Backdrop");
var _backdropDefault = parcelHelpers.interopDefault(_backdrop);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "BackdropComponent",
    "closeAfterTransition",
    "children",
    "components",
    "componentsProps",
    "disableAutoFocus",
    "disableEnforceFocus",
    "disableEscapeKeyDown",
    "disablePortal",
    "disableRestoreFocus",
    "disableScrollLock",
    "hideBackdrop",
    "keepMounted"
];
const modalClasses = _modalUnstyled.modalUnstyledClasses;
const extendUtilityClasses = (ownerState)=>{
    return ownerState.classes;
};
const ModalRoot = _styledDefault.default('div', {
    name: 'MuiModal',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            !ownerState.open && ownerState.exited && styles.hidden
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        position: 'fixed',
        zIndex: theme.zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0
    }, !ownerState.open && ownerState.exited && {
        visibility: 'hidden'
    })
);
const ModalBackdrop = _styledDefault.default(_backdropDefault.default, {
    name: 'MuiModal',
    slot: 'Backdrop',
    overridesResolver: (props, styles)=>{
        return styles.backdrop;
    }
})({
    zIndex: -1
});
/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * - [Dialog](/api/dialog/)
 * - [Drawer](/api/drawer/)
 * - [Menu](/api/menu/)
 * - [Popover](/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 */ const Modal = /*#__PURE__*/ _react.forwardRef(function Modal(inProps, ref) {
    var _componentsProps$root;
    const props = _useThemePropsDefault.default({
        name: 'MuiModal',
        props: inProps
    });
    const { BackdropComponent =ModalBackdrop , closeAfterTransition =false , children , components ={} , componentsProps ={} , disableAutoFocus =false , disableEnforceFocus =false , disableEscapeKeyDown =false , disablePortal =false , disableRestoreFocus =false , disableScrollLock =false , hideBackdrop =false , keepMounted =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [exited, setExited] = _react.useState(true);
    const commonProps = {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
    };
    const ownerState = _extendsDefault.default({}, props, commonProps, {
        exited
    });
    const classes = extendUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_modalUnstyledDefault.default, _extendsDefault.default({
        components: _extendsDefault.default({
            Root: ModalRoot
        }, components),
        componentsProps: {
            root: _extendsDefault.default({}, componentsProps.root, (!components.Root || !_base.isHostComponent(components.Root)) && {
                ownerState: _extendsDefault.default({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
            })
        },
        BackdropComponent: BackdropComponent,
        onTransitionEnter: ()=>setExited(false)
        ,
        onTransitionExited: ()=>setExited(true)
        ,
        ref: ref
    }, other, {
        classes: classes
    }, commonProps, {
        children: children
    }));
});
Modal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */ BackdropComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Backdrop`](/api/backdrop/) element.
   */ BackdropProps: _propTypesDefault.default.object,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */ closeAfterTransition: _propTypesDefault.default.bool,
    /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Modal.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */ disableEscapeKeyDown: _propTypesDefault.default.bool,
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */ disableRestoreFocus: _propTypesDefault.default.bool,
    /**
   * Disable the scroll lock behavior.
   * @default false
   */ disableScrollLock: _propTypesDefault.default.bool,
    /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */ hideBackdrop: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Callback fired when the backdrop is clicked.
   */ onBackdropClick: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = Modal;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/base":"656dE","@mui/utils":"cttLn","@mui/base/ModalUnstyled":"gyieE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Backdrop":"23PLD","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23PLD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_backdropDefault.default
);
parcelHelpers.export(exports, "backdropClasses", ()=>_backdropClassesDefault.default
);
var _backdrop = require("./Backdrop");
var _backdropDefault = parcelHelpers.interopDefault(_backdrop);
var _backdropClasses = require("./backdropClasses");
var _backdropClassesDefault = parcelHelpers.interopDefault(_backdropClasses);
parcelHelpers.exportAll(_backdropClasses, exports);

},{"./Backdrop":"pNqif","./backdropClasses":"jyRrv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"pNqif":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _fade = require("../Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _backdropClasses = require("./backdropClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "component",
    "components",
    "componentsProps",
    "className",
    "invisible",
    "open",
    "transitionDuration",
    "TransitionComponent"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , invisible  } = ownerState;
    const slots = {
        root: [
            'root',
            invisible && 'invisible'
        ]
    };
    return _base.unstable_composeClasses(slots, _backdropClasses.getBackdropUtilityClass, classes);
};
const BackdropRoot = _styledDefault.default('div', {
    name: 'MuiBackdrop',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.invisible && styles.invisible
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        position: 'fixed',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        WebkitTapHighlightColor: 'transparent'
    }, ownerState.invisible && {
        backgroundColor: 'transparent'
    })
);
const Backdrop = /*#__PURE__*/ _react.forwardRef(function Backdrop(inProps, ref) {
    var _components$Root, _componentsProps$root;
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiBackdrop'
    });
    const { children , component ='div' , components ={} , componentsProps ={} , className , invisible =false , open , transitionDuration , // eslint-disable-next-line react/prop-types
    TransitionComponent =_fadeDefault.default  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        component,
        invisible
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        in: open,
        timeout: transitionDuration
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(BackdropRoot, {
            "aria-hidden": true,
            as: (_components$Root = components.Root) != null ? _components$Root : component,
            className: _clsxDefault.default(classes.root, className),
            ownerState: _extendsDefault.default({}, ownerState, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState),
            classes: classes,
            ref: ref,
            children: children
        })
    }));
});
Backdrop.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Backdrop.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Backdrop.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */ invisible: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
exports.default = Backdrop;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Fade":"eB1a4","./backdropClasses":"jyRrv","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eB1a4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_fadeDefault.default
);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);

},{"./Fade":"kfXtn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfXtn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _utils = require("@mui/utils");
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _utils1 = require("../transitions/utils");
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "addEndListener",
    "appear",
    "children",
    "easing",
    "in",
    "onEnter",
    "onEntered",
    "onEntering",
    "onExit",
    "onExited",
    "onExiting",
    "style",
    "timeout",
    "TransitionComponent"
];
const styles = {
    entering: {
        opacity: 1
    },
    entered: {
        opacity: 1
    }
};
/**
 * The Fade transition is used by the [Modal](/components/modal/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */ const Fade = /*#__PURE__*/ _react.forwardRef(function Fade(props, ref) {
    const theme = _useThemeDefault.default();
    const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { addEndListener , appear =true , children , easing , in: inProp , onEnter , onEntered , onEntering , onExit , onExited , onExiting , style , timeout =defaultTimeout , // eslint-disable-next-line react/prop-types
    TransitionComponent =_reactTransitionGroup.Transition  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const enableStrictModeCompat = true;
    const nodeRef = _react.useRef(null);
    const foreignRef = _useForkRefDefault.default(children.ref, ref);
    const handleRef = _useForkRefDefault.default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback)=>(maybeIsAppearing)=>{
            if (callback) {
                const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
                if (maybeIsAppearing === undefined) callback(node);
                else callback(node, maybeIsAppearing);
            }
        }
    ;
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing)=>{
        _utils1.reflow(node); // So the animation always start from the start.
        const transitionProps = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onEnter) onEnter(node, isAppearing);
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node)=>{
        const transitionProps = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onExit) onExit(node);
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next)=>{
        if (addEndListener) // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        appear: appear,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout
    }, other, {
        children: (state, childProps)=>{
            return /*#__PURE__*/ _react.cloneElement(children, _extendsDefault.default({
                style: _extendsDefault.default({
                    opacity: 0,
                    visibility: state === 'exited' && !inProp ? 'hidden' : undefined
                }, styles[state], style, children.props.style),
                ref: handleRef
            }, childProps));
        }
    }));
});
Fade.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */ appear: _propTypesDefault.default.bool,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */ easing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.shape({
            enter: _propTypesDefault.default.string,
            exit: _propTypesDefault.default.string
        }),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component will transition in.
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntered: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntering: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExit: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExited: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExiting: _propTypesDefault.default.func,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ timeout: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
exports.default = Fade;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","react-transition-group":"fZSkB","@mui/utils":"cttLn","../styles/useTheme":"5nWMX","../transitions/utils":"bSIvX","../utils/useForkRef":"Q1vCZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSIvX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reflow", ()=>reflow
);
parcelHelpers.export(exports, "getTransitionProps", ()=>getTransitionProps
);
const reflow = (node)=>node.scrollTop
;
function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const { timeout , easing , style ={}  } = props;
    return {
        duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
        delay: style.transitionDelay
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jyRrv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBackdropUtilityClass", ()=>getBackdropUtilityClass
);
var _base = require("@mui/base");
function getBackdropUtilityClass(slot) {
    return _base.generateUtilityClass('MuiBackdrop', slot);
}
const backdropClasses = _base.generateUtilityClasses('MuiBackdrop', [
    'root',
    'invisible'
]);
exports.default = backdropClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZVcF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_slideDefault.default
);
var _slide = require("./Slide");
var _slideDefault = parcelHelpers.interopDefault(_slide);

},{"./Slide":"eCirY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCirY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setTranslateValue", ()=>setTranslateValue
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _utils = require("@mui/utils");
var _debounce = require("../utils/debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _utils1 = require("../transitions/utils");
var _utils2 = require("../utils"); // Translate the node so it can't be seen on the screen.
// Later, we're going to translate the node back to its original location with `none`.
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "addEndListener",
    "appear",
    "children",
    "container",
    "direction",
    "easing",
    "in",
    "onEnter",
    "onEntered",
    "onEntering",
    "onExit",
    "onExited",
    "onExiting",
    "style",
    "timeout",
    "TransitionComponent"
];
function getTranslateValue(direction, node, resolvedContainer) {
    const rect = node.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = _utils2.ownerWindow(node);
    let transform;
    if (node.fakeTransform) transform = node.fakeTransform;
    else {
        const computedStyle = containerWindow.getComputedStyle(node);
        transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform && transform !== 'none' && typeof transform === 'string') {
        const transformValues = transform.split('(')[1].split(')')[0].split(',');
        offsetX = parseInt(transformValues[4], 10);
        offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === 'left') {
        if (containerRect) return `translateX(${containerRect.right + offsetX - rect.left}px)`;
        return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction === 'right') {
        if (containerRect) return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
        return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction === 'up') {
        if (containerRect) return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
        return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    } // direction === 'down'
    if (containerRect) return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
}
function resolveContainer(containerPropProp) {
    return typeof containerPropProp === 'function' ? containerPropProp() : containerPropProp;
}
function setTranslateValue(direction, node, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction, node, resolvedContainer);
    if (transform) {
        node.style.webkitTransform = transform;
        node.style.transform = transform;
    }
}
/**
 * The Slide transition is used by the [Drawer](/components/drawers/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */ const Slide = /*#__PURE__*/ _react.forwardRef(function Slide(props, ref) {
    const theme = _useThemeDefault.default();
    const defaultEasing = {
        enter: theme.transitions.easing.easeOut,
        exit: theme.transitions.easing.sharp
    };
    const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { addEndListener , appear =true , children , container: containerProp , direction ='down' , easing: easingProp = defaultEasing , in: inProp , onEnter , onEntered , onEntering , onExit , onExited , onExiting , style , timeout =defaultTimeout , // eslint-disable-next-line react/prop-types
    TransitionComponent =_reactTransitionGroup.Transition  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const childrenRef = _react.useRef(null);
    const handleRefIntermediary = _useForkRefDefault.default(children.ref, childrenRef);
    const handleRef = _useForkRefDefault.default(handleRefIntermediary, ref);
    const normalizedTransitionCallback = (callback)=>(isAppearing)=>{
            if (callback) {
                // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
                if (isAppearing === undefined) callback(childrenRef.current);
                else callback(childrenRef.current, isAppearing);
            }
        }
    ;
    const handleEnter = normalizedTransitionCallback((node, isAppearing)=>{
        setTranslateValue(direction, node, containerProp);
        _utils1.reflow(node);
        if (onEnter) onEnter(node, isAppearing);
    });
    const handleEntering = normalizedTransitionCallback((node, isAppearing)=>{
        const transitionProps = _utils1.getTransitionProps({
            timeout,
            style,
            easing: easingProp
        }, {
            mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extendsDefault.default({}, transitionProps));
        node.style.transition = theme.transitions.create('transform', _extendsDefault.default({}, transitionProps));
        node.style.webkitTransform = 'none';
        node.style.transform = 'none';
        if (onEntering) onEntering(node, isAppearing);
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node)=>{
        const transitionProps = _utils1.getTransitionProps({
            timeout,
            style,
            easing: easingProp
        }, {
            mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);
        setTranslateValue(direction, node, containerProp);
        if (onExit) onExit(node);
    });
    const handleExited = normalizedTransitionCallback((node)=>{
        // No need for transitions when the component is hidden
        node.style.webkitTransition = '';
        node.style.transition = '';
        if (onExited) onExited(node);
    });
    const handleAddEndListener = (next)=>{
        if (addEndListener) // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(childrenRef.current, next);
    };
    const updatePosition = _react.useCallback(()=>{
        if (childrenRef.current) setTranslateValue(direction, childrenRef.current, containerProp);
    }, [
        direction,
        containerProp
    ]);
    _react.useEffect(()=>{
        // Skip configuration where the position is screen size invariant.
        if (inProp || direction === 'down' || direction === 'right') return undefined;
        const handleResize = _debounceDefault.default(()=>{
            if (childrenRef.current) setTranslateValue(direction, childrenRef.current, containerProp);
        });
        const containerWindow = _utils2.ownerWindow(childrenRef.current);
        containerWindow.addEventListener('resize', handleResize);
        return ()=>{
            handleResize.clear();
            containerWindow.removeEventListener('resize', handleResize);
        };
    }, [
        direction,
        inProp,
        containerProp
    ]);
    _react.useEffect(()=>{
        if (!inProp) // We need to update the position of the drawer when the direction change and
        // when it's hidden.
        updatePosition();
    }, [
        inProp,
        updatePosition
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        nodeRef: childrenRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        appear: appear,
        in: inProp,
        timeout: timeout
    }, other, {
        children: (state, childProps)=>{
            return /*#__PURE__*/ _react.cloneElement(children, _extendsDefault.default({
                ref: handleRef,
                style: _extendsDefault.default({
                    visibility: state === 'exited' && !inProp ? 'hidden' : undefined
                }, style, children.props.style)
            }, childProps));
        }
    }));
});
Slide.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */ appear: _propTypesDefault.default.bool,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * An HTML element, or a function that returns one.
   * It's used to set the container the Slide is transitioning from.
   */ container: _utils.chainPropTypes(_propTypesDefault.default.oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]), (props)=>{
        if (props.open) {
            const resolvedContainer = resolveContainer(props.container);
            if (resolvedContainer && resolvedContainer.nodeType === 1) {
                const box = resolvedContainer.getBoundingClientRect();
                if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) return new Error([
                    'MUI: The `container` prop provided to the component is invalid.',
                    'The anchor element should be part of the document layout.',
                    "Make sure the element is present in the document or that it's not display none."
                ].join('\n'));
            } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== 'function' || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) return new Error([
                'MUI: The `container` prop provided to the component is invalid.',
                'It should be an HTML element instance.'
            ].join('\n'));
        }
        return null;
    }),
    /**
   * Direction the child node will enter from.
   * @default 'down'
   */ direction: _propTypesDefault.default.oneOf([
        'down',
        'left',
        'right',
        'up'
    ]),
    /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   * @default {
   *   enter: theme.transitions.easing.easeOut,
   *   exit: theme.transitions.easing.sharp,
   * }
   */ easing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.shape({
            enter: _propTypesDefault.default.string,
            exit: _propTypesDefault.default.string
        }),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component will transition in.
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntered: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntering: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExit: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExited: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExiting: _propTypesDefault.default.func,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ timeout: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
exports.default = Slide;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","react-transition-group":"fZSkB","@mui/utils":"cttLn","../utils/debounce":"aggDu","../utils/useForkRef":"Q1vCZ","../styles/useTheme":"5nWMX","../transitions/utils":"bSIvX","../utils":"9bp9M","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFQC1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDrawerUtilityClass", ()=>getDrawerUtilityClass
);
var _base = require("@mui/base");
function getDrawerUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDrawer', slot);
}
const drawerClasses = _base.generateUtilityClasses('MuiDrawer', [
    'root',
    'docked',
    'paper',
    'paperAnchorLeft',
    'paperAnchorRight',
    'paperAnchorTop',
    'paperAnchorBottom',
    'paperAnchorDockedLeft',
    'paperAnchorDockedRight',
    'paperAnchorDockedTop',
    'paperAnchorDockedBottom',
    'modal'
]);
exports.default = drawerClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHE5Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_dividerDefault.default
);
parcelHelpers.export(exports, "dividerClasses", ()=>_dividerClassesDefault.default
);
var _divider = require("./Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _dividerClasses = require("./dividerClasses");
var _dividerClassesDefault = parcelHelpers.interopDefault(_dividerClasses);
parcelHelpers.exportAll(_dividerClasses, exports);

},{"./Divider":"2OI81","./dividerClasses":"54IFg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OI81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _dividerClasses = require("./dividerClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "absolute",
    "children",
    "className",
    "component",
    "flexItem",
    "light",
    "orientation",
    "role",
    "textAlign",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { absolute , children , classes , flexItem , light , orientation , textAlign , variant  } = ownerState;
    const slots = {
        root: [
            'root',
            absolute && 'absolute',
            variant,
            light && 'light',
            orientation === 'vertical' && 'vertical',
            flexItem && 'flexItem',
            children && 'withChildren',
            children && orientation === 'vertical' && 'withChildrenVertical',
            textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight',
            textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'
        ],
        wrapper: [
            'wrapper',
            orientation === 'vertical' && 'wrapperVertical'
        ]
    };
    return _base.unstable_composeClasses(slots, _dividerClasses.getDividerUtilityClass, classes);
};
const DividerRoot = _styledDefault.default('div', {
    name: 'MuiDivider',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.absolute && styles.absolute,
            styles[ownerState.variant],
            ownerState.light && styles.light,
            ownerState.orientation === 'vertical' && styles.vertical,
            ownerState.flexItem && styles.flexItem,
            ownerState.children && styles.withChildren,
            ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical,
            ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight,
            ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        margin: 0,
        // Reset browser default style.
        flexShrink: 0,
        borderWidth: 0,
        borderStyle: 'solid',
        borderColor: theme.palette.divider,
        borderBottomWidth: 'thin'
    }, ownerState.absolute && {
        position: 'absolute',
        bottom: 0,
        left: 0,
        width: '100%'
    }, ownerState.light && {
        borderColor: _system.alpha(theme.palette.divider, 0.08)
    }, ownerState.variant === 'inset' && {
        marginLeft: 72
    }, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
        marginLeft: theme.spacing(2),
        marginRight: theme.spacing(2)
    }, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
    }, ownerState.orientation === 'vertical' && {
        height: '100%',
        borderBottomWidth: 0,
        borderRightWidth: 'thin'
    }, ownerState.flexItem && {
        alignSelf: 'stretch',
        height: 'auto'
    })
, ({ theme , ownerState  })=>_extendsDefault.default({}, ownerState.children && {
        display: 'flex',
        whiteSpace: 'nowrap',
        textAlign: 'center',
        border: 0,
        '&::before, &::after': {
            position: 'relative',
            width: '100%',
            borderTop: `thin solid ${theme.palette.divider}`,
            top: '50%',
            content: '""',
            transform: 'translateY(50%)'
        }
    })
, ({ theme , ownerState  })=>_extendsDefault.default({}, ownerState.children && ownerState.orientation === 'vertical' && {
        flexDirection: 'column',
        '&::before, &::after': {
            height: '100%',
            top: '0%',
            left: '50%',
            borderTop: 0,
            borderLeft: `thin solid ${theme.palette.divider}`,
            transform: 'translateX(0%)'
        }
    })
, ({ ownerState  })=>_extendsDefault.default({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
        '&::before': {
            width: '90%'
        },
        '&::after': {
            width: '10%'
        }
    }, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
        '&::before': {
            width: '10%'
        },
        '&::after': {
            width: '90%'
        }
    })
);
const DividerWrapper = _styledDefault.default('span', {
    name: 'MuiDivider',
    slot: 'Wrapper',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.wrapper,
            ownerState.orientation === 'vertical' && styles.wrapperVertical
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'inline-block',
        paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
        paddingRight: `calc(${theme.spacing(1)} * 1.2)`
    }, ownerState.orientation === 'vertical' && {
        paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
        paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
    })
);
const Divider = /*#__PURE__*/ _react.forwardRef(function Divider(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDivider'
    });
    const { absolute =false , children , className , component =children ? 'div' : 'hr' , flexItem =false , light =false , orientation ='horizontal' , role =component !== 'hr' ? 'separator' : undefined , textAlign ='center' , variant ='fullWidth'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        absolute,
        component,
        flexItem,
        light,
        orientation,
        role,
        textAlign,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(DividerRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        role: role,
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: children ? /*#__PURE__*/ _jsxRuntime.jsx(DividerWrapper, {
            className: classes.wrapper,
            ownerState: ownerState,
            children: children
        }) : null
    }));
});
Divider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Absolutely position the element.
   * @default false
   */ absolute: _propTypesDefault.default.bool,
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, a vertical divider will have the correct height when used in flex container.
   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
   * @default false
   */ flexItem: _propTypesDefault.default.bool,
    /**
   * If `true`, the divider will have a lighter color.
   * @default false
   */ light: _propTypesDefault.default.bool,
    /**
   * The component orientation.
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * @ignore
   */ role: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The text alignment.
   * @default 'center'
   */ textAlign: _propTypesDefault.default.oneOf([
        'center',
        'left',
        'right'
    ]),
    /**
   * The variant to use.
   * @default 'fullWidth'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'fullWidth',
            'inset',
            'middle'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Divider;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./dividerClasses":"54IFg","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"54IFg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDividerUtilityClass", ()=>getDividerUtilityClass
);
var _base = require("@mui/base");
function getDividerUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDivider', slot);
}
const dividerClasses = _base.generateUtilityClasses('MuiDivider', [
    'root',
    'absolute',
    'fullWidth',
    'inset',
    'middle',
    'flexItem',
    'light',
    'vertical',
    'withChildren',
    'withChildrenVertical',
    'textAlignRight',
    'textAlignLeft',
    'wrapper',
    'wrapperVertical'
]);
exports.default = dividerClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"38BrD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_iconButtonDefault.default
);
parcelHelpers.export(exports, "iconButtonClasses", ()=>_iconButtonClassesDefault.default
);
var _iconButton = require("./IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _iconButtonClasses = require("./iconButtonClasses");
var _iconButtonClassesDefault = parcelHelpers.interopDefault(_iconButtonClasses);
parcelHelpers.exportAll(_iconButtonClasses, exports);

},{"./IconButton":"gIPDQ","./iconButtonClasses":"3wyQl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gIPDQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _iconButtonClasses = require("./iconButtonClasses");
var _iconButtonClassesDefault = parcelHelpers.interopDefault(_iconButtonClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "edge",
    "children",
    "className",
    "color",
    "disabled",
    "disableFocusRipple",
    "size"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disabled , color , edge , size  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            color !== 'default' && `color${_capitalizeDefault.default(color)}`,
            edge && `edge${_capitalizeDefault.default(edge)}`,
            `size${_capitalizeDefault.default(size)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _iconButtonClasses.getIconButtonUtilityClass, classes);
};
const IconButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    name: 'MuiIconButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.color !== 'default' && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            ownerState.edge && styles[`edge${_capitalizeDefault.default(ownerState.edge)}`],
            styles[`size${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        textAlign: 'center',
        flex: '0 0 auto',
        fontSize: theme.typography.pxToRem(24),
        padding: 8,
        borderRadius: '50%',
        overflow: 'visible',
        // Explicitly set the default value to solve a bug on IE11.
        color: theme.palette.action.active,
        transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
        })
    }, !ownerState.disableRipple && {
        '&:hover': {
            backgroundColor: _system.alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }
    }, ownerState.edge === 'start' && {
        marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
        marginRight: ownerState.size === 'small' ? -3 : -12
    })
, ({ theme , ownerState  })=>_extendsDefault.default({}, ownerState.color === 'inherit' && {
        color: 'inherit'
    }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extendsDefault.default({
        color: theme.palette[ownerState.color].main
    }, !ownerState.disableRipple && {
        '&:hover': {
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }
    }), ownerState.size === 'small' && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === 'large' && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
    }, {
        [`&.${_iconButtonClassesDefault.default.disabled}`]: {
            backgroundColor: 'transparent',
            color: theme.palette.action.disabled
        }
    })
);
/**
 * Refer to the [Icons](/components/icons/) section of the documentation
 * regarding the available icon options.
 */ const IconButton = /*#__PURE__*/ _react.forwardRef(function IconButton(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiIconButton'
    });
    const { edge =false , children , className , color ='default' , disabled =false , disableFocusRipple =false , size ='medium'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        edge,
        color,
        disabled,
        disableFocusRipple,
        size
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(IconButtonRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: children
    }));
});
IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The icon to display.
   */ children: _utils.chainPropTypes(_propTypesDefault.default.node, (props)=>{
        const found = _react.Children.toArray(props.children).some((child)=>/*#__PURE__*/ _react.isValidElement(child) && child.props.onClick
        );
        if (found) return new Error([
            'MUI: You are providing an onClick event listener to a child of a button element.',
            'Prefer applying it to the IconButton directly.',
            'This guarantees that the whole <button> will be responsive to click events.'
        ].join('\n'));
        return null;
    }),
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'default'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'default',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */ edge: _propTypesDefault.default.oneOf([
        'end',
        'start',
        false
    ]),
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = IconButton;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../ButtonBase":"aeHoF","../utils/capitalize":"lwNtZ","./iconButtonClasses":"3wyQl","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3wyQl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIconButtonUtilityClass", ()=>getIconButtonUtilityClass
);
var _base = require("@mui/base");
function getIconButtonUtilityClass(slot) {
    return _base.generateUtilityClass('MuiIconButton', slot);
}
const iconButtonClasses = _base.generateUtilityClasses('MuiIconButton', [
    'root',
    'disabled',
    'colorInherit',
    'colorPrimary',
    'colorSecondary',
    'edgeStart',
    'edgeEnd',
    'sizeSmall',
    'sizeMedium',
    'sizeLarge'
]);
exports.default = iconButtonClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eYtXA":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}), 'Menu');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"7xa75":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), 'ChevronLeft');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"3dP5K":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), 'ChevronRight');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"sngh0":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$2433 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$2433.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _fab = require("@mui/material/Fab");
var _fabDefault = parcelHelpers.interopDefault(_fab);
var _add = require("@mui/icons-material/Add");
var _addDefault = parcelHelpers.interopDefault(_add);
var _dialogs = require("../store/dialogs");
var _s = $RefreshSig$();
function Home() {
    _s();
    const dispatch = _reactRedux.useDispatch();
    const showNewVault = ()=>{
        dispatch(_dialogs.setDialogVisible([
            _dialogs.NEW_VAULT,
            true
        ]));
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
                children: "Welcome!"
            }, void 0, false, {
                fileName: "src/authenticated/home.tsx",
                lineNumber: 18,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fabDefault.default, {
                onClick: showNewVault,
                color: "primary",
                "aria-label": "add new vault",
                sx: {
                    position: "absolute",
                    bottom: 16,
                    right: 16
                },
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_addDefault.default, {}, void 0, false, {
                    fileName: "src/authenticated/home.tsx",
                    lineNumber: 26,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/home.tsx",
                lineNumber: 20,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
exports.default = Home;
_s(Home, "rgTLoBID190wEKCp9+G8W6F7A5M=", false, function() {
    return [
        _reactRedux.useDispatch
    ];
});
_c = Home;
var _c;
$RefreshReg$(_c, "Home");

  $parcel$ReactRefreshHelpers$2433.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","@mui/material/Fab":"bL0iw","@mui/icons-material/Add":"jBiYR","../store/dialogs":"3qJjA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"bL0iw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_fabDefault.default
);
parcelHelpers.export(exports, "fabClasses", ()=>_fabClassesDefault.default
);
var _fab = require("./Fab");
var _fabDefault = parcelHelpers.interopDefault(_fab);
var _fabClasses = require("./fabClasses");
var _fabClassesDefault = parcelHelpers.interopDefault(_fabClasses);
parcelHelpers.exportAll(_fabClasses, exports);

},{"./Fab":"ZvdhD","./fabClasses":"3bD1F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ZvdhD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _fabClasses = require("./fabClasses");
var _fabClassesDefault = parcelHelpers.interopDefault(_fabClasses);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "disabled",
    "disableFocusRipple",
    "focusVisibleClassName",
    "size",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { color , variant , classes , size  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            `size${_capitalizeDefault.default(size)}`,
            color === 'inherit' ? 'colorInherit' : color
        ]
    };
    return _base.unstable_composeClasses(slots, _fabClasses.getFabUtilityClass, classes);
};
const FabRoot = _styledDefault.default(_buttonBaseDefault.default, {
    name: 'MuiFab',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`size${_capitalizeDefault.default(ownerState.size)}`],
            ownerState.color === 'inherit' && styles.colorInherit,
            styles[_capitalizeDefault.default(ownerState.size)],
            styles[ownerState.color]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({}, theme.typography.button, {
        minHeight: 36,
        transition: theme.transitions.create([
            'background-color',
            'box-shadow',
            'border-color'
        ], {
            duration: theme.transitions.duration.short
        }),
        borderRadius: '50%',
        padding: 0,
        minWidth: 0,
        width: 56,
        height: 56,
        zIndex: theme.zIndex.fab,
        boxShadow: theme.shadows[6],
        '&:active': {
            boxShadow: theme.shadows[12]
        },
        color: theme.palette.getContrastText(theme.palette.grey[300]),
        backgroundColor: theme.palette.grey[300],
        '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: theme.palette.grey[300]
            },
            textDecoration: 'none'
        },
        [`&.${_fabClassesDefault.default.focusVisible}`]: {
            boxShadow: theme.shadows[6]
        },
        [`&.${_fabClassesDefault.default.disabled}`]: {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
        }
    }, ownerState.size === 'small' && {
        width: 40,
        height: 40
    }, ownerState.size === 'medium' && {
        width: 48,
        height: 48
    }, ownerState.variant === 'extended' && {
        borderRadius: 24,
        padding: '0 16px',
        width: 'auto',
        minHeight: 'auto',
        minWidth: 48,
        height: 48
    }, ownerState.variant === 'extended' && ownerState.size === 'small' && {
        width: 'auto',
        padding: '0 8px',
        borderRadius: 17,
        minWidth: 34,
        height: 34
    }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {
        width: 'auto',
        padding: '0 16px',
        borderRadius: 20,
        minWidth: 40,
        height: 40
    }, ownerState.color === 'inherit' && {
        color: 'inherit'
    })
, ({ theme , ownerState  })=>_extendsDefault.default({}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && theme.palette[ownerState.color] != null && {
        color: theme.palette[ownerState.color].contrastText,
        backgroundColor: theme.palette[ownerState.color].main,
        '&:hover': {
            backgroundColor: theme.palette[ownerState.color].dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: theme.palette[ownerState.color].main
            }
        }
    })
);
const Fab = /*#__PURE__*/ _react.forwardRef(function Fab(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFab'
    });
    const { children , className , color ='default' , component ='button' , disabled =false , disableFocusRipple =false , focusVisibleClassName , size ='large' , variant ='circular'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        disabled,
        disableFocusRipple,
        size,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(FabRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: _clsxDefault.default(classes.focusVisible, focusVisibleClassName),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: children
    }));
});
Fab.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'default'
   */ color: _propTypesDefault.default.oneOf([
        'default',
        'error',
        'info',
        'inherit',
        'primary',
        'secondary',
        'success',
        'warning'
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */ href: _propTypesDefault.default.string,
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'large'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'circular'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'circular',
            'extended'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Fab;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../ButtonBase":"aeHoF","../utils/capitalize":"lwNtZ","../styles/useThemeProps":"dewuS","./fabClasses":"3bD1F","../styles/styled":"32xTg","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bD1F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFabUtilityClass", ()=>getFabUtilityClass
);
var _base = require("@mui/base");
function getFabUtilityClass(slot) {
    return _base.generateUtilityClass('MuiFab', slot);
}
const fabClasses = _base.generateUtilityClasses('MuiFab', [
    'root',
    'primary',
    'secondary',
    'extended',
    'circular',
    'focusVisible',
    'disabled',
    'colorInherit',
    'sizeSmall',
    'sizeMedium',
    'sizeLarge',
    'info',
    'error',
    'warning',
    'success'
]);
exports.default = fabClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBiYR":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), 'Add');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"2tBl6":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$e6a2 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e6a2.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _list = require("@mui/material/List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _listItem = require("@mui/material/ListItem");
var _listItemDefault = parcelHelpers.interopDefault(_listItem);
var _listItemButton = require("@mui/material/ListItemButton");
var _listItemButtonDefault = parcelHelpers.interopDefault(_listItemButton);
var _listItemIcon = require("@mui/material/ListItemIcon");
var _listItemIconDefault = parcelHelpers.interopDefault(_listItemIcon);
var _listItemText = require("@mui/material/ListItemText");
var _listItemTextDefault = parcelHelpers.interopDefault(_listItemText);
var _listSubheader = require("@mui/material/ListSubheader");
var _listSubheaderDefault = parcelHelpers.interopDefault(_listSubheader);
var _divider = require("@mui/material/Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _add = require("@mui/icons-material/Add");
var _addDefault = parcelHelpers.interopDefault(_add);
var _lock = require("@mui/icons-material/Lock");
var _lockDefault = parcelHelpers.interopDefault(_lock);
var _lockOpen = require("@mui/icons-material/LockOpen");
var _lockOpenDefault = parcelHelpers.interopDefault(_lockOpen);
var _vaults = require("../store/vaults");
var _dialogs = require("../store/dialogs");
var _s = $RefreshSig$();
function VaultList() {
    _s();
    const { vaults  } = _reactRedux.useSelector(_vaults.vaultsSelector);
    const navigate = _reactRouterDom.useNavigate();
    const dispatch = _reactRedux.useDispatch();
    const showNewVault = ()=>{
        dispatch(_dialogs.setDialogVisible([
            _dialogs.NEW_VAULT,
            true
        ]));
    };
    const openVault = (vault)=>{
        dispatch(_vaults.setCurrent(vault));
        navigate(`/vault/${vault.uuid}`);
    };
    const SubHeader = ()=>{
        return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listSubheaderDefault.default, {
                    sx: {
                        paddingRight: 1
                    },
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                        direction: "row",
                        justifyContent: "space-between",
                        alignItems: "center",
                        children: [
                            "Vaults",
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                                sx: {
                                    width: 40,
                                    height: 40
                                },
                                onClick: showNewVault,
                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_addDefault.default, {}, void 0, false, {
                                    fileName: "src/authenticated/vault-list.tsx",
                                    lineNumber: 47,
                                    columnNumber: 15
                                }, this)
                            }, void 0, false, {
                                fileName: "src/authenticated/vault-list.tsx",
                                lineNumber: 46,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "src/authenticated/vault-list.tsx",
                        lineNumber: 40,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/authenticated/vault-list.tsx",
                    lineNumber: 39,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {}, void 0, false, {
                    fileName: "src/authenticated/vault-list.tsx",
                    lineNumber: 51,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true);
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listDefault.default, {
        component: "nav",
        subheader: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(SubHeader, {}, void 0, false, void 0, void 0),
        children: vaults.map((vault)=>{
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemDefault.default, {
                        component: "div",
                        disablePadding: true,
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemButtonDefault.default, {
                            onClick: ()=>openVault(vault)
                            ,
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemIconDefault.default, {
                                    children: vault.locked ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_lockDefault.default, {}, void 0, false, {
                                        fileName: "src/authenticated/vault-list.tsx",
                                        lineNumber: 64,
                                        columnNumber: 35
                                    }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_lockOpenDefault.default, {}, void 0, false, {
                                        fileName: "src/authenticated/vault-list.tsx",
                                        lineNumber: 64,
                                        columnNumber: 50
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src/authenticated/vault-list.tsx",
                                    lineNumber: 63,
                                    columnNumber: 17
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemTextDefault.default, {
                                    primary: vault.label
                                }, void 0, false, {
                                    fileName: "src/authenticated/vault-list.tsx",
                                    lineNumber: 66,
                                    columnNumber: 17
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src/authenticated/vault-list.tsx",
                            lineNumber: 62,
                            columnNumber: 15
                        }, this)
                    }, void 0, false, {
                        fileName: "src/authenticated/vault-list.tsx",
                        lineNumber: 61,
                        columnNumber: 13
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {
                        light: true
                    }, void 0, false, {
                        fileName: "src/authenticated/vault-list.tsx",
                        lineNumber: 69,
                        columnNumber: 13
                    }, this)
                ]
            }, vault.uuid, true, {
                fileName: "src/authenticated/vault-list.tsx",
                lineNumber: 60,
                columnNumber: 11
            }, this);
        })
    }, void 0, false, {
        fileName: "src/authenticated/vault-list.tsx",
        lineNumber: 57,
        columnNumber: 5
    }, this);
}
exports.default = VaultList;
_s(VaultList, "h9w3qJDS2nqCPLXVdsFmul4M/Lk=", false, function() {
    return [
        _reactRedux.useSelector,
        _reactRouterDom.useNavigate,
        _reactRedux.useDispatch
    ];
});
_c = VaultList;
var _c;
$RefreshReg$(_c, "VaultList");

  $parcel$ReactRefreshHelpers$e6a2.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","react-router-dom":"fdOAw","@mui/material/List":"PwNf5","@mui/material/ListItem":"kkzrF","@mui/material/ListItemButton":"gdWZi","@mui/material/ListItemIcon":"2P7xS","@mui/material/ListItemText":"g3ISx","@mui/material/ListSubheader":"kEPDP","@mui/material/Divider":"lHE5Y","@mui/material/Stack":"cuThX","@mui/material/IconButton":"38BrD","@mui/icons-material/Add":"jBiYR","@mui/icons-material/Lock":"izv07","@mui/icons-material/LockOpen":"hkos6","../store/vaults":"3zSpK","../store/dialogs":"3qJjA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"PwNf5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listDefault.default
);
parcelHelpers.export(exports, "listClasses", ()=>_listClassesDefault.default
);
var _list = require("./List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _listClasses = require("./listClasses");
var _listClassesDefault = parcelHelpers.interopDefault(_listClasses);
parcelHelpers.exportAll(_listClasses, exports);

},{"./List":"2ysO8","./listClasses":"knAFO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ysO8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _listContext = require("./ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _listClasses = require("./listClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "component",
    "dense",
    "disablePadding",
    "subheader"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disablePadding , dense , subheader  } = ownerState;
    const slots = {
        root: [
            'root',
            !disablePadding && 'padding',
            dense && 'dense',
            subheader && 'subheader'
        ]
    };
    return _base.unstable_composeClasses(slots, _listClasses.getListUtilityClass, classes);
};
const ListRoot = _styledDefault.default('ul', {
    name: 'MuiList',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            !ownerState.disablePadding && styles.padding,
            ownerState.dense && styles.dense,
            ownerState.subheader && styles.subheader
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        listStyle: 'none',
        margin: 0,
        padding: 0,
        position: 'relative'
    }, !ownerState.disablePadding && {
        paddingTop: 8,
        paddingBottom: 8
    }, ownerState.subheader && {
        paddingTop: 0
    })
);
const List = /*#__PURE__*/ _react.forwardRef(function List(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiList'
    });
    const { children , className , component ='ul' , dense =false , disablePadding =false , subheader  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const context = _react.useMemo(()=>({
            dense
        })
    , [
        dense
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        component,
        dense,
        disablePadding
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_listContextDefault.default.Provider, {
        value: context,
        children: /*#__PURE__*/ _jsxRuntime.jsxs(ListRoot, _extendsDefault.default({
            as: component,
            className: _clsxDefault.default(classes.root, className),
            ref: ref,
            ownerState: ownerState
        }, other, {
            children: [
                subheader,
                children
            ]
        }))
    });
});
List.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */ dense: _propTypesDefault.default.bool,
    /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */ disablePadding: _propTypesDefault.default.bool,
    /**
   * The content of the subheader, normally `ListSubheader`.
   */ subheader: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = List;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./ListContext":"lkCoV","./listClasses":"knAFO","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkCoV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const ListContext = /*#__PURE__*/ _react.createContext({});
ListContext.displayName = 'ListContext';
exports.default = ListContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"knAFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListUtilityClass", ()=>getListUtilityClass
);
var _base = require("@mui/base");
function getListUtilityClass(slot) {
    return _base.generateUtilityClass('MuiList', slot);
}
const listClasses = _base.generateUtilityClasses('MuiList', [
    'root',
    'padding',
    'dense',
    'subheader'
]);
exports.default = listClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kkzrF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listItemDefault.default
);
parcelHelpers.export(exports, "listItemClasses", ()=>_listItemClassesDefault.default
);
var _listItem = require("./ListItem");
var _listItemDefault = parcelHelpers.interopDefault(_listItem);
var _listItemClasses = require("./listItemClasses");
var _listItemClassesDefault = parcelHelpers.interopDefault(_listItemClasses);
parcelHelpers.exportAll(_listItemClasses, exports);

},{"./ListItem":"keutn","./listItemClasses":"8XkHi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"keutn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "overridesResolver", ()=>overridesResolver
);
parcelHelpers.export(exports, "ListItemRoot", ()=>ListItemRoot
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _isMuiElement = require("../utils/isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _listContext = require("../List/ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _listItemClasses = require("./listItemClasses");
var _listItemClassesDefault = parcelHelpers.interopDefault(_listItemClasses);
var _listItemButton = require("../ListItemButton");
var _listItemSecondaryAction = require("../ListItemSecondaryAction");
var _listItemSecondaryActionDefault = parcelHelpers.interopDefault(_listItemSecondaryAction);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className"
], _excluded2 = [
    "alignItems",
    "autoFocus",
    "button",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "ContainerComponent",
    "ContainerProps",
    "dense",
    "disabled",
    "disableGutters",
    "disablePadding",
    "divider",
    "focusVisibleClassName",
    "secondaryAction",
    "selected"
];
const overridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.root,
        ownerState.dense && styles.dense,
        ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart,
        ownerState.divider && styles.divider,
        !ownerState.disableGutters && styles.gutters,
        !ownerState.disablePadding && styles.padding,
        ownerState.button && styles.button,
        ownerState.hasSecondaryAction && styles.secondaryAction
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { alignItems , button , classes , dense , disabled , disableGutters , disablePadding , divider , hasSecondaryAction , selected  } = ownerState;
    const slots = {
        root: [
            'root',
            dense && 'dense',
            !disableGutters && 'gutters',
            !disablePadding && 'padding',
            divider && 'divider',
            disabled && 'disabled',
            button && 'button',
            alignItems === 'flex-start' && 'alignItemsFlexStart',
            hasSecondaryAction && 'secondaryAction',
            selected && 'selected'
        ],
        container: [
            'container'
        ]
    };
    return _base.unstable_composeClasses(slots, _listItemClasses.getListItemUtilityClass, classes);
};
const ListItemRoot = _styledDefault.default('div', {
    name: 'MuiListItem',
    slot: 'Root',
    overridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        position: 'relative',
        textDecoration: 'none',
        width: '100%',
        boxSizing: 'border-box',
        textAlign: 'left'
    }, !ownerState.disablePadding && _extendsDefault.default({
        paddingTop: 8,
        paddingBottom: 8
    }, ownerState.dense && {
        paddingTop: 4,
        paddingBottom: 4
    }, !ownerState.disableGutters && {
        paddingLeft: 16,
        paddingRight: 16
    }, !!ownerState.secondaryAction && {
        // Add some space to avoid collision as `ListItemSecondaryAction`
        // is absolutely positioned.
        paddingRight: 48
    }), !!ownerState.secondaryAction && {
        [`& > .${_listItemButton.listItemButtonClasses.root}`]: {
            paddingRight: 48
        }
    }, {
        [`&.${_listItemClassesDefault.default.focusVisible}`]: {
            backgroundColor: theme.palette.action.focus
        },
        [`&.${_listItemClassesDefault.default.selected}`]: {
            backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
            [`&.${_listItemClassesDefault.default.focusVisible}`]: {
                backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
            }
        },
        [`&.${_listItemClassesDefault.default.disabled}`]: {
            opacity: theme.palette.action.disabledOpacity
        }
    }, ownerState.alignItems === 'flex-start' && {
        alignItems: 'flex-start'
    }, ownerState.divider && {
        borderBottom: `1px solid ${theme.palette.divider}`,
        backgroundClip: 'padding-box'
    }, ownerState.button && {
        transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
        }),
        '&:hover': {
            textDecoration: 'none',
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        },
        [`&.${_listItemClassesDefault.default.selected}:hover`]: {
            backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
        }
    }, ownerState.hasSecondaryAction && {
        // Add some space to avoid collision as `ListItemSecondaryAction`
        // is absolutely positioned.
        paddingRight: 48
    })
);
const ListItemContainer = _styledDefault.default('li', {
    name: 'MuiListItem',
    slot: 'Container',
    overridesResolver: (props, styles)=>styles.container
})({
    position: 'relative'
});
/**
 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
 */ const ListItem = /*#__PURE__*/ _react.forwardRef(function ListItem(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListItem'
    });
    const { alignItems ='center' , autoFocus =false , button =false , children: childrenProp , className , component: componentProp , components ={} , componentsProps ={} , ContainerComponent ='li' , ContainerProps: { className: ContainerClassName  } = {} , dense =false , disabled =false , disableGutters =false , disablePadding =false , divider =false , focusVisibleClassName , secondaryAction , selected =false  } = props, ContainerProps = _objectWithoutPropertiesLooseDefault.default(props.ContainerProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const context = _react.useContext(_listContextDefault.default);
    const childContext = {
        dense: dense || context.dense || false,
        alignItems,
        disableGutters
    };
    const listItemRef = _react.useRef(null);
    _useEnhancedEffectDefault.default(()=>{
        if (autoFocus) {
            if (listItemRef.current) listItemRef.current.focus();
            else console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
        }
    }, [
        autoFocus
    ]);
    const children = _react.Children.toArray(childrenProp); // v4 implementation, deprecated in v5, will be removed in v6
    const hasSecondaryAction = children.length && _isMuiElementDefault.default(children[children.length - 1], [
        'ListItemSecondaryAction'
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        alignItems,
        autoFocus,
        button,
        dense: childContext.dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
    });
    const classes = useUtilityClasses(ownerState);
    const handleRef = _useForkRefDefault.default(listItemRef, ref);
    const Root = components.Root || ListItemRoot;
    const rootProps = componentsProps.root || {};
    const componentProps = _extendsDefault.default({
        className: _clsxDefault.default(classes.root, rootProps.className, className),
        disabled
    }, other);
    let Component = componentProp || 'li';
    if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = _clsxDefault.default(_listItemClassesDefault.default.focusVisible, focusVisibleClassName);
        Component = _buttonBaseDefault.default;
    } // v4 implementation, deprecated in v5, will be removed in v6
    if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.
        if (ContainerComponent === 'li') {
            if (Component === 'li') Component = 'div';
            else if (componentProps.component === 'li') componentProps.component = 'div';
        }
        return /*#__PURE__*/ _jsxRuntime.jsx(_listContextDefault.default.Provider, {
            value: childContext,
            children: /*#__PURE__*/ _jsxRuntime.jsxs(ListItemContainer, _extendsDefault.default({
                as: ContainerComponent,
                className: _clsxDefault.default(classes.container, ContainerClassName),
                ref: handleRef,
                ownerState: ownerState
            }, ContainerProps, {
                children: [
                    /*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({}, rootProps, !_base.isHostComponent(Root) && {
                        as: Component,
                        ownerState: _extendsDefault.default({}, ownerState, rootProps.ownerState)
                    }, componentProps, {
                        children: children
                    })),
                    children.pop()
                ]
            }))
        });
    }
    return /*#__PURE__*/ _jsxRuntime.jsx(_listContextDefault.default.Provider, {
        value: childContext,
        children: /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, {
            as: Component,
            ref: handleRef,
            ownerState: ownerState
        }, !_base.isHostComponent(Root) && {
            ownerState: _extendsDefault.default({}, ownerState, rootProps.ownerState)
        }, componentProps, {
            children: [
                children,
                secondaryAction && /*#__PURE__*/ _jsxRuntime.jsx(_listItemSecondaryActionDefault.default, {
                    children: secondaryAction
                })
            ]
        }))
    });
});
ListItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Defines the `align-items` style property.
   * @default 'center'
   */ alignItems: _propTypesDefault.default.oneOf([
        'center',
        'flex-start'
    ]),
    /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the list item is a button (using `ButtonBase`). Props intended
   * for `ButtonBase` can then be applied to `ListItem`.
   * @default false
   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
   */ button: _propTypesDefault.default.bool,
    /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */ children: _utils.chainPropTypes(_propTypesDefault.default.node, (props)=>{
        const children = _react.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
        let secondaryActionIndex = -1;
        for(let i = children.length - 1; i >= 0; i -= 1){
            const child = children[i];
            if (_isMuiElementDefault.default(child, [
                'ListItemSecondaryAction'
            ])) {
                secondaryActionIndex = i;
                break;
            }
        } //  is ListItemSecondaryAction the last child of ListItem
        if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
        return null;
    }),
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        root: _propTypesDefault.default.object
    }),
    /**
   * The container component used when a `ListItemSecondaryAction` is the last child.
   * @default 'li'
   * @deprecated
   */ ContainerComponent: _utils.elementTypeAcceptingRef,
    /**
   * Props applied to the container component if used.
   * @default {}
   * @deprecated
   */ ContainerProps: _propTypesDefault.default.object,
    /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */ dense: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   * @default false
   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the left and right padding is removed.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * If `true`, all padding is removed.
   * @default false
   */ disablePadding: _propTypesDefault.default.bool,
    /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */ divider: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * The element to display at the end of ListItem.
   */ secondaryAction: _propTypesDefault.default.node,
    /**
   * Use to apply selected styling.
   * @default false
   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
   */ selected: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = ListItem;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/utils":"cttLn","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../ButtonBase":"aeHoF","../utils/isMuiElement":"guro1","../utils/useEnhancedEffect":"jIOpS","../utils/useForkRef":"Q1vCZ","../List/ListContext":"lkCoV","./listItemClasses":"8XkHi","../ListItemButton":"gdWZi","../ListItemSecondaryAction":"iwQQM","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8XkHi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListItemUtilityClass", ()=>getListItemUtilityClass
);
var _base = require("@mui/base");
function getListItemUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListItem', slot);
}
const listItemClasses = _base.generateUtilityClasses('MuiListItem', [
    'root',
    'container',
    'focusVisible',
    'dense',
    'alignItemsFlexStart',
    'disabled',
    'divider',
    'gutters',
    'padding',
    'button',
    'secondaryAction',
    'selected'
]);
exports.default = listItemClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gdWZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listItemButtonDefault.default
);
parcelHelpers.export(exports, "listItemButtonClasses", ()=>_listItemButtonClassesDefault.default
);
var _listItemButton = require("./ListItemButton");
var _listItemButtonDefault = parcelHelpers.interopDefault(_listItemButton);
var _listItemButtonClasses = require("./listItemButtonClasses");
var _listItemButtonClassesDefault = parcelHelpers.interopDefault(_listItemButtonClasses);
parcelHelpers.exportAll(_listItemButtonClasses, exports);

},{"./ListItemButton":"4iTuk","./listItemButtonClasses":"fd7QL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iTuk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "overridesResolver", ()=>overridesResolver
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _listContext = require("../List/ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _listItemButtonClasses = require("./listItemButtonClasses");
var _listItemButtonClassesDefault = parcelHelpers.interopDefault(_listItemButtonClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "alignItems",
    "autoFocus",
    "component",
    "children",
    "dense",
    "disableGutters",
    "divider",
    "focusVisibleClassName",
    "selected"
];
const overridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.root,
        ownerState.dense && styles.dense,
        ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart,
        ownerState.divider && styles.divider,
        !ownerState.disableGutters && styles.gutters
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { alignItems , classes , dense , disabled , disableGutters , divider , selected  } = ownerState;
    const slots = {
        root: [
            'root',
            dense && 'dense',
            !disableGutters && 'gutters',
            divider && 'divider',
            disabled && 'disabled',
            alignItems === 'flex-start' && 'alignItemsFlexStart',
            selected && 'selected'
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _listItemButtonClasses.getListItemButtonUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const ListItemButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiListItemButton',
    slot: 'Root',
    overridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'flex',
        flexGrow: 1,
        justifyContent: 'flex-start',
        alignItems: 'center',
        position: 'relative',
        textDecoration: 'none',
        boxSizing: 'border-box',
        textAlign: 'left',
        paddingTop: 8,
        paddingBottom: 8,
        transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
        }),
        '&:hover': {
            textDecoration: 'none',
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        },
        [`&.${_listItemButtonClassesDefault.default.selected}`]: {
            backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
            [`&.${_listItemButtonClassesDefault.default.focusVisible}`]: {
                backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
            }
        },
        [`&.${_listItemButtonClassesDefault.default.selected}:hover`]: {
            backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: _system.alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
        },
        [`&.${_listItemButtonClassesDefault.default.focusVisible}`]: {
            backgroundColor: theme.palette.action.focus
        },
        [`&.${_listItemButtonClassesDefault.default.disabled}`]: {
            opacity: theme.palette.action.disabledOpacity
        }
    }, ownerState.divider && {
        borderBottom: `1px solid ${theme.palette.divider}`,
        backgroundClip: 'padding-box'
    }, ownerState.alignItems === 'flex-start' && {
        alignItems: 'flex-start'
    }, !ownerState.disableGutters && {
        paddingLeft: 16,
        paddingRight: 16
    }, ownerState.dense && {
        paddingTop: 4,
        paddingBottom: 4
    })
);
const ListItemButton = /*#__PURE__*/ _react.forwardRef(function ListItemButton(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListItemButton'
    });
    const { alignItems ='center' , autoFocus =false , component ='div' , children , dense =false , disableGutters =false , divider =false , focusVisibleClassName , selected =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const context = _react.useContext(_listContextDefault.default);
    const childContext = {
        dense: dense || context.dense || false,
        alignItems,
        disableGutters
    };
    const listItemRef = _react.useRef(null);
    _useEnhancedEffectDefault.default(()=>{
        if (autoFocus) {
            if (listItemRef.current) listItemRef.current.focus();
            else console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
        }
    }, [
        autoFocus
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        alignItems,
        dense: childContext.dense,
        disableGutters,
        divider,
        selected
    });
    const classes = useUtilityClasses(ownerState);
    const handleRef = _useForkRefDefault.default(listItemRef, ref);
    return /*#__PURE__*/ _jsxRuntime.jsx(_listContextDefault.default.Provider, {
        value: childContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(ListItemButtonRoot, _extendsDefault.default({
            ref: handleRef,
            component: component,
            focusVisibleClassName: _clsxDefault.default(classes.focusVisible, focusVisibleClassName),
            ownerState: ownerState
        }, other, {
            classes: classes,
            children: children
        }))
    });
});
ListItemButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Defines the `align-items` style property.
   * @default 'center'
   */ alignItems: _propTypesDefault.default.oneOf([
        'center',
        'flex-start'
    ]),
    /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */ dense: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the left and right padding is removed.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */ divider: _propTypesDefault.default.bool,
    /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * Use to apply selected styling.
   * @default false
   */ selected: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = ListItemButton;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../ButtonBase":"aeHoF","../utils/useEnhancedEffect":"jIOpS","../utils/useForkRef":"Q1vCZ","../List/ListContext":"lkCoV","./listItemButtonClasses":"fd7QL","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fd7QL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListItemButtonUtilityClass", ()=>getListItemButtonUtilityClass
);
var _base = require("@mui/base");
function getListItemButtonUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListItemButton', slot);
}
const listItemButtonClasses = _base.generateUtilityClasses('MuiListItemButton', [
    'root',
    'focusVisible',
    'dense',
    'alignItemsFlexStart',
    'disabled',
    'divider',
    'gutters',
    'selected'
]);
exports.default = listItemButtonClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iwQQM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listItemSecondaryActionDefault.default
);
parcelHelpers.export(exports, "listItemSecondaryActionClasses", ()=>_listItemSecondaryActionClassesDefault.default
);
var _listItemSecondaryAction = require("./ListItemSecondaryAction");
var _listItemSecondaryActionDefault = parcelHelpers.interopDefault(_listItemSecondaryAction);
var _listItemSecondaryActionClasses = require("./listItemSecondaryActionClasses");
var _listItemSecondaryActionClassesDefault = parcelHelpers.interopDefault(_listItemSecondaryActionClasses);
parcelHelpers.exportAll(_listItemSecondaryActionClasses, exports);

},{"./ListItemSecondaryAction":"dqcbS","./listItemSecondaryActionClasses":"8Vn6w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqcbS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _listContext = require("../List/ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _listItemSecondaryActionClasses = require("./listItemSecondaryActionClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className"
];
const useUtilityClasses = (ownerState)=>{
    const { disableGutters , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            disableGutters && 'disableGutters'
        ]
    };
    return _base.unstable_composeClasses(slots, _listItemSecondaryActionClasses.getListItemSecondaryActionClassesUtilityClass, classes);
};
const ListItemSecondaryActionRoot = _styledDefault.default('div', {
    name: 'MuiListItemSecondaryAction',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.disableGutters && styles.disableGutters
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        position: 'absolute',
        right: 16,
        top: '50%',
        transform: 'translateY(-50%)'
    }, ownerState.disableGutters && {
        right: 0
    })
);
/**
 * Must be used as the last child of ListItem to function properly.
 */ const ListItemSecondaryAction = /*#__PURE__*/ _react.forwardRef(function ListItemSecondaryAction(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListItemSecondaryAction'
    });
    const { className  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const context = _react.useContext(_listContextDefault.default);
    const ownerState = _extendsDefault.default({}, props, {
        disableGutters: context.disableGutters
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(ListItemSecondaryActionRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other));
});
ListItemSecondaryAction.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component, normally an `IconButton` or selection control.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
exports.default = ListItemSecondaryAction;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../List/ListContext":"lkCoV","./listItemSecondaryActionClasses":"8Vn6w","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Vn6w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListItemSecondaryActionClassesUtilityClass", ()=>getListItemSecondaryActionClassesUtilityClass
);
var _base = require("@mui/base");
function getListItemSecondaryActionClassesUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListItemSecondaryAction', slot);
}
const listItemSecondaryActionClasses = _base.generateUtilityClasses('MuiListItemSecondaryAction', [
    'root',
    'disableGutters'
]);
exports.default = listItemSecondaryActionClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2P7xS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listItemIconDefault.default
);
parcelHelpers.export(exports, "listItemIconClasses", ()=>_listItemIconClassesDefault.default
);
var _listItemIcon = require("./ListItemIcon");
var _listItemIconDefault = parcelHelpers.interopDefault(_listItemIcon);
var _listItemIconClasses = require("./listItemIconClasses");
var _listItemIconClassesDefault = parcelHelpers.interopDefault(_listItemIconClasses);
parcelHelpers.exportAll(_listItemIconClasses, exports);

},{"./ListItemIcon":"e1Jfl","./listItemIconClasses":"eZBBm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1Jfl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _listItemIconClasses = require("./listItemIconClasses");
var _listContext = require("../List/ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className"
];
const useUtilityClasses = (ownerState)=>{
    const { alignItems , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            alignItems === 'flex-start' && 'alignItemsFlexStart'
        ]
    };
    return _base.unstable_composeClasses(slots, _listItemIconClasses.getListItemIconUtilityClass, classes);
};
const ListItemIconRoot = _styledDefault.default('div', {
    name: 'MuiListItemIcon',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        minWidth: 56,
        color: theme.palette.action.active,
        flexShrink: 0,
        display: 'inline-flex'
    }, ownerState.alignItems === 'flex-start' && {
        marginTop: 8
    })
);
/**
 * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
 */ const ListItemIcon = /*#__PURE__*/ _react.forwardRef(function ListItemIcon(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListItemIcon'
    });
    const { className  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const context = _react.useContext(_listContextDefault.default);
    const ownerState = _extendsDefault.default({}, props, {
        alignItems: context.alignItems
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(ListItemIconRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other));
});
ListItemIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component, normally `Icon`, `SvgIcon`,
   * or a `@mui/icons-material` SVG icon element.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = ListItemIcon;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./listItemIconClasses":"eZBBm","../List/ListContext":"lkCoV","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZBBm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListItemIconUtilityClass", ()=>getListItemIconUtilityClass
);
var _base = require("@mui/base");
function getListItemIconUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListItemIcon', slot);
}
const listItemIconClasses = _base.generateUtilityClasses('MuiListItemIcon', [
    'root',
    'alignItemsFlexStart'
]);
exports.default = listItemIconClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g3ISx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listItemTextDefault.default
);
parcelHelpers.export(exports, "listItemTextClasses", ()=>_listItemTextClassesDefault.default
);
var _listItemText = require("./ListItemText");
var _listItemTextDefault = parcelHelpers.interopDefault(_listItemText);
var _listItemTextClasses = require("./listItemTextClasses");
var _listItemTextClassesDefault = parcelHelpers.interopDefault(_listItemTextClasses);
parcelHelpers.exportAll(_listItemTextClasses, exports);

},{"./ListItemText":"l5SOJ","./listItemTextClasses":"11iOV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l5SOJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _listContext = require("../List/ListContext");
var _listContextDefault = parcelHelpers.interopDefault(_listContext);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _listItemTextClasses = require("./listItemTextClasses");
var _listItemTextClassesDefault = parcelHelpers.interopDefault(_listItemTextClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "disableTypography",
    "inset",
    "primary",
    "primaryTypographyProps",
    "secondary",
    "secondaryTypographyProps"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , inset , primary , secondary , dense  } = ownerState;
    const slots = {
        root: [
            'root',
            inset && 'inset',
            dense && 'dense',
            primary && secondary && 'multiline'
        ],
        primary: [
            'primary'
        ],
        secondary: [
            'secondary'
        ]
    };
    return _base.unstable_composeClasses(slots, _listItemTextClasses.getListItemTextUtilityClass, classes);
};
const ListItemTextRoot = _styledDefault.default('div', {
    name: 'MuiListItemText',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            {
                [`& .${_listItemTextClassesDefault.default.primary}`]: styles.primary
            },
            {
                [`& .${_listItemTextClassesDefault.default.secondary}`]: styles.secondary
            },
            styles.root,
            ownerState.inset && styles.inset,
            ownerState.primary && ownerState.secondary && styles.multiline,
            ownerState.dense && styles.dense
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        flex: '1 1 auto',
        minWidth: 0,
        marginTop: 4,
        marginBottom: 4
    }, ownerState.primary && ownerState.secondary && {
        marginTop: 6,
        marginBottom: 6
    }, ownerState.inset && {
        paddingLeft: 56
    })
);
const ListItemText = /*#__PURE__*/ _react.forwardRef(function ListItemText(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListItemText'
    });
    const { children , className , disableTypography =false , inset =false , primary: primaryProp , primaryTypographyProps , secondary: secondaryProp , secondaryTypographyProps  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { dense  } = _react.useContext(_listContextDefault.default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extendsDefault.default({}, props, {
        disableTypography,
        inset,
        primary: !!primary,
        secondary: !!secondary,
        dense
    });
    const classes = useUtilityClasses(ownerState);
    if (primary != null && primary.type !== _typographyDefault.default && !disableTypography) primary = /*#__PURE__*/ _jsxRuntime.jsx(_typographyDefault.default, _extendsDefault.default({
        variant: dense ? 'body2' : 'body1',
        className: classes.primary,
        component: "span",
        display: "block"
    }, primaryTypographyProps, {
        children: primary
    }));
    if (secondary != null && secondary.type !== _typographyDefault.default && !disableTypography) secondary = /*#__PURE__*/ _jsxRuntime.jsx(_typographyDefault.default, _extendsDefault.default({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
    }, secondaryTypographyProps, {
        children: secondary
    }));
    return /*#__PURE__*/ _jsxRuntime.jsxs(ListItemTextRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: [
            primary,
            secondary
        ]
    }));
});
ListItemText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Alias for the `primary` prop.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the children won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `children` (or `primary`) text, and optional `secondary` text
   * with the Typography component.
   * @default false
   */ disableTypography: _propTypesDefault.default.bool,
    /**
   * If `true`, the children are indented.
   * This should be used if there is no left avatar or left icon.
   * @default false
   */ inset: _propTypesDefault.default.bool,
    /**
   * The main content element.
   */ primary: _propTypesDefault.default.node,
    /**
   * These props will be forwarded to the primary typography component
   * (as long as disableTypography is not `true`).
   */ primaryTypographyProps: _propTypesDefault.default.object,
    /**
   * The secondary content element.
   */ secondary: _propTypesDefault.default.node,
    /**
   * These props will be forwarded to the secondary typography component
   * (as long as disableTypography is not `true`).
   */ secondaryTypographyProps: _propTypesDefault.default.object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = ListItemText;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../Typography":"faxSz","../List/ListContext":"lkCoV","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./listItemTextClasses":"11iOV","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11iOV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListItemTextUtilityClass", ()=>getListItemTextUtilityClass
);
var _base = require("@mui/base");
function getListItemTextUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListItemText', slot);
}
const listItemTextClasses = _base.generateUtilityClasses('MuiListItemText', [
    'root',
    'multiline',
    'dense',
    'inset',
    'primary',
    'secondary'
]);
exports.default = listItemTextClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEPDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_listSubheaderDefault.default
);
parcelHelpers.export(exports, "listSubheaderClasses", ()=>_listSubheaderClassesDefault.default
);
var _listSubheader = require("./ListSubheader");
var _listSubheaderDefault = parcelHelpers.interopDefault(_listSubheader);
var _listSubheaderClasses = require("./listSubheaderClasses");
var _listSubheaderClassesDefault = parcelHelpers.interopDefault(_listSubheaderClasses);
parcelHelpers.exportAll(_listSubheaderClasses, exports);

},{"./ListSubheader":"jqWut","./listSubheaderClasses":"ajH09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqWut":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _listSubheaderClasses = require("./listSubheaderClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "color",
    "component",
    "disableGutters",
    "disableSticky",
    "inset"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , color , disableGutters , inset , disableSticky  } = ownerState;
    const slots = {
        root: [
            'root',
            color !== 'default' && `color${_capitalizeDefault.default(color)}`,
            !disableGutters && 'gutters',
            inset && 'inset',
            !disableSticky && 'sticky'
        ]
    };
    return _base.unstable_composeClasses(slots, _listSubheaderClasses.getListSubheaderUtilityClass, classes);
};
const ListSubheaderRoot = _styledDefault.default('li', {
    name: 'MuiListSubheader',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.color !== 'default' && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            !ownerState.disableGutters && styles.gutters,
            ownerState.inset && styles.inset,
            !ownerState.disableSticky && styles.sticky
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        boxSizing: 'border-box',
        lineHeight: '48px',
        listStyle: 'none',
        color: theme.palette.text.secondary,
        fontFamily: theme.typography.fontFamily,
        fontWeight: theme.typography.fontWeightMedium,
        fontSize: theme.typography.pxToRem(14)
    }, ownerState.color === 'primary' && {
        color: theme.palette.primary.main
    }, ownerState.color === 'inherit' && {
        color: 'inherit'
    }, !ownerState.disableGutters && {
        paddingLeft: 16,
        paddingRight: 16
    }, ownerState.inset && {
        paddingLeft: 72
    }, !ownerState.disableSticky && {
        position: 'sticky',
        top: 0,
        zIndex: 1,
        backgroundColor: theme.palette.background.paper
    })
);
const ListSubheader = /*#__PURE__*/ _react.forwardRef(function ListSubheader(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiListSubheader'
    });
    const { className , color ='default' , component ='li' , disableGutters =false , disableSticky =false , inset =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        disableGutters,
        disableSticky,
        inset
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(ListSubheaderRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        ownerState: ownerState
    }, other));
});
ListSubheader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'default'
   */ color: _propTypesDefault.default.oneOf([
        'default',
        'inherit',
        'primary'
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the List Subheader will not have gutters.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * If `true`, the List Subheader will not stick to the top during scroll.
   * @default false
   */ disableSticky: _propTypesDefault.default.bool,
    /**
   * If `true`, the List Subheader is indented.
   * @default false
   */ inset: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = ListSubheader;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","./listSubheaderClasses":"ajH09","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajH09":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getListSubheaderUtilityClass", ()=>getListSubheaderUtilityClass
);
var _base = require("@mui/base");
function getListSubheaderUtilityClass(slot) {
    return _base.generateUtilityClass('MuiListSubheader', slot);
}
const listSubheaderClasses = _base.generateUtilityClasses('MuiListSubheader', [
    'root',
    'colorPrimary',
    'colorInherit',
    'gutters',
    'inset',
    'sticky'
]);
exports.default = listSubheaderClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"izv07":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
}), 'Lock');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"hkos6":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"
}), 'LockOpen');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"h6uh8":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$5c82 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$5c82.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _typography = require("@mui/material/Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _divider = require("@mui/material/Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _toggleButton = require("@mui/material/ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _snackbar = require("@mui/material/Snackbar");
var _snackbarDefault = parcelHelpers.interopDefault(_snackbar);
var _alert = require("@mui/material/Alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _grid = require("@mui/material/Grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _lock = require("@mui/icons-material/Lock");
var _lockDefault = parcelHelpers.interopDefault(_lock);
var _lockOpen = require("@mui/icons-material/LockOpen");
var _lockOpenDefault = parcelHelpers.interopDefault(_lockOpen);
var _workerProvider = require("../worker-provider");
var _vaults = require("../store/vaults");
var _types = require("../types");
var _secretList = require("./secret-list");
var _secretListDefault = parcelHelpers.interopDefault(_secretList);
var _unlockVaultForm = require("./unlock-vault-form");
var _unlockVaultFormDefault = parcelHelpers.interopDefault(_unlockVaultForm);
var _newSecretDial = require("./new-secret-dial");
var _newSecretDialDefault = parcelHelpers.interopDefault(_newSecretDial);
var _dialogs = require("../store/dialogs");
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();
function downloadVault(fileName, buffer) {
    const blob = new Blob([
        buffer
    ], {
        type: "application/octet-stream"
    });
    const link = document.createElement("a");
    link.href = window.URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
}
function VaultLocked(props) {
    _s();
    const { worker , storage  } = props;
    const { vault  } = storage;
    const [invalid, setInvalid] = _react.useState(false);
    const dispatch = _reactRedux.useDispatch();
    const onFormSubmit = async (result)=>{
        const { password  } = result;
        try {
            // FIXME: put the metaData in storage
            const metaData = await vault.unlock(password);
            const newStorage = {
                ...storage,
                locked: false
            };
            dispatch(_vaults.updateVault(newStorage));
        } catch (e) {
            setInvalid(true);
        }
    };
    const hideInvalid = ()=>setInvalid(false)
    ;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(VaultHeader, {
                worker: worker,
                storage: storage
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 74,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_gridDefault.default, {
                container: true,
                direction: "column",
                justifyContent: "center",
                alignItems: "center",
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_unlockVaultFormDefault.default, {
                        onFormSubmit: onFormSubmit
                    }, void 0, false, {
                        fileName: "src/authenticated/vault.tsx",
                        lineNumber: 81,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "unlock-vault-form",
                        variant: "contained",
                        children: "Unlock"
                    }, void 0, false, {
                        fileName: "src/authenticated/vault.tsx",
                        lineNumber: 82,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 75,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_snackbarDefault.default, {
                open: invalid,
                autoHideDuration: 6000,
                onClose: hideInvalid,
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_alertDefault.default, {
                    onClose: hideInvalid,
                    severity: "error",
                    children: "Invalid password"
                }, void 0, false, {
                    fileName: "src/authenticated/vault.tsx",
                    lineNumber: 87,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 86,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
_s(VaultLocked, "Igvlz59uad58USpsGNFpuf5wni0=", false, function() {
    return [
        _reactRedux.useDispatch
    ];
});
_c = VaultLocked;
function VaultHeader(props) {
    const { worker , storage  } = props;
    const { label  } = storage;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                variant: "h3",
                gutterBottom: true,
                component: "div",
                children: label
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 100,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(VaultActions, {
                worker: worker,
                storage: storage
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 103,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
_c1 = VaultHeader;
function VaultActions(props) {
    _s1();
    const { storage  } = props;
    const { vault , uuid , locked  } = storage;
    const [vaultLocked, setVaultLocked] = _react.useState(locked);
    const dispatch = _reactRedux.useDispatch();
    const download = async (e)=>{
        e.preventDefault();
        const buffer = await vault.buffer();
        downloadVault(`${uuid}.vault`, buffer);
    };
    const setLockState = async ()=>{
        if (!vaultLocked) {
            await vault.lock();
            setVaultLocked(true);
            const newStorage = {
                ...storage,
                locked: true
            };
            dispatch(_vaults.updateVault(newStorage));
        }
    };
    const ToggleLock = ()=>/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_toggleButtonDefault.default, {
            value: "lock",
            selected: vaultLocked,
            disabled: vaultLocked,
            onChange: setLockState,
            children: vaultLocked ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_lockDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 136,
                columnNumber: 22
            }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_lockOpenDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 136,
                columnNumber: 37
            }, this)
        }, void 0, false, {
            fileName: "src/authenticated/vault.tsx",
            lineNumber: 130,
            columnNumber: 5
        }, this)
    ;
    return locked ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(ToggleLock, {}, void 0, false, {
            fileName: "src/authenticated/vault.tsx",
            lineNumber: 142,
            columnNumber: 7
        }, this)
    }, void 0, false) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                variant: "contained",
                onClick: (e)=>download(e)
                ,
                children: "Download"
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 146,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(ToggleLock, {}, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 149,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 150,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
_s1(VaultActions, "emGVo3Nx7yoLCLlVhdqBij+fpYE=", false, function() {
    return [
        _reactRedux.useDispatch
    ];
});
_c2 = VaultActions;
function VaultUnlocked(props) {
    _s2();
    const { worker , storage  } = props;
    const { vault  } = storage;
    const dispatch = _reactRedux.useDispatch();
    const createNewSecret = (kind)=>{
        console.log("create new secret", kind);
        switch(kind){
            case _types.SecretKind.Account:
                dispatch(_dialogs.setDialogVisible([
                    _dialogs.NEW_ACCOUNT_PASSWORD,
                    true
                ]));
                break;
            case _types.SecretKind.Note:
                dispatch(_dialogs.setDialogVisible([
                    _dialogs.NEW_SECURE_NOTE,
                    true
                ]));
                break;
            case _types.SecretKind.Credentials:
                dispatch(_dialogs.setDialogVisible([
                    _dialogs.NEW_CREDENTIALS,
                    true
                ]));
                break;
            case _types.SecretKind.File:
                dispatch(_dialogs.setDialogVisible([
                    _dialogs.NEW_FILE_UPLOAD,
                    true
                ]));
                break;
        }
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(VaultHeader, {
                worker: worker,
                storage: storage
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 180,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_secretListDefault.default, {
                worker: worker,
                storage: storage
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 181,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_newSecretDialDefault.default, {
                onSelect: createNewSecret
            }, void 0, false, {
                fileName: "src/authenticated/vault.tsx",
                lineNumber: 182,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
_s2(VaultUnlocked, "rgTLoBID190wEKCp9+G8W6F7A5M=", false, function() {
    return [
        _reactRedux.useDispatch
    ];
});
_c3 = VaultUnlocked;
function Vault() {
    _s3();
    const params = _reactRouterDom.useParams();
    const { id  } = params;
    const { vaults  } = _reactRedux.useSelector(_vaults.vaultsSelector);
    const storage = vaults.find((v)=>v.uuid === id
    );
    if (!storage) return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("p", {
        children: "Vault not found"
    }, void 0, false, {
        fileName: "src/authenticated/vault.tsx",
        lineNumber: 195,
        columnNumber: 12
    }, this);
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_workerProvider.WorkerContext.Consumer, {
            children: (worker)=>{
                return storage.locked ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(VaultLocked, {
                    worker: worker,
                    storage: storage
                }, void 0, false, {
                    fileName: "src/authenticated/vault.tsx",
                    lineNumber: 203,
                    columnNumber: 13
                }, this) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(VaultUnlocked, {
                    worker: worker,
                    storage: storage
                }, void 0, false, {
                    fileName: "src/authenticated/vault.tsx",
                    lineNumber: 205,
                    columnNumber: 13
                }, this);
            }
        }, void 0, false, {
            fileName: "src/authenticated/vault.tsx",
            lineNumber: 200,
            columnNumber: 7
        }, this)
    }, void 0, false);
}
exports.default = Vault;
_s3(Vault, "iBWt9K5a3DbnsrMuOcGMrukRA1w=", false, function() {
    return [
        _reactRouterDom.useParams,
        _reactRedux.useSelector
    ];
});
_c4 = Vault;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "VaultLocked");
$RefreshReg$(_c1, "VaultHeader");
$RefreshReg$(_c2, "VaultActions");
$RefreshReg$(_c3, "VaultUnlocked");
$RefreshReg$(_c4, "Vault");

  $parcel$ReactRefreshHelpers$5c82.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","react-router-dom":"fdOAw","@mui/material/Typography":"faxSz","@mui/material/Divider":"lHE5Y","@mui/material/Button":"73csw","@mui/material/ToggleButton":"1n5QG","@mui/material/Snackbar":"25Fj7","@mui/material/Alert":"bJH0A","@mui/material/Grid":"c17UE","@mui/icons-material/Lock":"izv07","@mui/icons-material/LockOpen":"hkos6","../worker-provider":"9jELS","../store/vaults":"3zSpK","../types":"38MWl","./secret-list":"2rk9V","./unlock-vault-form":"9zLdX","./new-secret-dial":"dnTLA","../store/dialogs":"3qJjA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"1n5QG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toggleButtonDefault.default
);
parcelHelpers.export(exports, "toggleButtonClasses", ()=>_toggleButtonClassesDefault.default
);
var _toggleButton = require("./ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _toggleButtonClasses = require("./toggleButtonClasses");
var _toggleButtonClassesDefault = parcelHelpers.interopDefault(_toggleButtonClasses);
parcelHelpers.exportAll(_toggleButtonClasses, exports);

},{"./ToggleButton":"ecesW","./toggleButtonClasses":"2GSeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ecesW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// @inheritedComponent ButtonBase
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styles = require("../styles");
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _toggleButtonClasses = require("./toggleButtonClasses");
var _toggleButtonClassesDefault = parcelHelpers.interopDefault(_toggleButtonClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "disabled",
    "disableFocusRipple",
    "fullWidth",
    "onChange",
    "onClick",
    "selected",
    "size",
    "value"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , fullWidth , selected , disabled , size , color  } = ownerState;
    const slots = {
        root: [
            'root',
            selected && 'selected',
            disabled && 'disabled',
            fullWidth && 'fullWidth',
            `size${_capitalizeDefault.default(size)}`,
            color
        ]
    };
    return _base.unstable_composeClasses(slots, _toggleButtonClasses.getToggleButtonUtilityClass, classes);
};
const ToggleButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    name: 'MuiToggleButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`size${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;
    return _extendsDefault.default({}, theme.typography.button, {
        borderRadius: theme.shape.borderRadius,
        padding: 11,
        border: `1px solid ${theme.palette.divider}`,
        color: theme.palette.action.active
    }, ownerState.fullWidth && {
        width: '100%'
    }, {
        [`&.${_toggleButtonClassesDefault.default.disabled}`]: {
            color: theme.palette.action.disabled,
            border: `1px solid ${theme.palette.action.disabledBackground}`
        },
        '&:hover': {
            textDecoration: 'none',
            // Reset on mouse devices
            backgroundColor: _styles.alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        },
        [`&.${_toggleButtonClassesDefault.default.selected}`]: {
            color: selectedColor,
            backgroundColor: _styles.alpha(selectedColor, theme.palette.action.selectedOpacity),
            '&:hover': {
                backgroundColor: _styles.alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
                // Reset on touch devices, it doesn't add specificity
                '@media (hover: none)': {
                    backgroundColor: _styles.alpha(selectedColor, theme.palette.action.selectedOpacity)
                }
            }
        }
    }, ownerState.size === 'small' && {
        padding: 7,
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && {
        padding: 15,
        fontSize: theme.typography.pxToRem(15)
    });
});
const ToggleButton = /*#__PURE__*/ _react.forwardRef(function ToggleButton(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiToggleButton'
    });
    const { children , className , color ='standard' , disabled =false , disableFocusRipple =false , fullWidth =false , onChange , onClick , selected , size ='medium' , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        disabled,
        disableFocusRipple,
        fullWidth,
        size
    });
    const classes = useUtilityClasses(ownerState);
    const handleChange = (event)=>{
        if (onClick) {
            onClick(event, value);
            if (event.defaultPrevented) return;
        }
        if (onChange) onChange(event, value);
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(ToggleButtonRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        ref: ref,
        onClick: handleChange,
        onChange: onChange,
        value: value,
        ownerState: ownerState,
        "aria-pressed": selected
    }, other, {
        children: children
    }));
});
ToggleButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the button when it is in an active state.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'standard'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'standard',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * Callback fired when the state changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback fired when the button is clicked.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */ onClick: _propTypesDefault.default.func,
    /**
   * If `true`, the button is rendered in an active state.
   */ selected: _propTypesDefault.default.bool,
    /**
   * The size of the component.
   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */ value: _propTypesDefault.default.any.isRequired
};
exports.default = ToggleButton;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles":"1lzai","../ButtonBase":"aeHoF","../utils/capitalize":"lwNtZ","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./toggleButtonClasses":"2GSeZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GSeZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getToggleButtonUtilityClass", ()=>getToggleButtonUtilityClass
);
var _base = require("@mui/base");
function getToggleButtonUtilityClass(slot) {
    return _base.generateUtilityClass('MuiToggleButton', slot);
}
const toggleButtonClasses = _base.generateUtilityClasses('MuiToggleButton', [
    'root',
    'disabled',
    'selected',
    'standard',
    'primary',
    'secondary',
    'sizeSmall',
    'sizeMedium',
    'sizeLarge'
]);
exports.default = toggleButtonClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25Fj7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_snackbarDefault.default
);
parcelHelpers.export(exports, "snackbarClasses", ()=>_snackbarClassesDefault.default
);
var _snackbar = require("./Snackbar");
var _snackbarDefault = parcelHelpers.interopDefault(_snackbar);
var _snackbarClasses = require("./snackbarClasses");
var _snackbarClassesDefault = parcelHelpers.interopDefault(_snackbarClasses);
parcelHelpers.exportAll(_snackbarClasses, exports);

},{"./Snackbar":"6cpAR","./snackbarClasses":"i87x2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cpAR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _clickAwayListener = require("@mui/base/ClickAwayListener");
var _clickAwayListenerDefault = parcelHelpers.interopDefault(_clickAwayListener);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useEventCallback = require("../utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _grow = require("../Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);
var _snackbarContent = require("../SnackbarContent");
var _snackbarContentDefault = parcelHelpers.interopDefault(_snackbarContent);
var _snackbarClasses = require("./snackbarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onEnter",
    "onExited"
], _excluded2 = [
    "action",
    "anchorOrigin",
    "autoHideDuration",
    "children",
    "className",
    "ClickAwayListenerProps",
    "ContentProps",
    "disableWindowBlurListener",
    "message",
    "onBlur",
    "onClose",
    "onFocus",
    "onMouseEnter",
    "onMouseLeave",
    "open",
    "resumeHideDuration",
    "TransitionComponent",
    "transitionDuration",
    "TransitionProps"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , anchorOrigin  } = ownerState;
    const slots = {
        root: [
            'root',
            `anchorOrigin${_capitalizeDefault.default(anchorOrigin.vertical)}${_capitalizeDefault.default(anchorOrigin.horizontal)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _snackbarClasses.getSnackbarUtilityClass, classes);
};
const SnackbarRoot = _styledDefault.default('div', {
    name: 'MuiSnackbar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`anchorOrigin${_capitalizeDefault.default(ownerState.anchorOrigin.vertical)}${_capitalizeDefault.default(ownerState.anchorOrigin.horizontal)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const center = _extendsDefault.default({}, !ownerState.isRtl && {
        left: '50%',
        right: 'auto',
        transform: 'translateX(-50%)'
    }, ownerState.isRtl && {
        right: '50%',
        left: 'auto',
        transform: 'translateX(50%)'
    });
    return _extendsDefault.default({
        zIndex: theme.zIndex.snackbar,
        position: 'fixed',
        display: 'flex',
        left: 8,
        right: 8,
        justifyContent: 'center',
        alignItems: 'center'
    }, ownerState.anchorOrigin.vertical === 'top' ? {
        top: 8
    } : {
        bottom: 8
    }, ownerState.anchorOrigin.horizontal === 'left' && {
        justifyContent: 'flex-start'
    }, ownerState.anchorOrigin.horizontal === 'right' && {
        justifyContent: 'flex-end'
    }, {
        [theme.breakpoints.up('sm')]: _extendsDefault.default({}, ownerState.anchorOrigin.vertical === 'top' ? {
            top: 24
        } : {
            bottom: 24
        }, ownerState.anchorOrigin.horizontal === 'center' && center, ownerState.anchorOrigin.horizontal === 'left' && _extendsDefault.default({}, !ownerState.isRtl && {
            left: 24,
            right: 'auto'
        }, ownerState.isRtl && {
            right: 24,
            left: 'auto'
        }), ownerState.anchorOrigin.horizontal === 'right' && _extendsDefault.default({}, !ownerState.isRtl && {
            right: 24,
            left: 'auto'
        }, ownerState.isRtl && {
            left: 24,
            right: 'auto'
        }))
    });
});
const Snackbar = /*#__PURE__*/ _react.forwardRef(function Snackbar(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSnackbar'
    });
    const theme = _useThemeDefault.default();
    const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { action , anchorOrigin: { vertical , horizontal  } = {
        vertical: 'bottom',
        horizontal: 'left'
    } , autoHideDuration =null , children , className , ClickAwayListenerProps , ContentProps , disableWindowBlurListener =false , message , onBlur , onClose , onFocus , onMouseEnter , onMouseLeave , open , resumeHideDuration , TransitionComponent =_growDefault.default , transitionDuration =defaultTransitionDuration , TransitionProps: { onEnter , onExited  } = {}  } = props, TransitionProps = _objectWithoutPropertiesLooseDefault.default(props.TransitionProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const isRtl = theme.direction === 'rtl';
    const ownerState = _extendsDefault.default({}, props, {
        anchorOrigin: {
            vertical,
            horizontal
        },
        isRtl
    });
    const classes = useUtilityClasses(ownerState);
    const timerAutoHide = _react.useRef();
    const [exited, setExited] = _react.useState(true);
    const handleClose = _useEventCallbackDefault.default((...args)=>{
        if (onClose) onClose(...args);
    });
    const setAutoHideTimer = _useEventCallbackDefault.default((autoHideDurationParam)=>{
        if (!onClose || autoHideDurationParam == null) return;
        clearTimeout(timerAutoHide.current);
        timerAutoHide.current = setTimeout(()=>{
            handleClose(null, 'timeout');
        }, autoHideDurationParam);
    });
    _react.useEffect(()=>{
        if (open) setAutoHideTimer(autoHideDuration);
        return ()=>{
            clearTimeout(timerAutoHide.current);
        };
    }, [
        open,
        autoHideDuration,
        setAutoHideTimer
    ]); // Pause the timer when the user is interacting with the Snackbar
    // or when the user hide the window.
    const handlePause = ()=>{
        clearTimeout(timerAutoHide.current);
    }; // Restart the timer when the user is no longer interacting with the Snackbar
    // or when the window is shown back.
    const handleResume = _react.useCallback(()=>{
        if (autoHideDuration != null) setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }, [
        autoHideDuration,
        resumeHideDuration,
        setAutoHideTimer
    ]);
    const handleFocus = (event)=>{
        if (onFocus) onFocus(event);
        handlePause();
    };
    const handleMouseEnter = (event)=>{
        if (onMouseEnter) onMouseEnter(event);
        handlePause();
    };
    const handleBlur = (event)=>{
        if (onBlur) onBlur(event);
        handleResume();
    };
    const handleMouseLeave = (event)=>{
        if (onMouseLeave) onMouseLeave(event);
        handleResume();
    };
    const handleClickAway = (event)=>{
        if (onClose) onClose(event, 'clickaway');
    };
    const handleExited = (node)=>{
        setExited(true);
        if (onExited) onExited(node);
    };
    const handleEnter = (node, isAppearing)=>{
        setExited(false);
        if (onEnter) onEnter(node, isAppearing);
    };
    _react.useEffect(()=>{
        // TODO: window global should be refactored here
        if (!disableWindowBlurListener && open) {
            window.addEventListener('focus', handleResume);
            window.addEventListener('blur', handlePause);
            return ()=>{
                window.removeEventListener('focus', handleResume);
                window.removeEventListener('blur', handlePause);
            };
        }
        return undefined;
    }, [
        disableWindowBlurListener,
        handleResume,
        open
    ]);
    _react.useEffect(()=>{
        if (!open) return undefined;
        /**
     * @param {KeyboardEvent} nativeEvent
     */ function handleKeyDown(nativeEvent) {
            if (!nativeEvent.defaultPrevented) {
                // IE11, Edge (prior to using Bink?) use 'Esc'
                if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar
                {
                    if (onClose) onClose(nativeEvent, 'escapeKeyDown');
                }
            }
        }
        document.addEventListener('keydown', handleKeyDown);
        return ()=>{
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [
        exited,
        open,
        onClose
    ]); // So we only render active snackbars.
    if (!open && exited) return null;
    return /*#__PURE__*/ _jsxRuntime.jsx(_clickAwayListenerDefault.default, _extendsDefault.default({
        onClickAway: handleClickAway
    }, ClickAwayListenerProps, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(SnackbarRoot, _extendsDefault.default({
            className: _clsxDefault.default(classes.root, className),
            onBlur: handleBlur,
            onFocus: handleFocus,
            onMouseEnter: handleMouseEnter,
            onMouseLeave: handleMouseLeave,
            ownerState: ownerState,
            ref: ref // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
            ,
            role: "presentation"
        }, other, {
            children: /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
                appear: true,
                in: open,
                timeout: transitionDuration,
                direction: vertical === 'top' ? 'down' : 'up',
                onEnter: handleEnter,
                onExited: handleExited
            }, TransitionProps, {
                children: children || /*#__PURE__*/ _jsxRuntime.jsx(_snackbarContentDefault.default, _extendsDefault.default({
                    message: message,
                    action: action
                }, ContentProps))
            }))
        }))
    }));
});
Snackbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */ action: _propTypesDefault.default.node,
    /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'left' }
   */ anchorOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOf([
            'center',
            'left',
            'right'
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOf([
            'bottom',
            'top'
        ]).isRequired
    }),
    /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */ autoHideDuration: _propTypesDefault.default.number,
    /**
   * Replace the `SnackbarContent` component.
   */ children: _propTypesDefault.default.element,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Props applied to the `ClickAwayListener` element.
   */ ClickAwayListenerProps: _propTypesDefault.default.object,
    /**
   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.
   */ ContentProps: _propTypesDefault.default.object,
    /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */ disableWindowBlurListener: _propTypesDefault.default.bool,
    /**
   * When displaying multiple consecutive Snackbars from a parent rendering a single
   * <Snackbar/>, add the key prop to ensure independent treatment of each message.
   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
   * features such as autoHideDuration may be canceled.
   */ key: ()=>null
    ,
    /**
   * The message to display.
   */ message: _propTypesDefault.default.node,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseLeave: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */ resumeHideDuration: _propTypesDefault.default.number,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = Snackbar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/base/ClickAwayListener":"lOwtq","../styles/styled":"32xTg","../styles/useTheme":"5nWMX","../styles/useThemeProps":"dewuS","../utils/useEventCallback":"bucP2","../utils/capitalize":"lwNtZ","../Grow":"9py3h","../SnackbarContent":"5HymQ","./snackbarClasses":"i87x2","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9py3h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_growDefault.default
);
var _grow = require("./Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);

},{"./Grow":"OqFsV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"OqFsV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _reactTransitionGroup = require("react-transition-group");
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _utils1 = require("../transitions/utils");
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "addEndListener",
    "appear",
    "children",
    "easing",
    "in",
    "onEnter",
    "onEntered",
    "onEntering",
    "onExit",
    "onExited",
    "onExiting",
    "style",
    "timeout",
    "TransitionComponent"
];
function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
}
const styles = {
    entering: {
        opacity: 1,
        transform: getScale(1)
    },
    entered: {
        opacity: 1,
        transform: 'none'
    }
};
/**
 * Conditionally apply a workaround for the CSS transition bug in Safari 15.4.
 * Remove this workaround once the Safari bug is fixed.
 */ const isSafari154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && /version\/15\.[4-9]/i.test(navigator.userAgent);
/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */ const Grow = /*#__PURE__*/ _react.forwardRef(function Grow(props, ref) {
    const { addEndListener , appear =true , children , easing , in: inProp , onEnter , onEntered , onEntering , onExit , onExited , onExiting , style , timeout ='auto' , // eslint-disable-next-line react/prop-types
    TransitionComponent =_reactTransitionGroup.Transition  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const timer = _react.useRef();
    const autoTimeout = _react.useRef();
    const theme = _useThemeDefault.default();
    const nodeRef = _react.useRef(null);
    const foreignRef = _useForkRefDefault.default(children.ref, ref);
    const handleRef = _useForkRefDefault.default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback)=>(maybeIsAppearing)=>{
            if (callback) {
                const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
                if (maybeIsAppearing === undefined) callback(node);
                else callback(node, maybeIsAppearing);
            }
        }
    ;
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing)=>{
        _utils1.reflow(node); // So the animation always start from the start.
        const { duration: transitionDuration , delay , easing: transitionTimingFunction  } = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'enter'
        });
        let duration;
        if (timeout === 'auto') {
            duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration;
        } else duration = transitionDuration;
        node.style.transition = [
            theme.transitions.create('opacity', {
                duration,
                delay
            }),
            theme.transitions.create('transform', {
                duration: isSafari154 ? duration : duration * 0.666,
                delay,
                easing: transitionTimingFunction
            })
        ].join(',');
        if (onEnter) onEnter(node, isAppearing);
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node)=>{
        const { duration: transitionDuration , delay , easing: transitionTimingFunction  } = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'exit'
        });
        let duration;
        if (timeout === 'auto') {
            duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration;
        } else duration = transitionDuration;
        node.style.transition = [
            theme.transitions.create('opacity', {
                duration,
                delay
            }),
            theme.transitions.create('transform', {
                duration: isSafari154 ? duration : duration * 0.666,
                delay: isSafari154 ? delay : delay || duration * 0.333,
                easing: transitionTimingFunction
            })
        ].join(',');
        node.style.opacity = 0;
        node.style.transform = getScale(0.75);
        if (onExit) onExit(node);
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next)=>{
        if (timeout === 'auto') timer.current = setTimeout(next, autoTimeout.current || 0);
        if (addEndListener) // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
    };
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(timer.current);
        };
    }, []);
    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === 'auto' ? null : timeout
    }, other, {
        children: (state, childProps)=>{
            return /*#__PURE__*/ _react.cloneElement(children, _extendsDefault.default({
                style: _extendsDefault.default({
                    opacity: 0,
                    transform: getScale(0.75),
                    visibility: state === 'exited' && !inProp ? 'hidden' : undefined
                }, styles[state], style, children.props.style),
                ref: handleRef
            }, childProps));
        }
    }));
});
Grow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */ appear: _propTypesDefault.default.bool,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */ easing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.shape({
            enter: _propTypesDefault.default.string,
            exit: _propTypesDefault.default.string
        }),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component will transition in.
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntered: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntering: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExit: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExited: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExiting: _propTypesDefault.default.func,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */ timeout: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
Grow.muiSupportAuto = true;
exports.default = Grow;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","react-transition-group":"fZSkB","../styles/useTheme":"5nWMX","../transitions/utils":"bSIvX","../utils/useForkRef":"Q1vCZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HymQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_snackbarContentDefault.default
);
parcelHelpers.export(exports, "snackbarContentClasses", ()=>_snackbarContentClassesDefault.default
);
var _snackbarContent = require("./SnackbarContent");
var _snackbarContentDefault = parcelHelpers.interopDefault(_snackbarContent);
var _snackbarContentClasses = require("./snackbarContentClasses");
var _snackbarContentClassesDefault = parcelHelpers.interopDefault(_snackbarContentClasses);
parcelHelpers.exportAll(_snackbarContentClasses, exports);

},{"./SnackbarContent":"cULIz","./snackbarContentClasses":"5uz3u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cULIz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _snackbarContentClasses = require("./snackbarContentClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "action",
    "className",
    "message",
    "role"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        action: [
            'action'
        ],
        message: [
            'message'
        ]
    };
    return _base.unstable_composeClasses(slots, _snackbarContentClasses.getSnackbarContentUtilityClass, classes);
};
const SnackbarContentRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiSnackbarContent',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})(({ theme  })=>{
    const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;
    const backgroundColor = _system.emphasize(theme.palette.background.default, emphasis);
    return _extendsDefault.default({}, theme.typography.body2, {
        color: theme.palette.getContrastText(backgroundColor),
        backgroundColor,
        display: 'flex',
        alignItems: 'center',
        flexWrap: 'wrap',
        padding: '6px 16px',
        borderRadius: theme.shape.borderRadius,
        flexGrow: 1,
        [theme.breakpoints.up('sm')]: {
            flexGrow: 'initial',
            minWidth: 288
        }
    });
});
const SnackbarContentMessage = _styledDefault.default('div', {
    name: 'MuiSnackbarContent',
    slot: 'Message',
    overridesResolver: (props, styles)=>styles.message
})({
    padding: '8px 0'
});
const SnackbarContentAction = _styledDefault.default('div', {
    name: 'MuiSnackbarContent',
    slot: 'Action',
    overridesResolver: (props, styles)=>styles.action
})({
    display: 'flex',
    alignItems: 'center',
    marginLeft: 'auto',
    paddingLeft: 16,
    marginRight: -8
});
const SnackbarContent = /*#__PURE__*/ _react.forwardRef(function SnackbarContent(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSnackbarContent'
    });
    const { action , className , message , role ='alert'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = props;
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(SnackbarContentRoot, _extendsDefault.default({
        role: role,
        square: true,
        elevation: 6,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(SnackbarContentMessage, {
                className: classes.message,
                ownerState: ownerState,
                children: message
            }),
            action ? /*#__PURE__*/ _jsxRuntime.jsx(SnackbarContentAction, {
                className: classes.action,
                ownerState: ownerState,
                children: action
            }) : null
        ]
    }));
});
SnackbarContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */ action: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The message to display.
   */ message: _propTypesDefault.default.node,
    /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */ role: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = SnackbarContent;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Paper":"6IiTP","./snackbarContentClasses":"5uz3u","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5uz3u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSnackbarContentUtilityClass", ()=>getSnackbarContentUtilityClass
);
var _base = require("@mui/base");
function getSnackbarContentUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSnackbarContent', slot);
}
const snackbarContentClasses = _base.generateUtilityClasses('MuiSnackbarContent', [
    'root',
    'message',
    'action'
]);
exports.default = snackbarContentClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i87x2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSnackbarUtilityClass", ()=>getSnackbarUtilityClass
);
var _base = require("@mui/base");
function getSnackbarUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSnackbar', slot);
}
const snackbarClasses = _base.generateUtilityClasses('MuiSnackbar', [
    'root',
    'anchorOriginTopCenter',
    'anchorOriginBottomCenter',
    'anchorOriginTopRight',
    'anchorOriginBottomRight',
    'anchorOriginTopLeft',
    'anchorOriginBottomLeft'
]);
exports.default = snackbarClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJH0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_alertDefault.default
);
parcelHelpers.export(exports, "alertClasses", ()=>_alertClassesDefault.default
);
var _alert = require("./Alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _alertClasses = require("./alertClasses");
var _alertClassesDefault = parcelHelpers.interopDefault(_alertClasses);
parcelHelpers.exportAll(_alertClasses, exports);

},{"./Alert":"drgv7","./alertClasses":"4g1D4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drgv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _alertClasses = require("./alertClasses");
var _alertClassesDefault = parcelHelpers.interopDefault(_alertClasses);
var _iconButton = require("../IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _successOutlined = require("../internal/svg-icons/SuccessOutlined");
var _successOutlinedDefault = parcelHelpers.interopDefault(_successOutlined);
var _reportProblemOutlined = require("../internal/svg-icons/ReportProblemOutlined");
var _reportProblemOutlinedDefault = parcelHelpers.interopDefault(_reportProblemOutlined);
var _errorOutline = require("../internal/svg-icons/ErrorOutline");
var _errorOutlineDefault = parcelHelpers.interopDefault(_errorOutline);
var _infoOutlined = require("../internal/svg-icons/InfoOutlined");
var _infoOutlinedDefault = parcelHelpers.interopDefault(_infoOutlined);
var _close = require("../internal/svg-icons/Close");
var _closeDefault = parcelHelpers.interopDefault(_close);
var _jsxRuntime = require("react/jsx-runtime");
var _CloseIcon;
const _excluded = [
    "action",
    "children",
    "className",
    "closeText",
    "color",
    "icon",
    "iconMapping",
    "onClose",
    "role",
    "severity",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { variant , color , severity , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            `${variant}${_capitalizeDefault.default(color || severity)}`,
            `${variant}`
        ],
        icon: [
            'icon'
        ],
        message: [
            'message'
        ],
        action: [
            'action'
        ]
    };
    return _base.unstable_composeClasses(slots, _alertClasses.getAlertUtilityClass, classes);
};
const AlertRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiAlert',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`${ownerState.variant}${_capitalizeDefault.default(ownerState.color || ownerState.severity)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const getColor = theme.palette.mode === 'light' ? _system.darken : _system.lighten;
    const getBackgroundColor = theme.palette.mode === 'light' ? _system.lighten : _system.darken;
    const color = ownerState.color || ownerState.severity;
    return _extendsDefault.default({}, theme.typography.body2, {
        backgroundColor: 'transparent',
        display: 'flex',
        padding: '6px 16px'
    }, color && ownerState.variant === 'standard' && {
        color: getColor(theme.palette[color].light, 0.6),
        backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),
        [`& .${_alertClassesDefault.default.icon}`]: {
            color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
        }
    }, color && ownerState.variant === 'outlined' && {
        color: getColor(theme.palette[color].light, 0.6),
        border: `1px solid ${theme.palette[color].light}`,
        [`& .${_alertClassesDefault.default.icon}`]: {
            color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
        }
    }, color && ownerState.variant === 'filled' && {
        color: '#fff',
        fontWeight: theme.typography.fontWeightMedium,
        backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main
    });
});
const AlertIcon = _styledDefault.default('div', {
    name: 'MuiAlert',
    slot: 'Icon',
    overridesResolver: (props, styles)=>styles.icon
})({
    marginRight: 12,
    padding: '7px 0',
    display: 'flex',
    fontSize: 22,
    opacity: 0.9
});
const AlertMessage = _styledDefault.default('div', {
    name: 'MuiAlert',
    slot: 'Message',
    overridesResolver: (props, styles)=>styles.message
})({
    padding: '8px 0'
});
const AlertAction = _styledDefault.default('div', {
    name: 'MuiAlert',
    slot: 'Action',
    overridesResolver: (props, styles)=>styles.action
})({
    display: 'flex',
    alignItems: 'flex-start',
    padding: '4px 0 0 16px',
    marginLeft: 'auto',
    marginRight: -8
});
const defaultIconMapping = {
    success: /*#__PURE__*/ _jsxRuntime.jsx(_successOutlinedDefault.default, {
        fontSize: "inherit"
    }),
    warning: /*#__PURE__*/ _jsxRuntime.jsx(_reportProblemOutlinedDefault.default, {
        fontSize: "inherit"
    }),
    error: /*#__PURE__*/ _jsxRuntime.jsx(_errorOutlineDefault.default, {
        fontSize: "inherit"
    }),
    info: /*#__PURE__*/ _jsxRuntime.jsx(_infoOutlinedDefault.default, {
        fontSize: "inherit"
    })
};
const Alert = /*#__PURE__*/ _react.forwardRef(function Alert(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiAlert'
    });
    const { action , children , className , closeText ='Close' , color , icon , iconMapping =defaultIconMapping , onClose , role ='alert' , severity ='success' , variant ='standard'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        severity,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(AlertRoot, _extendsDefault.default({
        role: role,
        elevation: 0,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other, {
        children: [
            icon !== false ? /*#__PURE__*/ _jsxRuntime.jsx(AlertIcon, {
                ownerState: ownerState,
                className: classes.icon,
                children: icon || iconMapping[severity] || defaultIconMapping[severity]
            }) : null,
            /*#__PURE__*/ _jsxRuntime.jsx(AlertMessage, {
                ownerState: ownerState,
                className: classes.message,
                children: children
            }),
            action != null ? /*#__PURE__*/ _jsxRuntime.jsx(AlertAction, {
                className: classes.action,
                children: action
            }) : null,
            action == null && onClose ? /*#__PURE__*/ _jsxRuntime.jsx(AlertAction, {
                ownerState: ownerState,
                className: classes.action,
                children: /*#__PURE__*/ _jsxRuntime.jsx(_iconButtonDefault.default, {
                    size: "small",
                    "aria-label": closeText,
                    title: closeText,
                    color: "inherit",
                    onClick: onClose,
                    children: _CloseIcon || (_CloseIcon = /*#__PURE__*/ _jsxRuntime.jsx(_closeDefault.default, {
                        fontSize: "small"
                    }))
                })
            }) : null
        ]
    }));
});
Alert.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the alert.
   */ action: _propTypesDefault.default.node,
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   * @default 'Close'
   */ closeText: _propTypesDefault.default.string,
    /**
   * The color of the component. Unless provided, the value is taken from the `severity` prop.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   * Set to `false` to remove the `icon`.
   */ icon: _propTypesDefault.default.node,
    /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */ iconMapping: _propTypesDefault.default.shape({
        error: _propTypesDefault.default.node,
        info: _propTypesDefault.default.node,
        success: _propTypesDefault.default.node,
        warning: _propTypesDefault.default.node
    }),
    /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   * @param {React.SyntheticEvent} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */ role: _propTypesDefault.default.string,
    /**
   * The severity of the alert. This defines the color and icon used.
   * @default 'success'
   */ severity: _propTypesDefault.default.oneOf([
        'error',
        'info',
        'success',
        'warning'
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'standard'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'filled',
            'outlined',
            'standard'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Alert;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","../Paper":"6IiTP","./alertClasses":"4g1D4","../IconButton":"38BrD","../internal/svg-icons/SuccessOutlined":"6SDrv","../internal/svg-icons/ReportProblemOutlined":"fMsc8","../internal/svg-icons/ErrorOutline":"8SX77","../internal/svg-icons/InfoOutlined":"6YC70","../internal/svg-icons/Close":"gEje4","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4g1D4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAlertUtilityClass", ()=>getAlertUtilityClass
);
var _base = require("@mui/base");
function getAlertUtilityClass(slot) {
    return _base.generateUtilityClass('MuiAlert', slot);
}
const alertClasses = _base.generateUtilityClasses('MuiAlert', [
    'root',
    'action',
    'icon',
    'message',
    'filled',
    'filledSuccess',
    'filledInfo',
    'filledWarning',
    'filledError',
    'outlined',
    'outlinedSuccess',
    'outlinedInfo',
    'outlinedWarning',
    'outlinedError',
    'standard',
    'standardSuccess',
    'standardInfo',
    'standardWarning',
    'standardError'
]);
exports.default = alertClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SDrv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), 'SuccessOutlined');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fMsc8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), 'ReportProblemOutlined');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8SX77":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), 'ErrorOutline');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6YC70":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), 'InfoOutlined');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gEje4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 *
 * Alias to `Clear`.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), 'Close');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c17UE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_gridDefault.default
);
parcelHelpers.export(exports, "gridClasses", ()=>_gridClassesDefault.default
);
var _grid = require("./Grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _gridClasses = require("./gridClasses");
var _gridClassesDefault = parcelHelpers.interopDefault(_gridClasses);
parcelHelpers.exportAll(_gridClasses, exports);

},{"./Grid":"60L6y","./gridClasses":"iRwNS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60L6y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateGrid", ()=>generateGrid
);
parcelHelpers.export(exports, "generateDirection", ()=>generateDirection
);
parcelHelpers.export(exports, "generateRowGap", ()=>generateRowGap
);
parcelHelpers.export(exports, "generateColumnGap", ()=>generateColumnGap
);
parcelHelpers.export(exports, "resolveSpacingClasses", ()=>resolveSpacingClasses
) // Default CSS values
;
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// A grid component using the following libs as inspiration.
//
// For the implementation:
// - https://getbootstrap.com/docs/4.3/layout/grid/
// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css
// - https://github.com/roylee0704/react-flexbox-grid
// - https://material.angularjs.org/latest/layout/introduction
//
// Follow this flexbox Guide to better understand the underlying model:
// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _system = require("@mui/system");
var _base = require("@mui/base");
var _requirePropFactory = require("../utils/requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _gridContext = require("./GridContext");
var _gridContextDefault = parcelHelpers.interopDefault(_gridContext);
var _gridClasses = require("./gridClasses");
var _gridClassesDefault = parcelHelpers.interopDefault(_gridClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "columns",
    "columnSpacing",
    "component",
    "container",
    "direction",
    "item",
    "lg",
    "md",
    "rowSpacing",
    "sm",
    "spacing",
    "wrap",
    "xl",
    "xs",
    "zeroMinWidth"
];
function getOffset(val) {
    const parse = parseFloat(val);
    return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
}
function generateGrid({ theme , ownerState  }) {
    let size;
    return theme.breakpoints.keys.reduce((globalStyles, breakpoint)=>{
        // Use side effect over immutability for better performance.
        let styles = {};
        if (ownerState[breakpoint]) size = ownerState[breakpoint];
        if (!size) return globalStyles;
        if (size === true) // For the auto layouting
        styles = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: '100%'
        };
        else if (size === 'auto') styles = {
            flexBasis: 'auto',
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: 'none',
            width: 'auto'
        };
        else {
            const columnsBreakpointValues = _system.unstable_resolveBreakpointValues({
                values: ownerState.columns,
                breakpoints: theme.breakpoints.values
            });
            const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
            if (columnValue === undefined || columnValue === null) return globalStyles;
             // Keep 7 significant numbers.
            const width = `${Math.round(size / columnValue * 100000000) / 1000000}%`;
            let more = {};
            if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
                const themeSpacing = theme.spacing(ownerState.columnSpacing);
                if (themeSpacing !== '0px') {
                    const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
                    more = {
                        flexBasis: fullWidth,
                        maxWidth: fullWidth
                    };
                }
            } // Close to the bootstrap implementation:
            // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
            styles = _extendsDefault.default({
                flexBasis: width,
                flexGrow: 0,
                maxWidth: width
            }, more);
        } // No need for a media query for the first size.
        if (theme.breakpoints.values[breakpoint] === 0) Object.assign(globalStyles, styles);
        else globalStyles[theme.breakpoints.up(breakpoint)] = styles;
        return globalStyles;
    }, {});
}
function generateDirection({ theme , ownerState  }) {
    const directionValues = _system.unstable_resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme.breakpoints.values
    });
    return _system.handleBreakpoints({
        theme
    }, directionValues, (propValue)=>{
        const output = {
            flexDirection: propValue
        };
        if (propValue.indexOf('column') === 0) output[`& > .${_gridClassesDefault.default.item}`] = {
            maxWidth: 'none'
        };
        return output;
    });
}
function generateRowGap({ theme , ownerState  }) {
    const { container , rowSpacing  } = ownerState;
    let styles = {};
    if (container && rowSpacing !== 0) {
        const rowSpacingValues = _system.unstable_resolveBreakpointValues({
            values: rowSpacing,
            breakpoints: theme.breakpoints.values
        });
        styles = _system.handleBreakpoints({
            theme
        }, rowSpacingValues, (propValue)=>{
            const themeSpacing = theme.spacing(propValue);
            if (themeSpacing !== '0px') return {
                marginTop: `-${getOffset(themeSpacing)}`,
                [`& > .${_gridClassesDefault.default.item}`]: {
                    paddingTop: getOffset(themeSpacing)
                }
            };
            return {};
        });
    }
    return styles;
}
function generateColumnGap({ theme , ownerState  }) {
    const { container , columnSpacing  } = ownerState;
    let styles = {};
    if (container && columnSpacing !== 0) {
        const columnSpacingValues = _system.unstable_resolveBreakpointValues({
            values: columnSpacing,
            breakpoints: theme.breakpoints.values
        });
        styles = _system.handleBreakpoints({
            theme
        }, columnSpacingValues, (propValue)=>{
            const themeSpacing = theme.spacing(propValue);
            if (themeSpacing !== '0px') return {
                width: `calc(100% + ${getOffset(themeSpacing)})`,
                marginLeft: `-${getOffset(themeSpacing)}`,
                [`& > .${_gridClassesDefault.default.item}`]: {
                    paddingLeft: getOffset(themeSpacing)
                }
            };
            return {};
        });
    }
    return styles;
}
function resolveSpacingClasses(spacing, container, styles = {}) {
    // in case of grid item or undefined/null or `spacing` <= 0
    if (!container || !spacing || spacing <= 0) return [];
     // in case of string/number `spacing`
    if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') return [
        styles[`spacing-xs-${String(spacing)}`] || `spacing-xs-${String(spacing)}`
    ];
     // in case of object `spacing`
    const { xs , sm , md , lg , xl  } = spacing;
    return [
        Number(xs) > 0 && (styles[`spacing-xs-${String(xs)}`] || `spacing-xs-${String(xs)}`),
        Number(sm) > 0 && (styles[`spacing-sm-${String(sm)}`] || `spacing-sm-${String(sm)}`),
        Number(md) > 0 && (styles[`spacing-md-${String(md)}`] || `spacing-md-${String(md)}`),
        Number(lg) > 0 && (styles[`spacing-lg-${String(lg)}`] || `spacing-lg-${String(lg)}`),
        Number(xl) > 0 && (styles[`spacing-xl-${String(xl)}`] || `spacing-xl-${String(xl)}`)
    ];
}
// flex: '0 1 auto',
// flexDirection: 'row',
// alignItems: 'flex-start',
// flexWrap: 'nowrap',
// justifyContent: 'flex-start',
const GridRoot = _styledDefault.default('div', {
    name: 'MuiGrid',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { container , direction , item , lg , md , sm , spacing , wrap , xl , xs , zeroMinWidth  } = props.ownerState;
        return [
            styles.root,
            container && styles.container,
            item && styles.item,
            zeroMinWidth && styles.zeroMinWidth,
            ...resolveSpacingClasses(spacing, container, styles),
            direction !== 'row' && styles[`direction-xs-${String(direction)}`],
            wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`],
            xs !== false && styles[`grid-xs-${String(xs)}`],
            sm !== false && styles[`grid-sm-${String(sm)}`],
            md !== false && styles[`grid-md-${String(md)}`],
            lg !== false && styles[`grid-lg-${String(lg)}`],
            xl !== false && styles[`grid-xl-${String(xl)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        boxSizing: 'border-box'
    }, ownerState.container && {
        display: 'flex',
        flexWrap: 'wrap',
        width: '100%'
    }, ownerState.item && {
        margin: 0 // For instance, it's useful when used with a `figure` element.
    }, ownerState.zeroMinWidth && {
        minWidth: 0
    }, ownerState.wrap !== 'wrap' && {
        flexWrap: ownerState.wrap
    })
, generateDirection, generateRowGap, generateColumnGap, generateGrid);
const useUtilityClasses = (ownerState)=>{
    const { classes , container , direction , item , lg , md , sm , spacing , wrap , xl , xs , zeroMinWidth  } = ownerState;
    const slots = {
        root: [
            'root',
            container && 'container',
            item && 'item',
            zeroMinWidth && 'zeroMinWidth',
            ...resolveSpacingClasses(spacing, container),
            direction !== 'row' && `direction-xs-${String(direction)}`,
            wrap !== 'wrap' && `wrap-xs-${String(wrap)}`,
            xs !== false && `grid-xs-${String(xs)}`,
            sm !== false && `grid-sm-${String(sm)}`,
            md !== false && `grid-md-${String(md)}`,
            lg !== false && `grid-lg-${String(lg)}`,
            xl !== false && `grid-xl-${String(xl)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _gridClasses.getGridUtilityClass, classes);
};
const Grid = /*#__PURE__*/ _react.forwardRef(function Grid(inProps, ref) {
    const themeProps = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiGrid'
    });
    const props = _system.unstable_extendSxProp(themeProps);
    const { className , columns: columnsProp , columnSpacing: columnSpacingProp , component ='div' , container =false , direction ='row' , item =false , lg =false , md =false , rowSpacing: rowSpacingProp , sm =false , spacing =0 , wrap ='wrap' , xl =false , xs =false , zeroMinWidth =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const rowSpacing = rowSpacingProp || spacing;
    const columnSpacing = columnSpacingProp || spacing;
    const columnsContext = _react.useContext(_gridContextDefault.default); // columns set with default breakpoint unit of 12
    const columns = container ? columnsProp || 12 : columnsContext;
    const ownerState = _extendsDefault.default({}, props, {
        columns,
        container,
        direction,
        item,
        lg,
        md,
        sm,
        rowSpacing,
        columnSpacing,
        wrap,
        xl,
        xs,
        zeroMinWidth
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_gridContextDefault.default.Provider, {
        value: columns,
        children: /*#__PURE__*/ _jsxRuntime.jsx(GridRoot, _extendsDefault.default({
            ownerState: ownerState,
            className: _clsxDefault.default(classes.root, className),
            as: component,
            ref: ref
        }, other))
    });
});
Grid.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The number of columns.
   * @default 12
   */ columns: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number,
        _propTypesDefault.default.object
    ]),
    /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */ columnSpacing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.number,
            _propTypesDefault.default.string
        ])),
        _propTypesDefault.default.number,
        _propTypesDefault.default.object,
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */ container: _propTypesDefault.default.bool,
    /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */ direction: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'column-reverse',
            'column',
            'row-reverse',
            'row'
        ]),
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOf([
            'column-reverse',
            'column',
            'row-reverse',
            'row'
        ])),
        _propTypesDefault.default.object
    ]),
    /**
   * If `true`, the component will have the flex *item* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */ item: _propTypesDefault.default.bool,
    /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
   * @default false
   */ lg: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.bool
    ]),
    /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `md` breakpoint and wider screens if not overridden.
   * @default false
   */ md: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.bool
    ]),
    /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */ rowSpacing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.number,
            _propTypesDefault.default.string
        ])),
        _propTypesDefault.default.number,
        _propTypesDefault.default.object,
        _propTypesDefault.default.string
    ]),
    /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
   * @default false
   */ sm: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.bool
    ]),
    /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */ spacing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.number,
            _propTypesDefault.default.string
        ])),
        _propTypesDefault.default.number,
        _propTypesDefault.default.object,
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */ wrap: _propTypesDefault.default.oneOf([
        'nowrap',
        'wrap-reverse',
        'wrap'
    ]),
    /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
   * @default false
   */ xl: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.bool
    ]),
    /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for all the screen sizes with the lowest priority.
   * @default false
   */ xs: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.bool
    ]),
    /**
   * If `true`, it sets `min-width: 0` on the item.
   * Refer to the limitations section of the documentation to better understand the use case.
   * @default false
   */ zeroMinWidth: _propTypesDefault.default.bool
};
{
    const requireProp = _requirePropFactoryDefault.default('Grid', Grid); // eslint-disable-next-line no-useless-concat
    Grid["propTypes"] = _extendsDefault.default({}, Grid.propTypes, {
        direction: requireProp('container'),
        lg: requireProp('item'),
        md: requireProp('item'),
        sm: requireProp('item'),
        spacing: requireProp('container'),
        wrap: requireProp('container'),
        xs: requireProp('item'),
        zeroMinWidth: requireProp('item')
    });
}exports.default = Grid;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/system":"Q0Zql","@mui/base":"656dE","../utils/requirePropFactory":"gQOX7","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./GridContext":"ghr8E","./gridClasses":"iRwNS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ghr8E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const GridContext = /*#__PURE__*/ _react.createContext();
GridContext.displayName = 'GridContext';
exports.default = GridContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRwNS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getGridUtilityClass", ()=>getGridUtilityClass
);
var _base = require("@mui/base");
function getGridUtilityClass(slot) {
    return _base.generateUtilityClass('MuiGrid', slot);
}
const SPACINGS = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
];
const DIRECTIONS = [
    'column-reverse',
    'column',
    'row-reverse',
    'row'
];
const WRAPS = [
    'nowrap',
    'wrap-reverse',
    'wrap'
];
const GRID_SIZES = [
    'auto',
    true,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
];
const gridClasses = _base.generateUtilityClasses('MuiGrid', [
    'root',
    'container',
    'item',
    'zeroMinWidth',
    ...SPACINGS.map((spacing)=>`spacing-xs-${spacing}`
    ),
    ...DIRECTIONS.map((direction)=>`direction-xs-${direction}`
    ),
    ...WRAPS.map((wrap)=>`wrap-xs-${wrap}`
    ),
    ...GRID_SIZES.map((size)=>`grid-xs-${size}`
    ),
    ...GRID_SIZES.map((size)=>`grid-sm-${size}`
    ),
    ...GRID_SIZES.map((size)=>`grid-md-${size}`
    ),
    ...GRID_SIZES.map((size)=>`grid-lg-${size}`
    ),
    ...GRID_SIZES.map((size)=>`grid-xl-${size}`
    )
]);
exports.default = gridClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"38MWl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SecretKind", ()=>SecretKind
);
let SecretKind;
(function(SecretKind1) {
    SecretKind1[SecretKind1[// secret::kind::ACCOUNT
    "Account"] = 1] = "Account";
    SecretKind1[SecretKind1[// secret::kind::TEXT
    "Note"] = 2] = "Note";
    SecretKind1[SecretKind1[// secret::kind::CREDENTIALS
    "Credentials"] = 3] = "Credentials";
    SecretKind1[SecretKind1[// secret::kind::BLOB
    "File"] = 4] = "File";
})(SecretKind || (SecretKind = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2rk9V":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$440a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$440a.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _list = require("@mui/material/List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _listItem = require("@mui/material/ListItem");
var _listItemDefault = parcelHelpers.interopDefault(_listItem);
var _listItemButton = require("@mui/material/ListItemButton");
var _listItemButtonDefault = parcelHelpers.interopDefault(_listItemButton);
var _listItemIcon = require("@mui/material/ListItemIcon");
var _listItemIconDefault = parcelHelpers.interopDefault(_listItemIcon);
var _listItemText = require("@mui/material/ListItemText");
var _listItemTextDefault = parcelHelpers.interopDefault(_listItemText);
var _divider = require("@mui/material/Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _typography = require("@mui/material/Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _secretIcon = require("./secret-icon");
var _secretIconDefault = parcelHelpers.interopDefault(_secretIcon);
function SecretList(props) {
    const { storage  } = props;
    if (!storage) return null;
    const { index: index1  } = storage;
    const secrets = new Map(Object.entries(index1));
    if (secrets.size === 0) return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
        marginTop: 4,
        alignItems: "center",
        direction: "column",
        justifyContent: "center",
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
            paragraph: true,
            children: "No secrets yet"
        }, void 0, false, {
            fileName: "src/authenticated/secret-list.tsx",
            lineNumber: 40,
            columnNumber: 9
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/secret-list.tsx",
        lineNumber: 34,
        columnNumber: 7
    }, this);
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listDefault.default, {
        component: "nav",
        children: [
            ...secrets.entries()
        ].map((value)=>{
            const [uuid, index] = value;
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("div", {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemDefault.default, {
                        component: "div",
                        disablePadding: true,
                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemButtonDefault.default, {
                            children: [
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemIconDefault.default, {
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_secretIconDefault.default, {
                                        kind: index.kind
                                    }, void 0, false, {
                                        fileName: "src/authenticated/secret-list.tsx",
                                        lineNumber: 54,
                                        columnNumber: 19
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src/authenticated/secret-list.tsx",
                                    lineNumber: 53,
                                    columnNumber: 17
                                }, this),
                                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listItemTextDefault.default, {
                                    primary: index.meta.label,
                                    secondary: uuid
                                }, void 0, false, {
                                    fileName: "src/authenticated/secret-list.tsx",
                                    lineNumber: 56,
                                    columnNumber: 17
                                }, this)
                            ]
                        }, void 0, true, {
                            fileName: "src/authenticated/secret-list.tsx",
                            lineNumber: 52,
                            columnNumber: 15
                        }, this)
                    }, void 0, false, {
                        fileName: "src/authenticated/secret-list.tsx",
                        lineNumber: 51,
                        columnNumber: 13
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {
                        light: true
                    }, void 0, false, {
                        fileName: "src/authenticated/secret-list.tsx",
                        lineNumber: 59,
                        columnNumber: 13
                    }, this)
                ]
            }, uuid, true, {
                fileName: "src/authenticated/secret-list.tsx",
                lineNumber: 50,
                columnNumber: 11
            }, this);
        })
    }, void 0, false, {
        fileName: "src/authenticated/secret-list.tsx",
        lineNumber: 46,
        columnNumber: 5
    }, this);
}
exports.default = SecretList;
_c = SecretList;
var _c;
$RefreshReg$(_c, "SecretList");

  $parcel$ReactRefreshHelpers$440a.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/List":"PwNf5","@mui/material/ListItem":"kkzrF","@mui/material/ListItemButton":"gdWZi","@mui/material/ListItemIcon":"2P7xS","@mui/material/ListItemText":"g3ISx","@mui/material/Divider":"lHE5Y","@mui/material/Stack":"cuThX","@mui/material/Typography":"faxSz","./secret-icon":"klZrA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"klZrA":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$e1f7 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e1f7.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _accountBox = require("@mui/icons-material/AccountBox");
var _accountBoxDefault = parcelHelpers.interopDefault(_accountBox);
var _article = require("@mui/icons-material/Article");
var _articleDefault = parcelHelpers.interopDefault(_article);
var _list = require("@mui/icons-material/List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _fileOpen = require("@mui/icons-material/FileOpen");
var _fileOpenDefault = parcelHelpers.interopDefault(_fileOpen);
var _types = require("../types");
function SecretIcon(props) {
    switch(props.kind){
        case _types.SecretKind.Account:
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_accountBoxDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/secret-icon.tsx",
                lineNumber: 17,
                columnNumber: 14
            }, this);
        case _types.SecretKind.Note:
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_articleDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/secret-icon.tsx",
                lineNumber: 19,
                columnNumber: 14
            }, this);
        case _types.SecretKind.Credentials:
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/secret-icon.tsx",
                lineNumber: 21,
                columnNumber: 14
            }, this);
        case _types.SecretKind.File:
            return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileOpenDefault.default, {}, void 0, false, {
                fileName: "src/authenticated/secret-icon.tsx",
                lineNumber: 23,
                columnNumber: 14
            }, this);
    }
}
exports.default = SecretIcon;
_c = SecretIcon;
var _c;
$RefreshReg$(_c, "SecretIcon");

  $parcel$ReactRefreshHelpers$e1f7.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/icons-material/AccountBox":"s4grW","@mui/icons-material/Article":"fZbk9","@mui/icons-material/List":"dVv2a","@mui/icons-material/FileOpen":"6jodQ","../types":"38MWl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"s4grW":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"
}), 'AccountBox');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"fZbk9":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"
}), 'Article');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"dVv2a":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"
}), 'List');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"6jodQ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M14 2H6c-1.1 0-2 .9-2 2v16c0 1.1.89 2 1.99 2H15v-8h5V8l-6-6zm-1 7V3.5L18.5 9H13zm4 12.66V16h5.66v2h-2.24l2.95 2.95-1.41 1.41L19 19.41v2.24h-2z"
}), 'FileOpen');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"9zLdX":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$be8c = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$be8c.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _s = $RefreshSig$();
function UnlockVaultForm(props) {
    _s();
    const { onFormSubmit  } = props;
    const [password, setPassword] = _react.useState("");
    const [passwordError, setPasswordError] = _react.useState(false);
    const [passwordHelperText, setPasswordHelperText] = _react.useState("");
    const onPasswordChange = (e)=>setPassword(e.target.value)
    ;
    const onSubmit = (e)=>{
        e.preventDefault();
        setPasswordHelperText("");
        setPasswordError(false);
        if (password === "") {
            setPasswordHelperText("Password may not be empty");
            setPasswordError(true);
        } else onFormSubmit({
            password
        });
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "unlock-vault-form",
        onSubmit: onSubmit,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                id: "vault-password",
                type: "password",
                autoComplete: "off",
                label: "Password",
                onChange: onPasswordChange,
                value: password,
                error: passwordError,
                helperText: passwordHelperText,
                variant: "outlined"
            }, void 0, false, {
                fileName: "src/authenticated/unlock-vault-form.tsx",
                lineNumber: 38,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "src/authenticated/unlock-vault-form.tsx",
            lineNumber: 37,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/unlock-vault-form.tsx",
        lineNumber: 36,
        columnNumber: 5
    }, this);
}
exports.default = UnlockVaultForm;
_s(UnlockVaultForm, "fzNk+ErHAViaz2UOHLP+l3lqTHs=");
_c = UnlockVaultForm;
var _c;
$RefreshReg$(_c, "UnlockVaultForm");

  $parcel$ReactRefreshHelpers$be8c.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"hlqrK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_textFieldDefault.default
);
parcelHelpers.export(exports, "textFieldClasses", ()=>_textFieldClassesDefault.default
);
var _textField = require("./TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _textFieldClasses = require("./textFieldClasses");
var _textFieldClassesDefault = parcelHelpers.interopDefault(_textFieldClasses);
parcelHelpers.exportAll(_textFieldClasses, exports);

},{"./TextField":"jGm1J","./textFieldClasses":"kvpDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jGm1J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _input = require("../Input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _filledInput = require("../FilledInput");
var _filledInputDefault = parcelHelpers.interopDefault(_filledInput);
var _outlinedInput = require("../OutlinedInput");
var _outlinedInputDefault = parcelHelpers.interopDefault(_outlinedInput);
var _inputLabel = require("../InputLabel");
var _inputLabelDefault = parcelHelpers.interopDefault(_inputLabel);
var _formControl = require("../FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _formHelperText = require("../FormHelperText");
var _formHelperTextDefault = parcelHelpers.interopDefault(_formHelperText);
var _select = require("../Select");
var _selectDefault = parcelHelpers.interopDefault(_select);
var _textFieldClasses = require("./textFieldClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "autoComplete",
    "autoFocus",
    "children",
    "className",
    "color",
    "defaultValue",
    "disabled",
    "error",
    "FormHelperTextProps",
    "fullWidth",
    "helperText",
    "id",
    "InputLabelProps",
    "inputProps",
    "InputProps",
    "inputRef",
    "label",
    "maxRows",
    "minRows",
    "multiline",
    "name",
    "onBlur",
    "onChange",
    "onFocus",
    "placeholder",
    "required",
    "rows",
    "select",
    "SelectProps",
    "type",
    "value",
    "variant"
];
const variantComponent = {
    standard: _inputDefault.default,
    filled: _filledInputDefault.default,
    outlined: _outlinedInputDefault.default
};
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ]
    };
    return _base.unstable_composeClasses(slots, _textFieldClasses.getTextFieldUtilityClass, classes);
};
const TextFieldRoot = _styledDefault.default(_formControlDefault.default, {
    name: 'MuiTextField',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({});
/**
 * The `TextField` is a convenience wrapper for the most common cases (80%).
 * It cannot be all things to all people, otherwise the API would grow out of control.
 *
 * ## Advanced Configuration
 *
 * It's important to understand that the text field is a simple abstraction
 * on top of the following components:
 *
 * - [FormControl](/api/form-control/)
 * - [InputLabel](/api/input-label/)
 * - [FilledInput](/api/filled-input/)
 * - [OutlinedInput](/api/outlined-input/)
 * - [Input](/api/input/)
 * - [FormHelperText](/api/form-helper-text/)
 *
 * If you wish to alter the props applied to the `input` element, you can do so as follows:
 *
 * ```jsx
 * const inputProps = {
 *   step: 300,
 * };
 *
 * return <TextField id="time" type="time" inputProps={inputProps} />;
 * ```
 *
 * For advanced cases, please look at the source of TextField by clicking on the
 * "Edit this page" button above. Consider either:
 *
 * - using the upper case props for passing values directly to the components
 * - using the underlying components directly as shown in the demos
 */ const TextField = /*#__PURE__*/ _react.forwardRef(function TextField(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTextField'
    });
    const { autoComplete , autoFocus =false , children , className , color ='primary' , defaultValue , disabled =false , error =false , FormHelperTextProps , fullWidth =false , helperText , id: idOverride , InputLabelProps , inputProps , InputProps , inputRef , label , maxRows , minRows , multiline =false , name , onBlur , onChange , onFocus , placeholder , required =false , rows , select =false , SelectProps , type , value , variant ='outlined'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        autoFocus,
        color,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    if (select && !children) console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
    const InputMore = {};
    if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') InputMore.notched = InputLabelProps.shrink;
        InputMore.label = label;
    }
    if (select) {
        // unset defaults from textbox inputs
        if (!SelectProps || !SelectProps.native) InputMore.id = undefined;
        InputMore['aria-describedby'] = undefined;
    }
    const id = _utils.unstable_useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
    const inputLabelId = label && id ? `${id}-label` : undefined;
    const InputComponent = variantComponent[variant];
    const InputElement = /*#__PURE__*/ _jsxRuntime.jsx(InputComponent, _extendsDefault.default({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        maxRows: maxRows,
        minRows: minRows,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
    }, InputMore, InputProps));
    return /*#__PURE__*/ _jsxRuntime.jsxs(TextFieldRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        disabled: disabled,
        error: error,
        fullWidth: fullWidth,
        ref: ref,
        required: required,
        color: color,
        variant: variant,
        ownerState: ownerState
    }, other, {
        children: [
            label != null && label !== '' && /*#__PURE__*/ _jsxRuntime.jsx(_inputLabelDefault.default, _extendsDefault.default({
                htmlFor: id,
                id: inputLabelId
            }, InputLabelProps, {
                children: label
            })),
            select ? /*#__PURE__*/ _jsxRuntime.jsx(_selectDefault.default, _extendsDefault.default({
                "aria-describedby": helperTextId,
                id: id,
                labelId: inputLabelId,
                value: value,
                input: InputElement
            }, SelectProps, {
                children: children
            })) : InputElement,
            helperText && /*#__PURE__*/ _jsxRuntime.jsx(_formHelperTextDefault.default, _extendsDefault.default({
                id: helperTextId
            }, FormHelperTextProps, {
                children: helperText
            }))
        ]
    }));
});
TextField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */ error: _propTypesDefault.default.bool,
    /**
   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
   */ FormHelperTextProps: _propTypesDefault.default.object,
    /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The helper text content.
   */ helperText: _propTypesDefault.default.node,
    /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */ id: _propTypesDefault.default.string,
    /**
   * Props applied to the [`InputLabel`](/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   */ InputLabelProps: _propTypesDefault.default.object,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/api/filled-input/),
   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
   * component depending on the `variant` prop value.
   */ InputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * The label content.
   */ label: _propTypesDefault.default.node,
    /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none',
        'normal'
    ]),
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */ select: _propTypesDefault.default.bool,
    /**
   * Props applied to the [`Select`](/api/select/) element.
   */ SelectProps: _propTypesDefault.default.object,
    /**
   * The size of the component.
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */ type: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any,
    /**
   * The variant to use.
   * @default 'outlined'
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
exports.default = TextField;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/utils":"cttLn","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Input":"4JIyx","../FilledInput":"fn85o","../OutlinedInput":"jaFpb","../InputLabel":"3Ew25","../FormControl":"2FZGq","../FormHelperText":"hp8IL","../Select":"lFmVj","./textFieldClasses":"kvpDT","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4JIyx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputDefault.default
);
parcelHelpers.export(exports, "inputClasses", ()=>_inputClassesDefault.default
);
var _input = require("./Input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _inputClasses = require("./inputClasses");
var _inputClassesDefault = parcelHelpers.interopDefault(_inputClasses);
parcelHelpers.exportAll(_inputClasses, exports);

},{"./Input":"fDj8I","./inputClasses":"hsBUn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDj8I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _inputBase = require("../InputBase");
var _inputBaseDefault = parcelHelpers.interopDefault(_inputBase);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _inputClasses = require("./inputClasses");
var _inputClassesDefault = parcelHelpers.interopDefault(_inputClasses);
var _inputBase1 = require("../InputBase/InputBase");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "disableUnderline",
    "components",
    "componentsProps",
    "fullWidth",
    "inputComponent",
    "multiline",
    "type"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disableUnderline  } = ownerState;
    const slots = {
        root: [
            'root',
            !disableUnderline && 'underline'
        ],
        input: [
            'input'
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _inputClasses.getInputUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const InputRoot = _styledDefault.default(_inputBase1.InputBaseRoot, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiInput',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            ..._inputBase1.rootOverridesResolver(props, styles),
            !ownerState.disableUnderline && styles.underline
        ];
    }
})(({ theme , ownerState  })=>{
    const light = theme.palette.mode === 'light';
    const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    return _extendsDefault.default({
        position: 'relative'
    }, ownerState.formControl && {
        'label + &': {
            marginTop: 16
        }
    }, !ownerState.disableUnderline && {
        '&:after': {
            borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.
        },
        [`&.${_inputClassesDefault.default.focused}:after`]: {
            transform: 'scaleX(1)'
        },
        [`&.${_inputClassesDefault.default.error}:after`]: {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red
        },
        '&:before': {
            borderBottom: `1px solid ${bottomLineColor}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
                duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.
        },
        [`&:hover:not(.${_inputClassesDefault.default.disabled}):before`]: {
            borderBottom: `2px solid ${theme.palette.text.primary}`,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                borderBottom: `1px solid ${bottomLineColor}`
            }
        },
        [`&.${_inputClassesDefault.default.disabled}:before`]: {
            borderBottomStyle: 'dotted'
        }
    });
});
const InputInput = _styledDefault.default(_inputBase1.InputBaseComponent, {
    name: 'MuiInput',
    slot: 'Input',
    overridesResolver: _inputBase1.inputOverridesResolver
})({});
const Input = /*#__PURE__*/ _react.forwardRef(function Input(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiInput'
    });
    const { disableUnderline , components ={} , componentsProps: componentsPropsProp , fullWidth =false , inputComponent ='input' , multiline =false , type ='text'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const classes = useUtilityClasses(props);
    const ownerState = {
        disableUnderline
    };
    const inputComponentsProps = {
        root: {
            ownerState
        }
    };
    const componentsProps = componentsPropsProp ? _utils.deepmerge(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    return /*#__PURE__*/ _jsxRuntime.jsx(_inputBaseDefault.default, _extendsDefault.default({
        components: _extendsDefault.default({
            Root: InputRoot,
            Input: InputInput
        }, components),
        componentsProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
    }, other, {
        classes: classes
    }));
});
Input.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` will not have an underline.
   */ disableUnderline: _propTypesDefault.default.bool,
    /**
   * End `InputAdornment` for this component.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */ inputComponent: _propTypesDefault.default.elementType,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none'
    ]),
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, a [TextareaAutosize](/components/textarea-autosize/) element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Start `InputAdornment` for this component.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
Input.muiName = 'Input';
exports.default = Input;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/base":"656dE","@mui/utils":"cttLn","../InputBase":"1ezJA","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./inputClasses":"hsBUn","../InputBase/InputBase":"h8zen","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ezJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputBaseDefault.default
);
parcelHelpers.export(exports, "inputBaseClasses", ()=>_inputBaseClassesDefault.default
);
var _inputBase = require("./InputBase");
var _inputBaseDefault = parcelHelpers.interopDefault(_inputBase);
var _inputBaseClasses = require("./inputBaseClasses");
var _inputBaseClassesDefault = parcelHelpers.interopDefault(_inputBaseClasses);
parcelHelpers.exportAll(_inputBaseClasses, exports);

},{"./InputBase":"h8zen","./inputBaseClasses":"24Wfo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h8zen":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rootOverridesResolver", ()=>rootOverridesResolver
);
parcelHelpers.export(exports, "inputOverridesResolver", ()=>inputOverridesResolver
);
parcelHelpers.export(exports, "InputBaseRoot", ()=>InputBaseRoot
);
parcelHelpers.export(exports, "InputBaseComponent", ()=>InputBaseComponent
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@mui/utils");
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _formControlContext = require("../FormControl/FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _globalStyles = require("../GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);
var _utils1 = require("./utils");
var _inputBaseClasses = require("./inputBaseClasses");
var _inputBaseClassesDefault = parcelHelpers.interopDefault(_inputBaseClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-describedby",
    "autoComplete",
    "autoFocus",
    "className",
    "color",
    "components",
    "componentsProps",
    "defaultValue",
    "disabled",
    "disableInjectingGlobalStyles",
    "endAdornment",
    "error",
    "fullWidth",
    "id",
    "inputComponent",
    "inputProps",
    "inputRef",
    "margin",
    "maxRows",
    "minRows",
    "multiline",
    "name",
    "onBlur",
    "onChange",
    "onClick",
    "onFocus",
    "onKeyDown",
    "onKeyUp",
    "placeholder",
    "readOnly",
    "renderSuffix",
    "rows",
    "size",
    "startAdornment",
    "type",
    "value"
];
const rootOverridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.root,
        ownerState.formControl && styles.formControl,
        ownerState.startAdornment && styles.adornedStart,
        ownerState.endAdornment && styles.adornedEnd,
        ownerState.error && styles.error,
        ownerState.size === 'small' && styles.sizeSmall,
        ownerState.multiline && styles.multiline,
        ownerState.color && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
        ownerState.fullWidth && styles.fullWidth,
        ownerState.hiddenLabel && styles.hiddenLabel
    ];
};
const inputOverridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.input,
        ownerState.size === 'small' && styles.inputSizeSmall,
        ownerState.multiline && styles.inputMultiline,
        ownerState.type === 'search' && styles.inputTypeSearch,
        ownerState.startAdornment && styles.inputAdornedStart,
        ownerState.endAdornment && styles.inputAdornedEnd,
        ownerState.hiddenLabel && styles.inputHiddenLabel
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { classes , color , disabled , error , endAdornment , focused , formControl , fullWidth , hiddenLabel , multiline , size , startAdornment , type  } = ownerState;
    const slots = {
        root: [
            'root',
            `color${_capitalizeDefault.default(color)}`,
            disabled && 'disabled',
            error && 'error',
            fullWidth && 'fullWidth',
            focused && 'focused',
            formControl && 'formControl',
            size === 'small' && 'sizeSmall',
            multiline && 'multiline',
            startAdornment && 'adornedStart',
            endAdornment && 'adornedEnd',
            hiddenLabel && 'hiddenLabel'
        ],
        input: [
            'input',
            disabled && 'disabled',
            type === 'search' && 'inputTypeSearch',
            multiline && 'inputMultiline',
            size === 'small' && 'inputSizeSmall',
            hiddenLabel && 'inputHiddenLabel',
            startAdornment && 'inputAdornedStart',
            endAdornment && 'inputAdornedEnd'
        ]
    };
    return _base.unstable_composeClasses(slots, _inputBaseClasses.getInputBaseUtilityClass, classes);
};
const InputBaseRoot = _styledDefault.default('div', {
    name: 'MuiInputBase',
    slot: 'Root',
    overridesResolver: rootOverridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({}, theme.typography.body1, {
        color: theme.palette.text.primary,
        lineHeight: '1.4375em',
        // 23px
        boxSizing: 'border-box',
        // Prevent padding issue with fullWidth.
        position: 'relative',
        cursor: 'text',
        display: 'inline-flex',
        alignItems: 'center',
        [`&.${_inputBaseClassesDefault.default.disabled}`]: {
            color: theme.palette.text.disabled,
            cursor: 'default'
        }
    }, ownerState.multiline && _extendsDefault.default({
        padding: '4px 0 5px'
    }, ownerState.size === 'small' && {
        paddingTop: 1
    }), ownerState.fullWidth && {
        width: '100%'
    })
);
const InputBaseComponent = _styledDefault.default('input', {
    name: 'MuiInputBase',
    slot: 'Input',
    overridesResolver: inputOverridesResolver
})(({ theme , ownerState  })=>{
    const light = theme.palette.mode === 'light';
    const placeholder = {
        color: 'currentColor',
        opacity: light ? 0.42 : 0.5,
        transition: theme.transitions.create('opacity', {
            duration: theme.transitions.duration.shorter
        })
    };
    const placeholderHidden = {
        opacity: '0 !important'
    };
    const placeholderVisible = {
        opacity: light ? 0.42 : 0.5
    };
    return _extendsDefault.default({
        font: 'inherit',
        letterSpacing: 'inherit',
        color: 'currentColor',
        padding: '4px 0 5px',
        border: 0,
        boxSizing: 'content-box',
        background: 'none',
        height: '1.4375em',
        // Reset 23pxthe native input line-height
        margin: 0,
        // Reset for Safari
        WebkitTapHighlightColor: 'transparent',
        display: 'block',
        // Make the flex item shrink with Firefox
        minWidth: 0,
        width: '100%',
        // Fix IE11 width issue
        animationName: 'mui-auto-fill-cancel',
        animationDuration: '10ms',
        '&::-webkit-input-placeholder': placeholder,
        '&::-moz-placeholder': placeholder,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholder,
        // IE11
        '&::-ms-input-placeholder': placeholder,
        // Edge
        '&:focus': {
            outline: 0
        },
        // Reset Firefox invalid required input style
        '&:invalid': {
            boxShadow: 'none'
        },
        '&::-webkit-search-decoration': {
            // Remove the padding when type=search.
            WebkitAppearance: 'none'
        },
        // Show and hide the placeholder logic
        [`label[data-shrink=false] + .${_inputBaseClassesDefault.default.formControl} &`]: {
            '&::-webkit-input-placeholder': placeholderHidden,
            '&::-moz-placeholder': placeholderHidden,
            // Firefox 19+
            '&:-ms-input-placeholder': placeholderHidden,
            // IE11
            '&::-ms-input-placeholder': placeholderHidden,
            // Edge
            '&:focus::-webkit-input-placeholder': placeholderVisible,
            '&:focus::-moz-placeholder': placeholderVisible,
            // Firefox 19+
            '&:focus:-ms-input-placeholder': placeholderVisible,
            // IE11
            '&:focus::-ms-input-placeholder': placeholderVisible // Edge
        },
        [`&.${_inputBaseClassesDefault.default.disabled}`]: {
            opacity: 1,
            // Reset iOS opacity
            WebkitTextFillColor: theme.palette.text.disabled // Fix opacity Safari bug
        },
        '&:-webkit-autofill': {
            animationDuration: '5000s',
            animationName: 'mui-auto-fill'
        }
    }, ownerState.size === 'small' && {
        paddingTop: 1
    }, ownerState.multiline && {
        height: 'auto',
        resize: 'none',
        padding: 0,
        paddingTop: 0
    }, ownerState.type === 'search' && {
        // Improve type search style.
        MozAppearance: 'textfield'
    });
});
const inputGlobalStyles = /*#__PURE__*/ _jsxRuntime.jsx(_globalStylesDefault.default, {
    styles: {
        '@keyframes mui-auto-fill': {
            from: {
                display: 'block'
            }
        },
        '@keyframes mui-auto-fill-cancel': {
            from: {
                display: 'block'
            }
        }
    }
});
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */ const InputBase = /*#__PURE__*/ _react.forwardRef(function InputBase(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiInputBase'
    });
    const { 'aria-describedby': ariaDescribedby , autoComplete , autoFocus , className , components ={} , componentsProps ={} , defaultValue , disabled , disableInjectingGlobalStyles , endAdornment , fullWidth =false , id , inputComponent ='input' , inputProps: inputPropsProp = {} , inputRef: inputRefProp , maxRows , minRows , multiline =false , name , onBlur , onChange , onClick , onFocus , onKeyDown , onKeyUp , placeholder , readOnly , renderSuffix , rows , startAdornment , type ='text' , value: valueProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const { current: isControlled  } = _react.useRef(value != null);
    const inputRef = _react.useRef();
    const handleInputRefWarning = _react.useCallback((instance)=>{
        if (instance && instance.nodeName !== 'INPUT' && !instance.focus) console.error([
            'MUI: You have provided a `inputComponent` to the input component',
            'that does not correctly handle the `ref` prop.',
            'Make sure the `ref` prop is called with a HTMLInputElement.'
        ].join('\n'));
    }, []);
    const handleInputPropsRefProp = _useForkRefDefault.default(inputPropsProp.ref, handleInputRefWarning);
    const handleInputRefProp = _useForkRefDefault.default(inputRefProp, handleInputPropsRefProp);
    const handleInputRef = _useForkRefDefault.default(inputRef, handleInputRefProp);
    const [focused, setFocused] = _react.useState(false);
    const muiFormControl = _useFormControlDefault.default();
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (muiFormControl) return muiFormControl.registerEffect();
        return undefined;
    }, [
        muiFormControl
    ]);
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'color',
            'disabled',
            'error',
            'hiddenLabel',
            'size',
            'required',
            'filled'
        ]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.
    _react.useEffect(()=>{
        if (!muiFormControl && disabled && focused) {
            setFocused(false);
            if (onBlur) onBlur();
        }
    }, [
        muiFormControl,
        disabled,
        focused,
        onBlur
    ]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = _react.useCallback((obj)=>{
        if (_utils1.isFilled(obj)) {
            if (onFilled) onFilled();
        } else if (onEmpty) onEmpty();
    }, [
        onFilled,
        onEmpty
    ]);
    _useEnhancedEffectDefault.default(()=>{
        if (isControlled) checkDirty({
            value
        });
    }, [
        value,
        checkDirty,
        isControlled
    ]);
    const handleFocus = (event)=>{
        // Fix a bug with IE11 where the focus/blur events are triggered
        // while the component is disabled.
        if (fcs.disabled) {
            event.stopPropagation();
            return;
        }
        if (onFocus) onFocus(event);
        if (inputPropsProp.onFocus) inputPropsProp.onFocus(event);
        if (muiFormControl && muiFormControl.onFocus) muiFormControl.onFocus(event);
        else setFocused(true);
    };
    const handleBlur = (event)=>{
        if (onBlur) onBlur(event);
        if (inputPropsProp.onBlur) inputPropsProp.onBlur(event);
        if (muiFormControl && muiFormControl.onBlur) muiFormControl.onBlur(event);
        else setFocused(false);
    };
    const handleChange = (event, ...args)=>{
        if (!isControlled) {
            const element = event.target || inputRef.current;
            if (element == null) throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.`);
            checkDirty({
                value: element.value
            });
        }
        if (inputPropsProp.onChange) inputPropsProp.onChange(event, ...args);
         // Perform in the willUpdate
        if (onChange) onChange(event, ...args);
    }; // Check the input state on mount, in case it was filled by the user
    // or auto filled by the browser before the hydration (for SSR).
    _react.useEffect(()=>{
        checkDirty(inputRef.current); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const handleClick = (event)=>{
        if (inputRef.current && event.currentTarget === event.target) inputRef.current.focus();
        if (onClick) onClick(event);
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === 'input') {
        if (rows) {
            if (minRows || maxRows) console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
            inputProps = _extendsDefault.default({
                type: undefined,
                minRows: rows,
                maxRows: rows
            }, inputProps);
        } else inputProps = _extendsDefault.default({
            type: undefined,
            maxRows,
            minRows
        }, inputProps);
        InputComponent = _base.TextareaAutosize;
    }
    const handleAutoFill = (event)=>{
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
            value: 'x'
        });
    };
    _react.useEffect(()=>{
        if (muiFormControl) muiFormControl.setAdornedStart(Boolean(startAdornment));
    }, [
        muiFormControl,
        startAdornment
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        color: fcs.color || 'primary',
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
    });
    const classes = useUtilityClasses(ownerState);
    const Root = components.Root || InputBaseRoot;
    const rootProps = componentsProps.root || {};
    const Input = components.Input || InputBaseComponent;
    inputProps = _extendsDefault.default({}, inputProps, componentsProps.input);
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            !disableInjectingGlobalStyles && inputGlobalStyles,
            /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({}, rootProps, !_base.isHostComponent(Root) && {
                ownerState: _extendsDefault.default({}, ownerState, rootProps.ownerState)
            }, {
                ref: ref,
                onClick: handleClick
            }, other, {
                className: _clsxDefault.default(classes.root, rootProps.className, className),
                children: [
                    startAdornment,
                    /*#__PURE__*/ _jsxRuntime.jsx(_formControlContextDefault.default.Provider, {
                        value: null,
                        children: /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({
                            ownerState: ownerState,
                            "aria-invalid": fcs.error,
                            "aria-describedby": ariaDescribedby,
                            autoComplete: autoComplete,
                            autoFocus: autoFocus,
                            defaultValue: defaultValue,
                            disabled: fcs.disabled,
                            id: id,
                            onAnimationStart: handleAutoFill,
                            name: name,
                            placeholder: placeholder,
                            readOnly: readOnly,
                            required: fcs.required,
                            rows: rows,
                            value: value,
                            onKeyDown: onKeyDown,
                            onKeyUp: onKeyUp,
                            type: type
                        }, inputProps, !_base.isHostComponent(Input) && {
                            as: InputComponent,
                            ownerState: _extendsDefault.default({}, ownerState, inputProps.ownerState)
                        }, {
                            ref: handleInputRef,
                            className: _clsxDefault.default(classes.input, inputProps.className),
                            onBlur: handleBlur,
                            onChange: handleChange,
                            onFocus: handleFocus
                        }))
                    }),
                    endAdornment,
                    renderSuffix ? renderSuffix(_extendsDefault.default({}, fcs, {
                        startAdornment
                    })) : null
                ]
            }))
        ]
    });
});
InputBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ 'aria-describedby': _propTypesDefault.default.string,
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */ disableInjectingGlobalStyles: _propTypesDefault.default.bool,
    /**
   * End `InputAdornment` for this component.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */ inputComponent: _utils.elementTypeAcceptingRef,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none'
    ]),
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, a [TextareaAutosize](/components/textarea-autosize/) element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyUp: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ renderSuffix: _propTypesDefault.default.func,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * The size of the component.
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Start `InputAdornment` for this component.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
exports.default = InputBase;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","@mui/utils":"cttLn","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../FormControl/formControlState":"7wKpz","../FormControl/FormControlContext":"iYyu4","../FormControl/useFormControl":"4Clb9","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","../utils/useForkRef":"Q1vCZ","../utils/useEnhancedEffect":"jIOpS","../GlobalStyles":"iDS8U","./utils":"7rSSU","./inputBaseClasses":"24Wfo","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wKpz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function formControlState({ props , states , muiFormControl  }) {
    return states.reduce((acc, state)=>{
        acc[state] = props[state];
        if (muiFormControl) {
            if (typeof props[state] === 'undefined') acc[state] = muiFormControl[state];
        }
        return acc;
    }, {});
}
exports.default = formControlState;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYyu4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const FormControlContext = /*#__PURE__*/ _react.createContext();
FormControlContext.displayName = 'FormControlContext';
exports.default = FormControlContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Clb9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
function useFormControl() {
    return _react.useContext(_formControlContextDefault.default);
}
exports.default = useFormControl;

},{"react":"21dqq","./FormControlContext":"iYyu4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rSSU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Supports determination of isControlled().
// Controlled input accepts its current value as a prop.
//
// @see https://facebook.github.io/react/docs/forms.html#controlled-components
// @param value
// @returns {boolean} true if string (including '') or number (including zero)
parcelHelpers.export(exports, "hasValue", ()=>hasValue
) // Determine if field is empty or filled.
;
// Response determines if label is presented above field or as placeholder.
//
// @param obj
// @param SSR
// @returns {boolean} False when not present or empty string.
//                    True when any number or string with length.
parcelHelpers.export(exports, "isFilled", ()=>isFilled
) // Determine if an Input is adorned on start.
;
// It's corresponding to the left with LTR.
//
// @param obj
// @returns {boolean} False when no adornments.
//                    True when adorned at the start.
parcelHelpers.export(exports, "isAdornedStart", ()=>isAdornedStart
);
function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
}
function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
}
function isAdornedStart(obj) {
    return obj.startAdornment;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24Wfo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputBaseUtilityClass", ()=>getInputBaseUtilityClass
);
var _base = require("@mui/base");
function getInputBaseUtilityClass(slot) {
    return _base.generateUtilityClass('MuiInputBase', slot);
}
const inputBaseClasses = _base.generateUtilityClasses('MuiInputBase', [
    'root',
    'formControl',
    'focused',
    'disabled',
    'adornedStart',
    'adornedEnd',
    'error',
    'sizeSmall',
    'multiline',
    'colorSecondary',
    'fullWidth',
    'hiddenLabel',
    'input',
    'inputSizeSmall',
    'inputMultiline',
    'inputTypeSearch',
    'inputAdornedStart',
    'inputAdornedEnd',
    'inputHiddenLabel'
]);
exports.default = inputBaseClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hsBUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputUtilityClass", ()=>getInputUtilityClass
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _base = require("@mui/base");
var _inputBase = require("../InputBase");
function getInputUtilityClass(slot) {
    return _base.generateUtilityClass('MuiInput', slot);
}
const inputClasses = _extendsDefault.default({}, _inputBase.inputBaseClasses, _base.generateUtilityClasses('MuiInput', [
    'root',
    'underline',
    'input'
]));
exports.default = inputClasses;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/base":"656dE","../InputBase":"1ezJA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fn85o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_filledInputDefault.default
);
parcelHelpers.export(exports, "filledInputClasses", ()=>_filledInputClassesDefault.default
);
var _filledInput = require("./FilledInput");
var _filledInputDefault = parcelHelpers.interopDefault(_filledInput);
var _filledInputClasses = require("./filledInputClasses");
var _filledInputClassesDefault = parcelHelpers.interopDefault(_filledInputClasses);
parcelHelpers.exportAll(_filledInputClasses, exports);

},{"./FilledInput":"kWME0","./filledInputClasses":"hN1Av","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWME0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _base = require("@mui/base");
var _inputBase = require("../InputBase");
var _inputBaseDefault = parcelHelpers.interopDefault(_inputBase);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _filledInputClasses = require("./filledInputClasses");
var _filledInputClassesDefault = parcelHelpers.interopDefault(_filledInputClasses);
var _inputBase1 = require("../InputBase/InputBase");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "disableUnderline",
    "components",
    "componentsProps",
    "fullWidth",
    "hiddenLabel",
    "inputComponent",
    "multiline",
    "type"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disableUnderline  } = ownerState;
    const slots = {
        root: [
            'root',
            !disableUnderline && 'underline'
        ],
        input: [
            'input'
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _filledInputClasses.getFilledInputUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const FilledInputRoot = _styledDefault.default(_inputBase1.InputBaseRoot, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiFilledInput',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            ..._inputBase1.rootOverridesResolver(props, styles),
            !ownerState.disableUnderline && styles.underline
        ];
    }
})(({ theme , ownerState  })=>{
    const light = theme.palette.mode === 'light';
    const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
    return _extendsDefault.default({
        position: 'relative',
        backgroundColor,
        borderTopLeftRadius: theme.shape.borderRadius,
        borderTopRightRadius: theme.shape.borderRadius,
        transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
        }),
        '&:hover': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)',
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor
            }
        },
        [`&.${_filledInputClassesDefault.default.focused}`]: {
            backgroundColor
        },
        [`&.${_filledInputClassesDefault.default.disabled}`]: {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
        }
    }, !ownerState.disableUnderline && {
        '&:after': {
            borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.
        },
        [`&.${_filledInputClassesDefault.default.focused}:after`]: {
            transform: 'scaleX(1)'
        },
        [`&.${_filledInputClassesDefault.default.error}:after`]: {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red
        },
        '&:before': {
            borderBottom: `1px solid ${bottomLineColor}`,
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
                duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.
        },
        [`&:hover:not(.${_filledInputClassesDefault.default.disabled}):before`]: {
            borderBottom: `1px solid ${theme.palette.text.primary}`
        },
        [`&.${_filledInputClassesDefault.default.disabled}:before`]: {
            borderBottomStyle: 'dotted'
        }
    }, ownerState.startAdornment && {
        paddingLeft: 12
    }, ownerState.endAdornment && {
        paddingRight: 12
    }, ownerState.multiline && _extendsDefault.default({
        padding: '25px 12px 8px'
    }, ownerState.size === 'small' && {
        paddingTop: 21,
        paddingBottom: 4
    }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
    }));
});
const FilledInputInput = _styledDefault.default(_inputBase1.InputBaseComponent, {
    name: 'MuiFilledInput',
    slot: 'Input',
    overridesResolver: _inputBase1.inputOverridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        paddingTop: 25,
        paddingRight: 12,
        paddingBottom: 8,
        paddingLeft: 12,
        '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
            caretColor: theme.palette.mode === 'light' ? null : '#fff',
            borderTopLeftRadius: 'inherit',
            borderTopRightRadius: 'inherit'
        }
    }, ownerState.size === 'small' && {
        paddingTop: 21,
        paddingBottom: 4
    }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
    }, ownerState.multiline && {
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0
    }, ownerState.startAdornment && {
        paddingLeft: 0
    }, ownerState.endAdornment && {
        paddingRight: 0
    }, ownerState.hiddenLabel && ownerState.size === 'small' && {
        paddingTop: 8,
        paddingBottom: 9
    })
);
const FilledInput = /*#__PURE__*/ _react.forwardRef(function FilledInput(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFilledInput'
    });
    const { components ={} , componentsProps: componentsPropsProp , fullWidth =false , // declare here to prevent spreading to DOM
    inputComponent ='input' , multiline =false , type ='text'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        fullWidth,
        inputComponent,
        multiline,
        type
    });
    const classes = useUtilityClasses(props);
    const filledInputComponentsProps = {
        root: {
            ownerState
        },
        input: {
            ownerState
        }
    };
    const componentsProps = componentsPropsProp ? _utils.deepmerge(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    return /*#__PURE__*/ _jsxRuntime.jsx(_inputBaseDefault.default, _extendsDefault.default({
        components: _extendsDefault.default({
            Root: FilledInputRoot,
            Input: FilledInputInput
        }, components),
        componentsProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
    }, other, {
        classes: classes
    }));
});
FilledInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the input will not have an underline.
   */ disableUnderline: _propTypesDefault.default.bool,
    /**
   * End `InputAdornment` for this component.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */ hiddenLabel: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */ inputComponent: _propTypesDefault.default.elementType,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none'
    ]),
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, a [TextareaAutosize](/components/textarea-autosize/) element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Start `InputAdornment` for this component.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
FilledInput.muiName = 'Input';
exports.default = FilledInput;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@mui/utils":"cttLn","prop-types":"7wKI2","@mui/base":"656dE","../InputBase":"1ezJA","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./filledInputClasses":"hN1Av","../InputBase/InputBase":"h8zen","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hN1Av":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFilledInputUtilityClass", ()=>getFilledInputUtilityClass
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _base = require("@mui/base");
var _inputBase = require("../InputBase");
function getFilledInputUtilityClass(slot) {
    return _base.generateUtilityClass('MuiFilledInput', slot);
}
const filledInputClasses = _extendsDefault.default({}, _inputBase.inputBaseClasses, _base.generateUtilityClasses('MuiFilledInput', [
    'root',
    'underline',
    'input'
]));
exports.default = filledInputClasses;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/base":"656dE","../InputBase":"1ezJA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jaFpb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_outlinedInputDefault.default
);
parcelHelpers.export(exports, "outlinedInputClasses", ()=>_outlinedInputClassesDefault.default
);
var _outlinedInput = require("./OutlinedInput");
var _outlinedInputDefault = parcelHelpers.interopDefault(_outlinedInput);
var _outlinedInputClasses = require("./outlinedInputClasses");
var _outlinedInputClassesDefault = parcelHelpers.interopDefault(_outlinedInputClasses);
parcelHelpers.exportAll(_outlinedInputClasses, exports);

},{"./OutlinedInput":"5qGfQ","./outlinedInputClasses":"5G5nQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5qGfQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _notchedOutline = require("./NotchedOutline");
var _notchedOutlineDefault = parcelHelpers.interopDefault(_notchedOutline);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _outlinedInputClasses = require("./outlinedInputClasses");
var _outlinedInputClassesDefault = parcelHelpers.interopDefault(_outlinedInputClasses);
var _inputBase = require("../InputBase/InputBase");
var _inputBaseDefault = parcelHelpers.interopDefault(_inputBase);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "components",
    "fullWidth",
    "inputComponent",
    "label",
    "multiline",
    "notched",
    "type"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        notchedOutline: [
            'notchedOutline'
        ],
        input: [
            'input'
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _outlinedInputClasses.getOutlinedInputUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const OutlinedInputRoot = _styledDefault.default(_inputBase.InputBaseRoot, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiOutlinedInput',
    slot: 'Root',
    overridesResolver: _inputBase.rootOverridesResolver
})(({ theme , ownerState  })=>{
    const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
    return _extendsDefault.default({
        position: 'relative',
        borderRadius: theme.shape.borderRadius,
        [`&:hover .${_outlinedInputClassesDefault.default.notchedOutline}`]: {
            borderColor: theme.palette.text.primary
        },
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
            [`&:hover .${_outlinedInputClassesDefault.default.notchedOutline}`]: {
                borderColor
            }
        },
        [`&.${_outlinedInputClassesDefault.default.focused} .${_outlinedInputClassesDefault.default.notchedOutline}`]: {
            borderColor: theme.palette[ownerState.color].main,
            borderWidth: 2
        },
        [`&.${_outlinedInputClassesDefault.default.error} .${_outlinedInputClassesDefault.default.notchedOutline}`]: {
            borderColor: theme.palette.error.main
        },
        [`&.${_outlinedInputClassesDefault.default.disabled} .${_outlinedInputClassesDefault.default.notchedOutline}`]: {
            borderColor: theme.palette.action.disabled
        }
    }, ownerState.startAdornment && {
        paddingLeft: 14
    }, ownerState.endAdornment && {
        paddingRight: 14
    }, ownerState.multiline && _extendsDefault.default({
        padding: '16.5px 14px'
    }, ownerState.size === 'small' && {
        padding: '8.5px 14px'
    }));
});
const NotchedOutlineRoot = _styledDefault.default(_notchedOutlineDefault.default, {
    name: 'MuiOutlinedInput',
    slot: 'NotchedOutline',
    overridesResolver: (props, styles)=>styles.notchedOutline
})(({ theme  })=>({
        borderColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'
    })
);
const OutlinedInputInput = _styledDefault.default(_inputBase.InputBaseComponent, {
    name: 'MuiOutlinedInput',
    slot: 'Input',
    overridesResolver: _inputBase.inputOverridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        padding: '16.5px 14px',
        '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
            caretColor: theme.palette.mode === 'light' ? null : '#fff',
            borderRadius: 'inherit'
        }
    }, ownerState.size === 'small' && {
        padding: '8.5px 14px'
    }, ownerState.multiline && {
        padding: 0
    }, ownerState.startAdornment && {
        paddingLeft: 0
    }, ownerState.endAdornment && {
        paddingRight: 0
    })
);
const OutlinedInput = /*#__PURE__*/ _react.forwardRef(function OutlinedInput(inProps, ref) {
    var _React$Fragment;
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiOutlinedInput'
    });
    const { components ={} , fullWidth =false , inputComponent ='input' , label , multiline =false , notched , type ='text'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const classes = useUtilityClasses(props);
    const muiFormControl = _useFormControlDefault.default();
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'required'
        ]
    });
    return /*#__PURE__*/ _jsxRuntime.jsx(_inputBaseDefault.default, _extendsDefault.default({
        components: _extendsDefault.default({
            Root: OutlinedInputRoot,
            Input: OutlinedInputInput
        }, components),
        renderSuffix: (state)=>/*#__PURE__*/ _jsxRuntime.jsx(NotchedOutlineRoot, {
                className: classes.notchedOutline,
                label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
                    children: [
                        label,
                        "\xA0",
                        '*'
                    ]
                })) : label,
                notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
            })
        ,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
    }, other, {
        classes: _extendsDefault.default({}, classes, {
            notchedOutline: null
        })
    }));
});
OutlinedInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * End `InputAdornment` for this component.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */ inputComponent: _propTypesDefault.default.elementType,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * The label of the `input`. It is only used for layout. The actual labelling
   * is handled by `InputLabel`.
   */ label: _propTypesDefault.default.node,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none'
    ]),
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, a [TextareaAutosize](/components/textarea-autosize/) element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * If `true`, the outline is notched to accommodate the label.
   */ notched: _propTypesDefault.default.bool,
    /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Start `InputAdornment` for this component.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
OutlinedInput.muiName = 'Input';
exports.default = OutlinedInput;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","@mui/base":"656dE","./NotchedOutline":"1bOLZ","../FormControl/useFormControl":"4Clb9","../FormControl/formControlState":"7wKpz","../styles/styled":"32xTg","./outlinedInputClasses":"5G5nQ","../InputBase/InputBase":"h8zen","../styles/useThemeProps":"dewuS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1bOLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _jsxRuntime = require("react/jsx-runtime");
var _span;
const _excluded = [
    "children",
    "classes",
    "className",
    "label",
    "notched"
];
const NotchedOutlineRoot = _styledDefault.default('fieldset')({
    textAlign: 'left',
    position: 'absolute',
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: '0 8px',
    pointerEvents: 'none',
    borderRadius: 'inherit',
    borderStyle: 'solid',
    borderWidth: 1,
    overflow: 'hidden',
    minWidth: '0%'
});
const NotchedOutlineLegend = _styledDefault.default('legend')(({ ownerState , theme  })=>_extendsDefault.default({
        float: 'unset',
        // Fix conflict with bootstrap
        overflow: 'hidden'
    }, !ownerState.withLabel && {
        padding: 0,
        lineHeight: '11px',
        // sync with `height` in `legend` styles
        transition: theme.transitions.create('width', {
            duration: 150,
            easing: theme.transitions.easing.easeOut
        })
    }, ownerState.withLabel && _extendsDefault.default({
        display: 'block',
        // Fix conflict with normalize.css and sanitize.css
        width: 'auto',
        // Fix conflict with bootstrap
        padding: 0,
        height: 11,
        // sync with `lineHeight` in `legend` styles
        fontSize: '0.75em',
        visibility: 'hidden',
        maxWidth: 0.01,
        transition: theme.transitions.create('max-width', {
            duration: 50,
            easing: theme.transitions.easing.easeOut
        }),
        whiteSpace: 'nowrap',
        '& > span': {
            paddingLeft: 5,
            paddingRight: 5,
            display: 'inline-block',
            opacity: 0,
            visibility: 'visible'
        }
    }, ownerState.notched && {
        maxWidth: '100%',
        transition: theme.transitions.create('max-width', {
            duration: 100,
            easing: theme.transitions.easing.easeOut,
            delay: 50
        })
    }))
);
function NotchedOutline(props) {
    const { className , label , notched  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const withLabel = label != null && label !== '';
    const ownerState = _extendsDefault.default({}, props, {
        notched,
        withLabel
    });
    return /*#__PURE__*/ _jsxRuntime.jsx(NotchedOutlineRoot, _extendsDefault.default({
        "aria-hidden": true,
        className: className,
        ownerState: ownerState
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(NotchedOutlineLegend, {
            ownerState: ownerState,
            children: withLabel ? /*#__PURE__*/ _jsxRuntime.jsx("span", {
                children: label
            }) : _span || (_span = /*#__PURE__*/ _jsxRuntime.jsx("span", {
                className: "notranslate",
                children: "\u200B"
            }))
        })
    }));
}
exports.default = NotchedOutline;
NotchedOutline.propTypes = {
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The label.
   */ label: _propTypesDefault.default.node,
    /**
   * If `true`, the outline is notched to accommodate the label.
   */ notched: _propTypesDefault.default.bool.isRequired,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object
};

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","../styles/styled":"32xTg","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5G5nQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOutlinedInputUtilityClass", ()=>getOutlinedInputUtilityClass
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _base = require("@mui/base");
var _inputBase = require("../InputBase");
function getOutlinedInputUtilityClass(slot) {
    return _base.generateUtilityClass('MuiOutlinedInput', slot);
}
const outlinedInputClasses = _extendsDefault.default({}, _inputBase.inputBaseClasses, _base.generateUtilityClasses('MuiOutlinedInput', [
    'root',
    'notchedOutline',
    'input'
]));
exports.default = outlinedInputClasses;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/base":"656dE","../InputBase":"1ezJA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Ew25":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputLabelDefault.default
);
parcelHelpers.export(exports, "inputLabelClasses", ()=>_inputLabelClassesDefault.default
);
var _inputLabel = require("./InputLabel");
var _inputLabelDefault = parcelHelpers.interopDefault(_inputLabel);
var _inputLabelClasses = require("./inputLabelClasses");
var _inputLabelClassesDefault = parcelHelpers.interopDefault(_inputLabelClasses);
parcelHelpers.exportAll(_inputLabelClasses, exports);

},{"./InputLabel":"46S1S","./inputLabelClasses":"f6W8n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46S1S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _base = require("@mui/base");
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _formLabel = require("../FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _inputLabelClasses = require("./inputLabelClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "disableAnimation",
    "margin",
    "shrink",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , formControl , size , shrink , disableAnimation , variant , required  } = ownerState;
    const slots = {
        root: [
            'root',
            formControl && 'formControl',
            !disableAnimation && 'animated',
            shrink && 'shrink',
            size === 'small' && 'sizeSmall',
            variant
        ],
        asterisk: [
            required && 'asterisk'
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _inputLabelClasses.getInputLabelUtilityClasses, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const InputLabelRoot = _styledDefault.default(_formLabelDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiInputLabel',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            {
                [`& .${_formLabel.formLabelClasses.asterisk}`]: styles.asterisk
            },
            styles.root,
            ownerState.formControl && styles.formControl,
            ownerState.size === 'small' && styles.sizeSmall,
            ownerState.shrink && styles.shrink,
            !ownerState.disableAnimation && styles.animated,
            styles[ownerState.variant]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'block',
        transformOrigin: 'top left',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        maxWidth: '100%'
    }, ownerState.formControl && {
        position: 'absolute',
        left: 0,
        top: 0,
        // slight alteration to spec spacing to match visual spec result
        transform: 'translate(0, 20px) scale(1)'
    }, ownerState.size === 'small' && {
        // Compensation for the `Input.inputSizeSmall` style.
        transform: 'translate(0, 17px) scale(1)'
    }, ownerState.shrink && {
        transform: 'translate(0, -1.5px) scale(0.75)',
        transformOrigin: 'top left',
        maxWidth: '133%'
    }, !ownerState.disableAnimation && {
        transition: theme.transitions.create([
            'color',
            'transform',
            'max-width'
        ], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
        })
    }, ownerState.variant === 'filled' && _extendsDefault.default({
        // Chrome's autofill feature gives the input field a yellow background.
        // Since the input field is behind the label in the HTML tree,
        // the input field is drawn last and hides the label with an opaque background color.
        // zIndex: 1 will raise the label above opaque background-colors of input.
        zIndex: 1,
        pointerEvents: 'none',
        transform: 'translate(12px, 16px) scale(1)',
        maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
        transform: 'translate(12px, 13px) scale(1)'
    }, ownerState.shrink && _extendsDefault.default({
        userSelect: 'none',
        pointerEvents: 'auto',
        transform: 'translate(12px, 7px) scale(0.75)',
        maxWidth: 'calc(133% - 24px)'
    }, ownerState.size === 'small' && {
        transform: 'translate(12px, 4px) scale(0.75)'
    })), ownerState.variant === 'outlined' && _extendsDefault.default({
        // see comment above on filled.zIndex
        zIndex: 1,
        pointerEvents: 'none',
        transform: 'translate(14px, 16px) scale(1)',
        maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
        transform: 'translate(14px, 9px) scale(1)'
    }, ownerState.shrink && {
        userSelect: 'none',
        pointerEvents: 'auto',
        maxWidth: 'calc(133% - 24px)',
        transform: 'translate(14px, -9px) scale(0.75)'
    }))
);
const InputLabel = /*#__PURE__*/ _react.forwardRef(function InputLabel(inProps, ref) {
    const props = _useThemePropsDefault.default({
        name: 'MuiInputLabel',
        props: inProps
    });
    const { disableAnimation =false , shrink: shrinkProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const muiFormControl = _useFormControlDefault.default();
    let shrink = shrinkProp;
    if (typeof shrink === 'undefined' && muiFormControl) shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'size',
            'variant',
            'required'
        ]
    });
    const ownerState = _extendsDefault.default({}, props, {
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(InputLabelRoot, _extendsDefault.default({
        "data-shrink": shrink,
        ownerState: ownerState,
        ref: ref
    }, other, {
        classes: classes
    }));
});
InputLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'error',
            'info',
            'primary',
            'secondary',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the transition animation is disabled.
   * @default false
   */ disableAnimation: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` of this label is focused.
   */ focused: _propTypesDefault.default.bool,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */ margin: _propTypesDefault.default.oneOf([
        'dense'
    ]),
    /**
   * if `true`, the label will indicate that the `input` is required.
   */ required: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is shrunk.
   */ shrink: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
exports.default = InputLabel;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/base":"656dE","../FormControl/formControlState":"7wKpz","../FormControl/useFormControl":"4Clb9","../FormLabel":"d9Vfs","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./inputLabelClasses":"f6W8n","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9Vfs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formLabelDefault.default
);
parcelHelpers.export(exports, "formLabelClasses", ()=>_formLabelClassesDefault.default
);
var _formLabel = require("./FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
parcelHelpers.exportAll(_formLabel, exports);
var _formLabelClasses = require("./formLabelClasses");
var _formLabelClassesDefault = parcelHelpers.interopDefault(_formLabelClasses);
parcelHelpers.exportAll(_formLabelClasses, exports);

},{"./FormLabel":"lspJh","./formLabelClasses":"folaO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lspJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormLabelRoot", ()=>FormLabelRoot
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _formLabelClasses = require("./formLabelClasses");
var _formLabelClassesDefault = parcelHelpers.interopDefault(_formLabelClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "disabled",
    "error",
    "filled",
    "focused",
    "required"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , color , focused , disabled , error , filled , required  } = ownerState;
    const slots = {
        root: [
            'root',
            `color${_capitalizeDefault.default(color)}`,
            disabled && 'disabled',
            error && 'error',
            filled && 'filled',
            focused && 'focused',
            required && 'required'
        ],
        asterisk: [
            'asterisk',
            error && 'error'
        ]
    };
    return _base.unstable_composeClasses(slots, _formLabelClasses.getFormLabelUtilityClasses, classes);
};
const FormLabelRoot = _styledDefault.default('label', {
    name: 'MuiFormLabel',
    slot: 'Root',
    overridesResolver: ({ ownerState  }, styles)=>{
        return _extendsDefault.default({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        color: theme.palette.text.secondary
    }, theme.typography.body1, {
        lineHeight: '1.4375em',
        padding: 0,
        position: 'relative',
        [`&.${_formLabelClassesDefault.default.focused}`]: {
            color: theme.palette[ownerState.color].main
        },
        [`&.${_formLabelClassesDefault.default.disabled}`]: {
            color: theme.palette.text.disabled
        },
        [`&.${_formLabelClassesDefault.default.error}`]: {
            color: theme.palette.error.main
        }
    })
);
const AsteriskComponent = _styledDefault.default('span', {
    name: 'MuiFormLabel',
    slot: 'Asterisk',
    overridesResolver: (props, styles)=>styles.asterisk
})(({ theme  })=>({
        [`&.${_formLabelClassesDefault.default.error}`]: {
            color: theme.palette.error.main
        }
    })
);
const FormLabel = /*#__PURE__*/ _react.forwardRef(function FormLabel(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFormLabel'
    });
    const { children , className , component ='label'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const muiFormControl = _useFormControlDefault.default();
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'color',
            'required',
            'focused',
            'disabled',
            'error',
            'filled'
        ]
    });
    const ownerState = _extendsDefault.default({}, props, {
        color: fcs.color || 'primary',
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(FormLabelRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other, {
        children: [
            children,
            fcs.required && /*#__PURE__*/ _jsxRuntime.jsxs(AsteriskComponent, {
                ownerState: ownerState,
                "aria-hidden": true,
                className: classes.asterisk,
                children: [
                    "\u2009",
                    '*'
                ]
            })
        ]
    }));
});
FormLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'error',
            'info',
            'primary',
            'secondary',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the label should be displayed in a disabled state.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the label should use filled classes key.
   */ filled: _propTypesDefault.default.bool,
    /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */ focused: _propTypesDefault.default.bool,
    /**
   * If `true`, the label will indicate that the `input` is required.
   */ required: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = FormLabel;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../FormControl/formControlState":"7wKpz","../FormControl/useFormControl":"4Clb9","../utils/capitalize":"lwNtZ","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./formLabelClasses":"folaO","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"folaO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormLabelUtilityClasses", ()=>getFormLabelUtilityClasses
);
var _base = require("@mui/base");
function getFormLabelUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiFormLabel', slot);
}
const formLabelClasses = _base.generateUtilityClasses('MuiFormLabel', [
    'root',
    'colorSecondary',
    'focused',
    'disabled',
    'error',
    'filled',
    'required',
    'asterisk'
]);
exports.default = formLabelClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6W8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputLabelUtilityClasses", ()=>getInputLabelUtilityClasses
);
var _base = require("@mui/base");
function getInputLabelUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiInputLabel', slot);
}
const inputLabelClasses = _base.generateUtilityClasses('MuiInputLabel', [
    'root',
    'focused',
    'disabled',
    'error',
    'required',
    'asterisk',
    'formControl',
    'sizeSmall',
    'shrink',
    'animated',
    'standard',
    'filled',
    'outlined'
]);
exports.default = inputLabelClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2FZGq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formControlDefault.default
);
parcelHelpers.export(exports, "useFormControl", ()=>_useFormControlDefault.default
);
parcelHelpers.export(exports, "formControlClasses", ()=>_formControlClassesDefault.default
);
var _formControl = require("./FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _useFormControl = require("./useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _formControlClasses = require("./formControlClasses");
var _formControlClassesDefault = parcelHelpers.interopDefault(_formControlClasses);
parcelHelpers.exportAll(_formControlClasses, exports);

},{"./FormControl":"lmybm","./useFormControl":"4Clb9","./formControlClasses":"1DbZj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmybm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _utils = require("../InputBase/utils");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _isMuiElement = require("../utils/isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _formControlClasses = require("./formControlClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "disabled",
    "error",
    "focused",
    "fullWidth",
    "hiddenLabel",
    "margin",
    "required",
    "size",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , margin , fullWidth  } = ownerState;
    const slots = {
        root: [
            'root',
            margin !== 'none' && `margin${_capitalizeDefault.default(margin)}`,
            fullWidth && 'fullWidth'
        ]
    };
    return _base.unstable_composeClasses(slots, _formControlClasses.getFormControlUtilityClasses, classes);
};
const FormControlRoot = _styledDefault.default('div', {
    name: 'MuiFormControl',
    slot: 'Root',
    overridesResolver: ({ ownerState  }, styles)=>{
        return _extendsDefault.default({}, styles.root, styles[`margin${_capitalizeDefault.default(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'inline-flex',
        flexDirection: 'column',
        position: 'relative',
        // Reset fieldset default style.
        minWidth: 0,
        padding: 0,
        margin: 0,
        border: 0,
        verticalAlign: 'top'
    }, ownerState.margin === 'normal' && {
        marginTop: 16,
        marginBottom: 8
    }, ownerState.margin === 'dense' && {
        marginTop: 8,
        marginBottom: 4
    }, ownerState.fullWidth && {
        width: '100%'
    })
);
/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 *  - FormLabel
 *  - FormHelperText
 *  - Input
 *  - InputLabel
 *
 * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
 */ const FormControl = /*#__PURE__*/ _react.forwardRef(function FormControl(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFormControl'
    });
    const { children , className , color ='primary' , component ='div' , disabled =false , error =false , focused: visuallyFocused , fullWidth =false , hiddenLabel =false , margin ='none' , required =false , size ='medium' , variant ='outlined'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    const [adornedStart, setAdornedStart] = _react.useState(()=>{
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialAdornedStart = false;
        if (children) _react.Children.forEach(children, (child)=>{
            if (!_isMuiElementDefault.default(child, [
                'Input',
                'Select'
            ])) return;
            const input = _isMuiElementDefault.default(child, [
                'Select'
            ]) ? child.props.input : child;
            if (input && _utils.isAdornedStart(input.props)) initialAdornedStart = true;
        });
        return initialAdornedStart;
    });
    const [filled, setFilled] = _react.useState(()=>{
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialFilled = false;
        if (children) _react.Children.forEach(children, (child)=>{
            if (!_isMuiElementDefault.default(child, [
                'Input',
                'Select'
            ])) return;
            if (_utils.isFilled(child.props, true)) initialFilled = true;
        });
        return initialFilled;
    });
    const [focusedState, setFocused] = _react.useState(false);
    if (disabled && focusedState) setFocused(false);
    const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const registeredInput = _react.useRef(false);
        registerEffect = ()=>{
            if (registeredInput.current) console.error([
                'MUI: There are multiple `InputBase` components inside a FormControl.',
                'This creates visual inconsistencies, only use one `InputBase`.'
            ].join('\n'));
            registeredInput.current = true;
            return ()=>{
                registeredInput.current = false;
            };
        };
    }
    const onFilled = _react.useCallback(()=>{
        setFilled(true);
    }, []);
    const onEmpty = _react.useCallback(()=>{
        setFilled(false);
    }, []);
    const childContext = {
        adornedStart,
        setAdornedStart,
        color,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: ()=>{
            setFocused(false);
        },
        onEmpty,
        onFilled,
        onFocus: ()=>{
            setFocused(true);
        },
        registerEffect,
        required,
        variant
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(_formControlContextDefault.default.Provider, {
        value: childContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(FormControlRoot, _extendsDefault.default({
            as: component,
            ownerState: ownerState,
            className: _clsxDefault.default(classes.root, className),
            ref: ref
        }, other, {
            children: children
        }))
    });
});
FormControl.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is displayed in focused state.
   */ focused: _propTypesDefault.default.bool,
    /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */ hiddenLabel: _propTypesDefault.default.bool,
    /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */ margin: _propTypesDefault.default.oneOf([
        'dense',
        'none',
        'normal'
    ]),
    /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */ required: _propTypesDefault.default.bool,
    /**
   * The size of the component.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'outlined'
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
exports.default = FormControl;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","../InputBase/utils":"7rSSU","../utils/capitalize":"lwNtZ","../utils/isMuiElement":"guro1","./FormControlContext":"iYyu4","./formControlClasses":"1DbZj","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1DbZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormControlUtilityClasses", ()=>getFormControlUtilityClasses
);
var _base = require("@mui/base");
function getFormControlUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiFormControl', slot);
}
const formControlClasses = _base.generateUtilityClasses('MuiFormControl', [
    'root',
    'marginNone',
    'marginNormal',
    'marginDense',
    'fullWidth',
    'disabled'
]);
exports.default = formControlClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hp8IL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formHelperTextDefault.default
);
parcelHelpers.export(exports, "formHelperTextClasses", ()=>_formHelperTextClassesDefault.default
);
var _formHelperText = require("./FormHelperText");
var _formHelperTextDefault = parcelHelpers.interopDefault(_formHelperText);
var _formHelperTextClasses = require("./formHelperTextClasses");
var _formHelperTextClassesDefault = parcelHelpers.interopDefault(_formHelperTextClasses);
parcelHelpers.exportAll(_formHelperTextClasses, exports);

},{"./FormHelperText":"civ4d","./formHelperTextClasses":"3EgA1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"civ4d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _formHelperTextClasses = require("./formHelperTextClasses");
var _formHelperTextClassesDefault = parcelHelpers.interopDefault(_formHelperTextClasses);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _jsxRuntime = require("react/jsx-runtime");
var _span;
const _excluded = [
    "children",
    "className",
    "component",
    "disabled",
    "error",
    "filled",
    "focused",
    "margin",
    "required",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , contained , size , disabled , error , filled , focused , required  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            error && 'error',
            size && `size${_capitalizeDefault.default(size)}`,
            contained && 'contained',
            focused && 'focused',
            filled && 'filled',
            required && 'required'
        ]
    };
    return _base.unstable_composeClasses(slots, _formHelperTextClasses.getFormHelperTextUtilityClasses, classes);
};
const FormHelperTextRoot = _styledDefault.default('p', {
    name: 'MuiFormHelperText',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.size && styles[`size${_capitalizeDefault.default(ownerState.size)}`],
            ownerState.contained && styles.contained,
            ownerState.filled && styles.filled
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        color: theme.palette.text.secondary
    }, theme.typography.caption, {
        textAlign: 'left',
        marginTop: 3,
        marginRight: 0,
        marginBottom: 0,
        marginLeft: 0,
        [`&.${_formHelperTextClassesDefault.default.disabled}`]: {
            color: theme.palette.text.disabled
        },
        [`&.${_formHelperTextClassesDefault.default.error}`]: {
            color: theme.palette.error.main
        }
    }, ownerState.size === 'small' && {
        marginTop: 4
    }, ownerState.contained && {
        marginLeft: 14,
        marginRight: 14
    })
);
const FormHelperText = /*#__PURE__*/ _react.forwardRef(function FormHelperText(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFormHelperText'
    });
    const { children , className , component ='p'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const muiFormControl = _useFormControlDefault.default();
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'variant',
            'size',
            'disabled',
            'error',
            'filled',
            'focused',
            'required'
        ]
    });
    const ownerState = _extendsDefault.default({}, props, {
        component,
        contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(FormHelperTextRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other, {
        children: children === ' ' ? _span || (_span = /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: "notranslate",
            children: "\u200B"
        })) : children
    }));
});
FormHelperText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the helper text should be displayed in a disabled state.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, helper text should be displayed in an error state.
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the helper text should use filled classes key.
   */ filled: _propTypesDefault.default.bool,
    /**
   * If `true`, the helper text should use focused classes key.
   */ focused: _propTypesDefault.default.bool,
    /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */ margin: _propTypesDefault.default.oneOf([
        'dense'
    ]),
    /**
   * If `true`, the helper text should use required classes key.
   */ required: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
exports.default = FormHelperText;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../FormControl/formControlState":"7wKpz","../FormControl/useFormControl":"4Clb9","../styles/styled":"32xTg","../utils/capitalize":"lwNtZ","./formHelperTextClasses":"3EgA1","../styles/useThemeProps":"dewuS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3EgA1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormHelperTextUtilityClasses", ()=>getFormHelperTextUtilityClasses
);
var _base = require("@mui/base");
function getFormHelperTextUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiFormHelperText', slot);
}
const formHelperTextClasses = _base.generateUtilityClasses('MuiFormHelperText', [
    'root',
    'error',
    'disabled',
    'sizeSmall',
    'sizeMedium',
    'contained',
    'focused',
    'filled',
    'required'
]);
exports.default = formHelperTextClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFmVj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_selectDefault.default
);
parcelHelpers.export(exports, "selectClasses", ()=>_selectClassesDefault.default
);
var _select = require("./Select");
var _selectDefault = parcelHelpers.interopDefault(_select);
var _selectClasses = require("./selectClasses");
var _selectClassesDefault = parcelHelpers.interopDefault(_selectClasses);
parcelHelpers.exportAll(_selectClasses, exports);

},{"./Select":"eh7Ei","./selectClasses":"3AQwB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eh7Ei":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _selectInput = require("./SelectInput");
var _selectInputDefault = parcelHelpers.interopDefault(_selectInput);
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _arrowDropDown = require("../internal/svg-icons/ArrowDropDown");
var _arrowDropDownDefault = parcelHelpers.interopDefault(_arrowDropDown);
var _input = require("../Input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _nativeSelectInput = require("../NativeSelect/NativeSelectInput");
var _nativeSelectInputDefault = parcelHelpers.interopDefault(_nativeSelectInput);
var _filledInput = require("../FilledInput");
var _filledInputDefault = parcelHelpers.interopDefault(_filledInput);
var _outlinedInput = require("../OutlinedInput");
var _outlinedInputDefault = parcelHelpers.interopDefault(_outlinedInput);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _jsxRuntime = require("react/jsx-runtime");
var _StyledInput, _StyledFilledInput;
const _excluded = [
    "autoWidth",
    "children",
    "classes",
    "className",
    "defaultOpen",
    "displayEmpty",
    "IconComponent",
    "id",
    "input",
    "inputProps",
    "label",
    "labelId",
    "MenuProps",
    "multiple",
    "native",
    "onClose",
    "onOpen",
    "open",
    "renderValue",
    "SelectDisplayProps",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    return classes;
};
const styledRootConfig = {
    name: 'MuiSelect',
    overridesResolver: (props, styles)=>styles.root
    ,
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) && prop !== 'variant'
    ,
    slot: 'Root'
};
const StyledInput = _styledDefault.default(_inputDefault.default, styledRootConfig)('');
const StyledOutlinedInput = _styledDefault.default(_outlinedInputDefault.default, styledRootConfig)('');
const StyledFilledInput = _styledDefault.default(_filledInputDefault.default, styledRootConfig)('');
const Select = /*#__PURE__*/ _react.forwardRef(function Select(inProps, ref) {
    const props = _useThemePropsDefault.default({
        name: 'MuiSelect',
        props: inProps
    });
    const { autoWidth =false , children , classes: classesProp = {} , className , defaultOpen =false , displayEmpty =false , IconComponent =_arrowDropDownDefault.default , id , input , inputProps , label , labelId , MenuProps , multiple =false , native =false , onClose , onOpen , open , renderValue , SelectDisplayProps , variant: variantProp = 'outlined'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const inputComponent = native ? _nativeSelectInputDefault.default : _selectInputDefault.default;
    const muiFormControl = _useFormControlDefault.default();
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'variant'
        ]
    });
    const variant = fcs.variant || variantProp;
    const InputComponent = input || ({
        standard: _StyledInput || (_StyledInput = /*#__PURE__*/ _jsxRuntime.jsx(StyledInput, {})),
        outlined: /*#__PURE__*/ _jsxRuntime.jsx(StyledOutlinedInput, {
            label: label
        }),
        filled: _StyledFilledInput || (_StyledFilledInput = /*#__PURE__*/ _jsxRuntime.jsx(StyledFilledInput, {}))
    })[variant];
    const ownerState = _extendsDefault.default({}, props, {
        variant,
        classes: classesProp
    });
    const classes = useUtilityClasses(ownerState);
    const inputComponentRef = _useForkRefDefault.default(ref, InputComponent.ref);
    return /*#__PURE__*/ _react.cloneElement(InputComponent, _extendsDefault.default({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extendsDefault.default({
            children,
            IconComponent,
            variant,
            type: undefined,
            // We render a select. We can ignore the type provided by the `Input`.
            multiple
        }, native ? {
            id
        } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: _extendsDefault.default({
                id
            }, SelectDisplayProps)
        }, inputProps, {
            classes: inputProps ? _utils.deepmerge(classes, inputProps.classes) : classes
        }, input ? input.props.inputProps : {})
    }, multiple && native && variant === 'outlined' ? {
        notched: true
    } : {}, {
        ref: inputComponentRef,
        className: _clsxDefault.default(InputComponent.props.className, className),
        variant
    }, other));
});
Select.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   * @default false
   */ autoWidth: _propTypesDefault.default.bool,
    /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * @default {}
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
   * You can only use it when the `native` prop is `false` (default).
   * @default false
   */ defaultOpen: _propTypesDefault.default.bool,
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
   * returns the value to be displayed when no items are selected.
   *
   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
   * The label should either be hidden or forced to a shrunk state.
   * @default false
   */ displayEmpty: _propTypesDefault.default.bool,
    /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */ IconComponent: _propTypesDefault.default.elementType,
    /**
   * The `id` of the wrapper element or the `select` element when `native`.
   */ id: _propTypesDefault.default.string,
    /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */ input: _propTypesDefault.default.element,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */ inputProps: _propTypesDefault.default.object,
    /**
   * See [OutlinedInput#label](/api/outlined-input/#props)
   */ label: _propTypesDefault.default.node,
    /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */ labelId: _propTypesDefault.default.string,
    /**
   * Props applied to the [`Menu`](/api/menu/) element.
   */ MenuProps: _propTypesDefault.default.object,
    /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */ multiple: _propTypesDefault.default.bool,
    /**
   * If `true`, the component uses a native `select` element.
   * @default false
   */ native: _propTypesDefault.default.bool,
    /**
   * Callback fired when a menu item is selected.
   *
   * @param {SelectChangeEvent<T>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */ onOpen: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   * You can only use it when the `native` prop is `false` (default).
   */ open: _propTypesDefault.default.bool,
    /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */ renderValue: _propTypesDefault.default.func,
    /**
   * Props applied to the clickable div element.
   */ SelectDisplayProps: _propTypesDefault.default.object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The `input` value. Providing an empty string will select no options.
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   *
   * If the value is an object it must have reference equality with the option in order to be selected.
   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
   */ value: _propTypesDefault.default.any,
    /**
   * The variant to use.
   * @default 'outlined'
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
Select.muiName = 'Select';
exports.default = Select;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","./SelectInput":"6bh8C","../FormControl/formControlState":"7wKpz","../FormControl/useFormControl":"4Clb9","../internal/svg-icons/ArrowDropDown":"9FEul","../Input":"4JIyx","../NativeSelect/NativeSelectInput":"doDRo","../FilledInput":"fn85o","../OutlinedInput":"jaFpb","../styles/useThemeProps":"dewuS","../utils/useForkRef":"Q1vCZ","../styles/styled":"32xTg","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6bh8C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _ownerDocument = require("../utils/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _menu = require("../Menu/Menu");
var _menuDefault = parcelHelpers.interopDefault(_menu);
var _nativeSelectInput = require("../NativeSelect/NativeSelectInput");
var _utils1 = require("../InputBase/utils");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _selectClasses = require("./selectClasses");
var _selectClassesDefault = parcelHelpers.interopDefault(_selectClasses);
var _jsxRuntime = require("react/jsx-runtime");
var _span;
const _excluded = [
    "aria-describedby",
    "aria-label",
    "autoFocus",
    "autoWidth",
    "children",
    "className",
    "defaultOpen",
    "defaultValue",
    "disabled",
    "displayEmpty",
    "IconComponent",
    "inputRef",
    "labelId",
    "MenuProps",
    "multiple",
    "name",
    "onBlur",
    "onChange",
    "onClose",
    "onFocus",
    "onOpen",
    "open",
    "readOnly",
    "renderValue",
    "SelectDisplayProps",
    "tabIndex",
    "type",
    "value",
    "variant"
];
const SelectSelect = _styledDefault.default('div', {
    name: 'MuiSelect',
    slot: 'Select',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            {
                [`&.${_selectClassesDefault.default.select}`]: styles.select
            },
            {
                [`&.${_selectClassesDefault.default.select}`]: styles[ownerState.variant]
            },
            {
                [`&.${_selectClassesDefault.default.multiple}`]: styles.multiple
            }
        ];
    }
})(_nativeSelectInput.nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${_selectClassesDefault.default.select}`]: {
        height: 'auto',
        // Resets for multiple select with chips
        minHeight: '1.4375em',
        // Required for select\text-field height consistency
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden'
    }
});
const SelectIcon = _styledDefault.default('svg', {
    name: 'MuiSelect',
    slot: 'Icon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.icon,
            ownerState.variant && styles[`icon${_capitalizeDefault.default(ownerState.variant)}`],
            ownerState.open && styles.iconOpen
        ];
    }
})(_nativeSelectInput.nativeSelectIconStyles);
const SelectNativeInput = _styledDefault.default('input', {
    shouldForwardProp: (prop)=>_styled.slotShouldForwardProp(prop) && prop !== 'classes'
    ,
    name: 'MuiSelect',
    slot: 'NativeInput',
    overridesResolver: (props, styles)=>styles.nativeInput
})({
    bottom: 0,
    left: 0,
    position: 'absolute',
    opacity: 0,
    pointerEvents: 'none',
    width: '100%',
    boxSizing: 'border-box'
});
function areEqualValues(a, b) {
    if (typeof b === 'object' && b !== null) return a === b;
     // The value could be a number, the DOM will stringify it anyway.
    return String(a) === String(b);
}
function isEmpty(display) {
    return display == null || typeof display === 'string' && !display.trim();
}
const useUtilityClasses = (ownerState)=>{
    const { classes , variant , disabled , multiple , open  } = ownerState;
    const slots = {
        select: [
            'select',
            variant,
            disabled && 'disabled',
            multiple && 'multiple'
        ],
        icon: [
            'icon',
            `icon${_capitalizeDefault.default(variant)}`,
            open && 'iconOpen',
            disabled && 'disabled'
        ],
        nativeInput: [
            'nativeInput'
        ]
    };
    return _base.unstable_composeClasses(slots, _selectClasses.getSelectUtilityClasses, classes);
};
/**
 * @ignore - internal component.
 */ const SelectInput = /*#__PURE__*/ _react.forwardRef(function SelectInput(props, ref) {
    const { 'aria-describedby': ariaDescribedby , 'aria-label': ariaLabel , autoFocus , autoWidth , children , className , defaultOpen , defaultValue , disabled , displayEmpty , IconComponent , inputRef: inputRefProp , labelId , MenuProps ={} , multiple , name , onBlur , onChange , onClose , onFocus , onOpen , open: openProp , readOnly , renderValue , SelectDisplayProps ={} , tabIndex: tabIndexProp , value: valueProp , variant ='standard'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [value, setValueState] = _useControlledDefault.default({
        controlled: valueProp,
        default: defaultValue,
        name: 'Select'
    });
    const [openState, setOpenState] = _useControlledDefault.default({
        controlled: openProp,
        default: defaultOpen,
        name: 'Select'
    });
    const inputRef = _react.useRef(null);
    const displayRef = _react.useRef(null);
    const [displayNode, setDisplayNode] = _react.useState(null);
    const { current: isOpenControlled  } = _react.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = _react.useState();
    const handleRef = _useForkRefDefault.default(ref, inputRefProp);
    const handleDisplayRef = _react.useCallback((node)=>{
        displayRef.current = node;
        if (node) setDisplayNode(node);
    }, []);
    _react.useImperativeHandle(handleRef, ()=>({
            focus: ()=>{
                displayRef.current.focus();
            },
            node: inputRef.current,
            value
        })
    , [
        value
    ]); // Resize menu on `defaultOpen` automatic toggle.
    _react.useEffect(()=>{
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
            setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
            displayRef.current.focus();
        } // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        displayNode,
        autoWidth
    ]); // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
    // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.
    _react.useEffect(()=>{
        if (autoFocus) displayRef.current.focus();
    }, [
        autoFocus
    ]);
    _react.useEffect(()=>{
        if (!labelId) return undefined;
        const label = _ownerDocumentDefault.default(displayRef.current).getElementById(labelId);
        if (label) {
            const handler = ()=>{
                if (getSelection().isCollapsed) displayRef.current.focus();
            };
            label.addEventListener('click', handler);
            return ()=>{
                label.removeEventListener('click', handler);
            };
        }
        return undefined;
    }, [
        labelId
    ]);
    const update = (open, event)=>{
        if (open) {
            if (onOpen) onOpen(event);
        } else if (onClose) onClose(event);
        if (!isOpenControlled) {
            setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
            setOpenState(open);
        }
    };
    const handleMouseDown = (event)=>{
        // Ignore everything but left-click
        if (event.button !== 0) return;
         // Hijack the default focus behavior.
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
    };
    const handleClose = (event)=>{
        update(false, event);
    };
    const childrenArray = _react.Children.toArray(children); // Support autofill.
    const handleChange = (event)=>{
        const index = childrenArray.map((child)=>child.props.value
        ).indexOf(event.target.value);
        if (index === -1) return;
        const child1 = childrenArray[index];
        setValueState(child1.props.value);
        if (onChange) onChange(event, child1);
    };
    const handleItemClick = (child)=>(event)=>{
            let newValue; // We use the tabindex attribute to signal the available options.
            if (!event.currentTarget.hasAttribute('tabindex')) return;
            if (multiple) {
                newValue = Array.isArray(value) ? value.slice() : [];
                const itemIndex = value.indexOf(child.props.value);
                if (itemIndex === -1) newValue.push(child.props.value);
                else newValue.splice(itemIndex, 1);
            } else newValue = child.props.value;
            if (child.props.onClick) child.props.onClick(event);
            if (value !== newValue) {
                setValueState(newValue);
                if (onChange) {
                    // Redefine target to allow name and value to be read.
                    // This allows seamless integration with the most popular form libraries.
                    // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
                    // Clone the event to not override `target` of the original event.
                    const nativeEvent = event.nativeEvent || event;
                    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                    Object.defineProperty(clonedEvent, 'target', {
                        writable: true,
                        value: {
                            value: newValue,
                            name
                        }
                    });
                    onChange(clonedEvent, child);
                }
            }
            if (!multiple) update(false, event);
        }
    ;
    const handleKeyDown = (event)=>{
        if (!readOnly) {
            const validKeys = [
                ' ',
                'ArrowUp',
                'ArrowDown',
                // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
                'Enter'
            ];
            if (validKeys.indexOf(event.key) !== -1) {
                event.preventDefault();
                update(true, event);
            }
        }
    };
    const open1 = displayNode !== null && openState;
    const handleBlur = (event)=>{
        // if open event.stopImmediatePropagation
        if (!open1 && onBlur) {
            // Preact support, target is read only property on a native event.
            Object.defineProperty(event, 'target', {
                writable: true,
                value: {
                    value,
                    name
                }
            });
            onBlur(event);
        }
    };
    delete other['aria-invalid'];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false; // No need to display any value if the field is empty.
    if (_utils1.isFilled({
        value
    }) || displayEmpty) {
        if (renderValue) display = renderValue(value);
        else computeDisplay = true;
    }
    const items = childrenArray.map((child)=>{
        if (!/*#__PURE__*/ _react.isValidElement(child)) return null;
        if (_reactIs.isFragment(child)) console.error([
            "MUI: The Select component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        let selected;
        if (multiple) {
            if (!Array.isArray(value)) throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.`);
            selected = value.some((v)=>areEqualValues(v, child.props.value)
            );
            if (selected && computeDisplay) displayMultiple.push(child.props.children);
        } else {
            selected = areEqualValues(value, child.props.value);
            if (selected && computeDisplay) displaySingle = child.props.children;
        }
        if (selected) foundMatch = true;
        return /*#__PURE__*/ _react.cloneElement(child, {
            'aria-selected': selected ? 'true' : 'false',
            onClick: handleItemClick(child),
            onKeyUp: (event)=>{
                if (event.key === ' ') // otherwise our MenuItems dispatches a click event
                // it's not behavior of the native <option> and causes
                // the select to close immediately since we open on space keydown
                event.preventDefault();
                if (child.props.onKeyUp) child.props.onKeyUp(event);
            },
            role: 'option',
            selected,
            value: undefined,
            // The value is most likely not a valid HTML attribute.
            'data-value': child.props.value // Instead, we provide it as a data attribute.
        });
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (!foundMatch && !multiple && value !== '') {
            const values = childrenArray.map((child)=>child.props.value
            );
            console.warn([
                `MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ''}component.`,
                "Consider providing a value that matches one of the available options or ''.",
                `The available values are ${values.filter((x)=>x != null
                ).map((x)=>`\`${x}\``
                ).join(', ') || '""'}.`
            ].join('\n'));
        }
    }, [
        foundMatch,
        childrenArray,
        multiple,
        name,
        value
    ]);
    if (computeDisplay) {
        if (multiple) {
            if (displayMultiple.length === 0) display = null;
            else display = displayMultiple.reduce((output, child, index)=>{
                output.push(child);
                if (index < displayMultiple.length - 1) output.push(', ');
                return output;
            }, []);
        } else display = displaySingle;
    } // Avoid performing a layout computation in the render method.
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) menuMinWidth = displayNode.clientWidth;
    let tabIndex;
    if (typeof tabIndexProp !== 'undefined') tabIndex = tabIndexProp;
    else tabIndex = disabled ? null : 0;
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
    const ownerState = _extendsDefault.default({}, props, {
        variant,
        value,
        open: open1
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(SelectSelect, _extendsDefault.default({
                ref: handleDisplayRef,
                tabIndex: tabIndex,
                role: "button",
                "aria-disabled": disabled ? 'true' : undefined,
                "aria-expanded": open1 ? 'true' : 'false',
                "aria-haspopup": "listbox",
                "aria-label": ariaLabel,
                "aria-labelledby": [
                    labelId,
                    buttonId
                ].filter(Boolean).join(' ') || undefined,
                "aria-describedby": ariaDescribedby,
                onKeyDown: handleKeyDown,
                onMouseDown: disabled || readOnly ? null : handleMouseDown,
                onBlur: handleBlur,
                onFocus: onFocus
            }, SelectDisplayProps, {
                ownerState: ownerState,
                className: _clsxDefault.default(classes.select, className, SelectDisplayProps.className) // The id is required for proper a11y
                ,
                id: buttonId,
                children: isEmpty(display) ? _span || (_span = /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "notranslate",
                    children: "\u200B"
                })) : display
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(SelectNativeInput, _extendsDefault.default({
                value: Array.isArray(value) ? value.join(',') : value,
                name: name,
                ref: inputRef,
                "aria-hidden": true,
                onChange: handleChange,
                tabIndex: -1,
                disabled: disabled,
                className: classes.nativeInput,
                autoFocus: autoFocus,
                ownerState: ownerState
            }, other)),
            /*#__PURE__*/ _jsxRuntime.jsx(SelectIcon, {
                as: IconComponent,
                className: classes.icon,
                ownerState: ownerState
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_menuDefault.default, _extendsDefault.default({
                id: `menu-${name || ''}`,
                anchorEl: displayNode,
                open: open1,
                onClose: handleClose,
                anchorOrigin: {
                    vertical: 'bottom',
                    horizontal: 'center'
                },
                transformOrigin: {
                    vertical: 'top',
                    horizontal: 'center'
                }
            }, MenuProps, {
                MenuListProps: _extendsDefault.default({
                    'aria-labelledby': labelId,
                    role: 'listbox',
                    disableListWrap: true
                }, MenuProps.MenuListProps),
                PaperProps: _extendsDefault.default({}, MenuProps.PaperProps, {
                    style: _extendsDefault.default({
                        minWidth: menuMinWidth
                    }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
                }),
                children: items
            }))
        ]
    });
});
SelectInput.propTypes = {
    /**
   * @ignore
   */ 'aria-describedby': _propTypesDefault.default.string,
    /**
   * @ignore
   */ 'aria-label': _propTypesDefault.default.string,
    /**
   * @ignore
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */ autoWidth: _propTypesDefault.default.bool,
    /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * The CSS class name of the select element.
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
   * You can only use it when the `native` prop is `false` (default).
   */ defaultOpen: _propTypesDefault.default.bool,
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the select is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the selected item is displayed even if its value is empty.
   */ displayEmpty: _propTypesDefault.default.bool,
    /**
   * The icon that displays the arrow.
   */ IconComponent: _propTypesDefault.default.elementType.isRequired,
    /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */ inputRef: _utils.refType,
    /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */ labelId: _propTypesDefault.default.string,
    /**
   * Props applied to the [`Menu`](/api/menu/) element.
   */ MenuProps: _propTypesDefault.default.object,
    /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */ multiple: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `select` or hidden `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */ onOpen: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */ renderValue: _propTypesDefault.default.func,
    /**
   * Props applied to the clickable div element.
   */ SelectDisplayProps: _propTypesDefault.default.object,
    /**
   * @ignore
   */ tabIndex: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * @ignore
   */ type: _propTypesDefault.default.any,
    /**
   * The input value.
   */ value: _propTypesDefault.default.any,
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'standard',
        'outlined',
        'filled'
    ])
};
exports.default = SelectInput;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@mui/utils":"cttLn","react":"21dqq","react-is":"7EuwB","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../utils/ownerDocument":"jIL4x","../utils/capitalize":"lwNtZ","../Menu/Menu":"bQNbu","../NativeSelect/NativeSelectInput":"doDRo","../InputBase/utils":"7rSSU","../styles/styled":"32xTg","../utils/useForkRef":"Q1vCZ","../utils/useControlled":"68YU6","./selectClasses":"3AQwB","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQNbu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _menuList = require("../MenuList");
var _menuListDefault = parcelHelpers.interopDefault(_menuList);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _popover = require("../Popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _menuClasses = require("./menuClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onEntering"
], _excluded2 = [
    "autoFocus",
    "children",
    "disableAutoFocusItem",
    "MenuListProps",
    "onClose",
    "open",
    "PaperProps",
    "PopoverClasses",
    "transitionDuration",
    "TransitionProps",
    "variant"
];
const RTL_ORIGIN = {
    vertical: 'top',
    horizontal: 'right'
};
const LTR_ORIGIN = {
    vertical: 'top',
    horizontal: 'left'
};
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        paper: [
            'paper'
        ],
        list: [
            'list'
        ]
    };
    return _base.unstable_composeClasses(slots, _menuClasses.getMenuUtilityClass, classes);
};
const MenuRoot = _styledDefault.default(_popoverDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiMenu',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({});
const MenuPaper = _styledDefault.default(_paperDefault.default, {
    name: 'MuiMenu',
    slot: 'Paper',
    overridesResolver: (props, styles)=>styles.paper
})({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch'
});
const MenuMenuList = _styledDefault.default(_menuListDefault.default, {
    name: 'MuiMenu',
    slot: 'List',
    overridesResolver: (props, styles)=>styles.list
})({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
});
const Menu = /*#__PURE__*/ _react.forwardRef(function Menu(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiMenu'
    });
    const { autoFocus =true , children , disableAutoFocusItem =false , MenuListProps ={} , onClose , open , PaperProps ={} , PopoverClasses , transitionDuration ='auto' , TransitionProps: { onEntering  } = {} , variant ='selectedMenu'  } = props, TransitionProps = _objectWithoutPropertiesLooseDefault.default(props.TransitionProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const theme = _useThemeDefault.default();
    const isRtl = theme.direction === 'rtl';
    const ownerState = _extendsDefault.default({}, props, {
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = _react.useRef(null);
    const handleEntering = (element, isAppearing)=>{
        if (menuListActionsRef.current) menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        if (onEntering) onEntering(element, isAppearing);
    };
    const handleListKeyDown = (event)=>{
        if (event.key === 'Tab') {
            event.preventDefault();
            if (onClose) onClose(event, 'tabKeyDown');
        }
    };
    /**
   * the index of the item should receive focus
   * in a `variant="selectedMenu"` it's the first `selected` item
   * otherwise it's the very first item.
   */ let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback
    _react.Children.map(children, (child, index)=>{
        if (!/*#__PURE__*/ _react.isValidElement(child)) return;
        if (_reactIs.isFragment(child)) console.error([
            "MUI: The Menu component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        if (!child.props.disabled) {
            if (variant === 'selectedMenu' && child.props.selected) activeItemIndex = index;
            else if (activeItemIndex === -1) activeItemIndex = index;
        }
    });
    return /*#__PURE__*/ _jsxRuntime.jsx(MenuRoot, _extendsDefault.default({
        classes: PopoverClasses,
        onClose: onClose,
        anchorOrigin: {
            vertical: 'bottom',
            horizontal: isRtl ? 'right' : 'left'
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extendsDefault.default({
            component: MenuPaper
        }, PaperProps, {
            classes: _extendsDefault.default({}, PaperProps.classes, {
                root: classes.paper
            })
        }),
        className: classes.root,
        open: open,
        ref: ref,
        transitionDuration: transitionDuration,
        TransitionProps: _extendsDefault.default({
            onEntering: handleEntering
        }, TransitionProps),
        ownerState: ownerState
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(MenuMenuList, _extendsDefault.default({
            onKeyDown: handleListKeyDown,
            actions: menuListActionsRef,
            autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
            autoFocusItem: autoFocusItem,
            variant: variant
        }, MenuListProps, {
            className: _clsxDefault.default(classes.list, MenuListProps.className),
            children: children
        }))
    }));
});
Menu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */ anchorEl: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * Menu contents, normally `MenuItem`s.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */ disableAutoFocusItem: _propTypesDefault.default.bool,
    /**
   * Props applied to the [`MenuList`](/api/menu-list/) element.
   * @default {}
   */ MenuListProps: _propTypesDefault.default.object,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * @ignore
   */ PaperProps: _propTypesDefault.default.object,
    /**
   * `classes` prop applied to the [`Popover`](/api/popover/) element.
   */ PopoverClasses: _propTypesDefault.default.object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */ TransitionProps: _propTypesDefault.default.object,
    /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */ variant: _propTypesDefault.default.oneOf([
        'menu',
        'selectedMenu'
    ])
};
exports.default = Menu;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","react-is":"7EuwB","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/utils":"cttLn","../MenuList":"8m6xB","../Paper":"6IiTP","../Popover":"cVP3a","../styles/styled":"32xTg","../styles/useTheme":"5nWMX","../styles/useThemeProps":"dewuS","./menuClasses":"ewQE8","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8m6xB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_menuListDefault.default
);
var _menuList = require("./MenuList");
var _menuListDefault = parcelHelpers.interopDefault(_menuList);

},{"./MenuList":"9sOJB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9sOJB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _ownerDocument = require("../utils/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _list = require("../List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _getScrollbarSize = require("../utils/getScrollbarSize");
var _getScrollbarSizeDefault = parcelHelpers.interopDefault(_getScrollbarSize);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "actions",
    "autoFocus",
    "autoFocusItem",
    "children",
    "className",
    "disabledItemsFocusable",
    "disableListWrap",
    "onKeyDown",
    "variant"
];
function nextItem(list, item, disableListWrap) {
    if (list === item) return list.firstChild;
    if (item && item.nextElementSibling) return item.nextElementSibling;
    return disableListWrap ? null : list.firstChild;
}
function previousItem(list, item, disableListWrap) {
    if (list === item) return disableListWrap ? list.firstChild : list.lastChild;
    if (item && item.previousElementSibling) return item.previousElementSibling;
    return disableListWrap ? null : list.lastChild;
}
function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === undefined) return true;
    let text = nextFocus.innerText;
    if (text === undefined) // jsdom doesn't support innerText
    text = nextFocus.textContent;
    text = text.trim().toLowerCase();
    if (text.length === 0) return false;
    if (textCriteria.repeating) return text[0] === textCriteria.keys[0];
    return text.indexOf(textCriteria.keys.join('')) === 0;
}
function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while(nextFocus){
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
            if (wrappedOnce) return false;
            wrappedOnce = true;
        } // Same logic as useAutocomplete.js
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        else {
            nextFocus.focus();
            return true;
        }
    }
    return false;
}
/**
 * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
 * It's exposed to help customization of the [`Menu`](/api/menu/) component if you
 * use it separately you need to move focus into the component manually. Once
 * the focus is placed inside the component it is fully keyboard accessible.
 */ const MenuList = /*#__PURE__*/ _react.forwardRef(function MenuList(props, ref) {
    const { // private
    // eslint-disable-next-line react/prop-types
    actions , autoFocus =false , autoFocusItem =false , children , className , disabledItemsFocusable =false , disableListWrap =false , onKeyDown , variant ='selectedMenu'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const listRef = _react.useRef(null);
    const textCriteriaRef = _react.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
    });
    _useEnhancedEffectDefault.default(()=>{
        if (autoFocus) listRef.current.focus();
    }, [
        autoFocus
    ]);
    _react.useImperativeHandle(actions, ()=>({
            adjustStyleForScrollbar: (containerElement, theme)=>{
                // Let's ignore that piece of logic if users are already overriding the width
                // of the menu.
                const noExplicitWidth = !listRef.current.style.width;
                if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
                    const scrollbarSize = `${_getScrollbarSizeDefault.default(_ownerDocumentDefault.default(containerElement))}px`;
                    listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
                    listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
                }
                return listRef.current;
            }
        })
    , []);
    const handleKeyDown = (event)=>{
        const list = listRef.current;
        const key = event.key;
        /**
     * @type {Element} - will always be defined since we are in a keydown handler
     * attached to an element. A keydown event is either dispatched to the activeElement
     * or document.body or document.documentElement. Only the first case will
     * trigger this specific handler.
     */ const currentFocus = _ownerDocumentDefault.default(list).activeElement;
        if (key === 'ArrowDown') {
            // Prevent scroll of the page
            event.preventDefault();
            moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'ArrowUp') {
            event.preventDefault();
            moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key === 'Home') {
            event.preventDefault();
            moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'End') {
            event.preventDefault();
            moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key.length === 1) {
            const criteria = textCriteriaRef.current;
            const lowerKey = key.toLowerCase();
            const currTime = performance.now();
            if (criteria.keys.length > 0) {
                // Reset
                if (currTime - criteria.lastTime > 500) {
                    criteria.keys = [];
                    criteria.repeating = true;
                    criteria.previousKeyMatched = true;
                } else if (criteria.repeating && lowerKey !== criteria.keys[0]) criteria.repeating = false;
            }
            criteria.lastTime = currTime;
            criteria.keys.push(lowerKey);
            const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
            if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) event.preventDefault();
            else criteria.previousKeyMatched = false;
        }
        if (onKeyDown) onKeyDown(event);
    };
    const handleRef = _useForkRefDefault.default(listRef, ref);
    /**
   * the index of the item should receive focus
   * in a `variant="selectedMenu"` it's the first `selected` item
   * otherwise it's the very first item.
   */ let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback
    _react.Children.forEach(children, (child, index)=>{
        if (!/*#__PURE__*/ _react.isValidElement(child)) return;
        if (_reactIs.isFragment(child)) console.error([
            "MUI: The Menu component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        if (!child.props.disabled) {
            if (variant === 'selectedMenu' && child.props.selected) activeItemIndex = index;
            else if (activeItemIndex === -1) activeItemIndex = index;
        }
    });
    const items = _react.Children.map(children, (child, index)=>{
        if (index === activeItemIndex) {
            const newChildProps = {};
            if (autoFocusItem) newChildProps.autoFocus = true;
            if (child.props.tabIndex === undefined && variant === 'selectedMenu') newChildProps.tabIndex = 0;
            return /*#__PURE__*/ _react.cloneElement(child, newChildProps);
        }
        return child;
    });
    return /*#__PURE__*/ _jsxRuntime.jsx(_listDefault.default, _extendsDefault.default({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
    }, other, {
        children: items
    }));
});
MenuList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */ autoFocusItem: _propTypesDefault.default.bool,
    /**
   * MenuList contents, normally `MenuItem`s.
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */ disabledItemsFocusable: _propTypesDefault.default.bool,
    /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */ disableListWrap: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */ variant: _propTypesDefault.default.oneOf([
        'menu',
        'selectedMenu'
    ])
};
exports.default = MenuList;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","react-is":"7EuwB","prop-types":"7wKI2","../utils/ownerDocument":"jIL4x","../List":"PwNf5","../utils/getScrollbarSize":"6W4e6","../utils/useForkRef":"Q1vCZ","../utils/useEnhancedEffect":"jIOpS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6W4e6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_getScrollbarSize;

},{"@mui/utils":"cttLn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cVP3a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_popoverDefault.default
);
parcelHelpers.export(exports, "popoverClasses", ()=>_popoverClassesDefault.default
);
var _popover = require("./Popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _popoverClasses = require("./popoverClasses");
var _popoverClassesDefault = parcelHelpers.interopDefault(_popoverClasses);
parcelHelpers.exportAll(_popoverClasses, exports);

},{"./Popover":"lrDSX","./popoverClasses":"91k7p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrDSX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOffsetTop", ()=>getOffsetTop
);
parcelHelpers.export(exports, "getOffsetLeft", ()=>getOffsetLeft
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _debounce = require("../utils/debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _ownerDocument = require("../utils/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _ownerWindow = require("../utils/ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _grow = require("../Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);
var _modal = require("../Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _popoverClasses = require("./popoverClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onEntering"
], _excluded2 = [
    "action",
    "anchorEl",
    "anchorOrigin",
    "anchorPosition",
    "anchorReference",
    "children",
    "className",
    "container",
    "elevation",
    "marginThreshold",
    "open",
    "PaperProps",
    "transformOrigin",
    "TransitionComponent",
    "transitionDuration",
    "TransitionProps"
];
function getOffsetTop(rect, vertical) {
    let offset = 0;
    if (typeof vertical === 'number') offset = vertical;
    else if (vertical === 'center') offset = rect.height / 2;
    else if (vertical === 'bottom') offset = rect.height;
    return offset;
}
function getOffsetLeft(rect, horizontal) {
    let offset = 0;
    if (typeof horizontal === 'number') offset = horizontal;
    else if (horizontal === 'center') offset = rect.width / 2;
    else if (horizontal === 'right') offset = rect.width;
    return offset;
}
function getTransformOriginValue(transformOrigin) {
    return [
        transformOrigin.horizontal,
        transformOrigin.vertical
    ].map((n)=>typeof n === 'number' ? `${n}px` : n
    ).join(' ');
}
function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        paper: [
            'paper'
        ]
    };
    return _base.unstable_composeClasses(slots, _popoverClasses.getPopoverUtilityClass, classes);
};
const PopoverRoot = _styledDefault.default(_modalDefault.default, {
    name: 'MuiPopover',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({});
const PopoverPaper = _styledDefault.default(_paperDefault.default, {
    name: 'MuiPopover',
    slot: 'Paper',
    overridesResolver: (props, styles)=>styles.paper
})({
    position: 'absolute',
    overflowY: 'auto',
    overflowX: 'hidden',
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: 'calc(100% - 32px)',
    maxHeight: 'calc(100% - 32px)',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
});
const Popover = /*#__PURE__*/ _react.forwardRef(function Popover(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiPopover'
    });
    const { action , anchorEl , anchorOrigin ={
        vertical: 'top',
        horizontal: 'left'
    } , anchorPosition , anchorReference ='anchorEl' , children , className , container: containerProp , elevation =8 , marginThreshold =16 , open , PaperProps ={} , transformOrigin ={
        vertical: 'top',
        horizontal: 'left'
    } , TransitionComponent =_growDefault.default , transitionDuration: transitionDurationProp = 'auto' , TransitionProps: { onEntering  } = {}  } = props, TransitionProps = _objectWithoutPropertiesLooseDefault.default(props.TransitionProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const paperRef = _react.useRef();
    const handlePaperRef = _useForkRefDefault.default(paperRef, PaperProps.ref);
    const ownerState = _extendsDefault.default({}, props, {
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        PaperProps,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
    });
    const classes = useUtilityClasses(ownerState); // Returns the top/left offset of the position
    // to attach to on the anchor element (or body if none is provided)
    const getAnchorOffset = _react.useCallback(()=>{
        if (anchorReference === 'anchorPosition') {
            if (!anchorPosition) console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
            return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : _ownerDocumentDefault.default(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        {
            const box = anchorElement.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) console.warn([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                'The anchor element should be part of the document layout.',
                "Make sure the element is present in the document or that it's not display none."
            ].join('\n'));
        }
        return {
            top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
            left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
    }, [
        anchorEl,
        anchorOrigin.horizontal,
        anchorOrigin.vertical,
        anchorPosition,
        anchorReference
    ]); // Returns the base transform origin using the element
    const getTransformOrigin = _react.useCallback((elemRect)=>{
        return {
            vertical: getOffsetTop(elemRect, transformOrigin.vertical),
            horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
    }, [
        transformOrigin.horizontal,
        transformOrigin.vertical
    ]);
    const getPositioningStyle = _react.useCallback((element)=>{
        const elemRect = {
            width: element.offsetWidth,
            height: element.offsetHeight
        }; // Get the transform origin point on the element itself
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === 'none') return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
         // Get the offset of the anchoring element
        const anchorOffset = getAnchorOffset(); // Calculate element positioning
        let top = anchorOffset.top - elemTransformOrigin.vertical;
        let left = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom = top + elemRect.height;
        const right = left + elemRect.width; // Use the parent window of the anchorEl if provided
        const containerWindow = _ownerWindowDefault.default(resolveAnchorEl(anchorEl)); // Window thresholds taking required margin into account
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting
        if (top < marginThreshold) {
            const diff = top - marginThreshold;
            top -= diff;
            elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
            const diff = bottom - heightThreshold;
            top -= diff;
            elemTransformOrigin.vertical += diff;
        }
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) console.error([
            'MUI: The popover component is too tall.',
            `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`,
            'Please consider adding a `max-height` to improve the user-experience.'
        ].join('\n'));
        if (left < marginThreshold) {
            const diff = left - marginThreshold;
            left -= diff;
            elemTransformOrigin.horizontal += diff;
        } else if (right > widthThreshold) {
            const diff = right - widthThreshold;
            left -= diff;
            elemTransformOrigin.horizontal += diff;
        }
        return {
            top: `${Math.round(top)}px`,
            left: `${Math.round(left)}px`,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
    }, [
        anchorEl,
        anchorReference,
        getAnchorOffset,
        getTransformOrigin,
        marginThreshold
    ]);
    const setPositioningStyles = _react.useCallback(()=>{
        const element = paperRef.current;
        if (!element) return;
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) element.style.top = positioning.top;
        if (positioning.left !== null) element.style.left = positioning.left;
        element.style.transformOrigin = positioning.transformOrigin;
    }, [
        getPositioningStyle
    ]);
    const handleEntering = (element, isAppearing)=>{
        if (onEntering) onEntering(element, isAppearing);
        setPositioningStyles();
    };
    _react.useEffect(()=>{
        if (open) setPositioningStyles();
    });
    _react.useImperativeHandle(action, ()=>open ? {
            updatePosition: ()=>{
                setPositioningStyles();
            }
        } : null
    , [
        open,
        setPositioningStyles
    ]);
    _react.useEffect(()=>{
        if (!open) return undefined;
        const handleResize = _debounceDefault.default(()=>{
            setPositioningStyles();
        });
        const containerWindow = _ownerWindowDefault.default(anchorEl);
        containerWindow.addEventListener('resize', handleResize);
        return ()=>{
            handleResize.clear();
            containerWindow.removeEventListener('resize', handleResize);
        };
    }, [
        anchorEl,
        open,
        setPositioningStyles
    ]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) transitionDuration = undefined;
     // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container
    const container = containerProp || (anchorEl ? _ownerDocumentDefault.default(resolveAnchorEl(anchorEl)).body : undefined);
    return /*#__PURE__*/ _jsxRuntime.jsx(PopoverRoot, _extendsDefault.default({
        BackdropProps: {
            invisible: true
        },
        className: _clsxDefault.default(classes.root, className),
        container: container,
        open: open,
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
            appear: true,
            in: open,
            onEntering: handleEntering,
            timeout: transitionDuration
        }, TransitionProps, {
            children: /*#__PURE__*/ _jsxRuntime.jsx(PopoverPaper, _extendsDefault.default({
                elevation: elevation
            }, PaperProps, {
                ref: handlePaperRef,
                className: _clsxDefault.default(classes.paper, PaperProps.className),
                children: children
            }))
        }))
    }));
});
Popover.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */ action: _utils.refType,
    /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the popover.
   */ anchorEl: _utils.chainPropTypes(_propTypesDefault.default.oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]), (props)=>{
        if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
            const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
            if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
                const box = resolvedAnchorEl.getBoundingClientRect();
                if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) return new Error([
                    'MUI: The `anchorEl` prop provided to the component is invalid.',
                    'The anchor element should be part of the document layout.',
                    "Make sure the element is present in the document or that it's not display none."
                ].join('\n'));
            } else return new Error([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`
            ].join('\n'));
        }
        return null;
    }),
    /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */ anchorOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.oneOf([
                'center',
                'left',
                'right'
            ]),
            _propTypesDefault.default.number
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.oneOf([
                'bottom',
                'center',
                'top'
            ]),
            _propTypesDefault.default.number
        ]).isRequired
    }),
    /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */ anchorPosition: _propTypesDefault.default.shape({
        left: _propTypesDefault.default.number.isRequired,
        top: _propTypesDefault.default.number.isRequired
    }),
    /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */ anchorReference: _propTypesDefault.default.oneOf([
        'anchorEl',
        'anchorPosition',
        'none'
    ]),
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * The elevation of the popover.
   * @default 8
   */ elevation: _utils.integerPropType,
    /**
   * Specifies how close to the edge of the window the popover can appear.
   * @default 16
   */ marginThreshold: _propTypesDefault.default.number,
    /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * Props applied to the [`Paper`](/api/paper/) element.
   * @default {}
   */ PaperProps: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .shape({
        component: _utils.elementTypeAcceptingRef
    }),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */ transformOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.oneOf([
                'center',
                'left',
                'right'
            ]),
            _propTypesDefault.default.number
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.oneOf([
                'bottom',
                'center',
                'top'
            ]),
            _propTypesDefault.default.number
        ]).isRequired
    }),
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = Popover;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/utils":"cttLn","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../utils/debounce":"aggDu","../utils/ownerDocument":"jIL4x","../utils/ownerWindow":"9PRFD","../utils/useForkRef":"Q1vCZ","../Grow":"9py3h","../Modal":"lSUh1","../Paper":"6IiTP","./popoverClasses":"91k7p","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91k7p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPopoverUtilityClass", ()=>getPopoverUtilityClass
);
var _base = require("@mui/base");
function getPopoverUtilityClass(slot) {
    return _base.generateUtilityClass('MuiPopover', slot);
}
const popoverClasses = _base.generateUtilityClasses('MuiPopover', [
    'root',
    'paper'
]);
exports.default = popoverClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ewQE8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMenuUtilityClass", ()=>getMenuUtilityClass
);
var _base = require("@mui/base");
function getMenuUtilityClass(slot) {
    return _base.generateUtilityClass('MuiMenu', slot);
}
const menuClasses = _base.generateUtilityClasses('MuiMenu', [
    'root',
    'paper',
    'list'
]);
exports.default = menuClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"doDRo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nativeSelectSelectStyles", ()=>nativeSelectSelectStyles
);
parcelHelpers.export(exports, "nativeSelectIconStyles", ()=>nativeSelectIconStyles
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _nativeSelectClasses = require("./nativeSelectClasses");
var _nativeSelectClassesDefault = parcelHelpers.interopDefault(_nativeSelectClasses);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "disabled",
    "IconComponent",
    "inputRef",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , variant , disabled , multiple , open  } = ownerState;
    const slots = {
        select: [
            'select',
            variant,
            disabled && 'disabled',
            multiple && 'multiple'
        ],
        icon: [
            'icon',
            `icon${_capitalizeDefault.default(variant)}`,
            open && 'iconOpen',
            disabled && 'disabled'
        ]
    };
    return _base.unstable_composeClasses(slots, _nativeSelectClasses.getNativeSelectUtilityClasses, classes);
};
const nativeSelectSelectStyles = ({ ownerState , theme  })=>_extendsDefault.default({
        MozAppearance: 'none',
        // Reset
        WebkitAppearance: 'none',
        // Reset
        // When interacting quickly, the text can end up selected.
        // Native select can't be selected either.
        userSelect: 'none',
        borderRadius: 0,
        // Reset
        cursor: 'pointer',
        '&:focus': {
            // Show that it's not an text input
            backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
            borderRadius: 0 // Reset Chrome style
        },
        // Remove IE11 arrow
        '&::-ms-expand': {
            display: 'none'
        },
        [`&.${_nativeSelectClassesDefault.default.disabled}`]: {
            cursor: 'default'
        },
        '&[multiple]': {
            height: 'auto'
        },
        '&:not([multiple]) option, &:not([multiple]) optgroup': {
            backgroundColor: theme.palette.background.paper
        },
        // Bump specificity to allow extending custom inputs
        '&&&': {
            paddingRight: 24,
            minWidth: 16 // So it doesn't collapse.
        }
    }, ownerState.variant === 'filled' && {
        '&&&': {
            paddingRight: 32
        }
    }, ownerState.variant === 'outlined' && {
        borderRadius: theme.shape.borderRadius,
        '&:focus': {
            borderRadius: theme.shape.borderRadius // Reset the reset for Chrome style
        },
        '&&&': {
            paddingRight: 32
        }
    })
;
const NativeSelectSelect = _styledDefault.default('select', {
    name: 'MuiNativeSelect',
    slot: 'Select',
    shouldForwardProp: _styled.rootShouldForwardProp,
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.select,
            styles[ownerState.variant],
            {
                [`&.${_nativeSelectClassesDefault.default.multiple}`]: styles.multiple
            }
        ];
    }
})(nativeSelectSelectStyles);
const nativeSelectIconStyles = ({ ownerState , theme  })=>_extendsDefault.default({
        // We use a position absolute over a flexbox in order to forward the pointer events
        // to the input and to support wrapping tags..
        position: 'absolute',
        right: 0,
        top: 'calc(50% - .5em)',
        // Center vertically, height is 1em
        pointerEvents: 'none',
        // Don't block pointer events on the select under the icon.
        color: theme.palette.action.active,
        [`&.${_nativeSelectClassesDefault.default.disabled}`]: {
            color: theme.palette.action.disabled
        }
    }, ownerState.open && {
        transform: 'rotate(180deg)'
    }, ownerState.variant === 'filled' && {
        right: 7
    }, ownerState.variant === 'outlined' && {
        right: 7
    })
;
const NativeSelectIcon = _styledDefault.default('svg', {
    name: 'MuiNativeSelect',
    slot: 'Icon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.icon,
            ownerState.variant && styles[`icon${_capitalizeDefault.default(ownerState.variant)}`],
            ownerState.open && styles.iconOpen
        ];
    }
})(nativeSelectIconStyles);
/**
 * @ignore - internal component.
 */ const NativeSelectInput = /*#__PURE__*/ _react.forwardRef(function NativeSelectInput(props, ref) {
    const { className , disabled , IconComponent , inputRef , variant ='standard'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        disabled,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(NativeSelectSelect, _extendsDefault.default({
                ownerState: ownerState,
                className: _clsxDefault.default(classes.select, className),
                disabled: disabled,
                ref: inputRef || ref
            }, other)),
            props.multiple ? null : /*#__PURE__*/ _jsxRuntime.jsx(NativeSelectIcon, {
                as: IconComponent,
                ownerState: ownerState,
                className: classes.icon
            })
        ]
    });
});
NativeSelectInput.propTypes = {
    /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * The CSS class name of the select element.
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the select is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * The icon that displays the arrow.
   */ IconComponent: _propTypesDefault.default.elementType.isRequired,
    /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */ inputRef: _utils.refType,
    /**
   * @ignore
   */ multiple: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `select` or hidden `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * The input value.
   */ value: _propTypesDefault.default.any,
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'standard',
        'outlined',
        'filled'
    ])
};
exports.default = NativeSelectInput;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","../utils/capitalize":"lwNtZ","./nativeSelectClasses":"45n4i","../styles/styled":"32xTg","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45n4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNativeSelectUtilityClasses", ()=>getNativeSelectUtilityClasses
);
var _base = require("@mui/base");
function getNativeSelectUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiNativeSelect', slot);
}
const nativeSelectClasses = _base.generateUtilityClasses('MuiNativeSelect', [
    'root',
    'select',
    'multiple',
    'filled',
    'outlined',
    'standard',
    'disabled',
    'icon',
    'iconOpen',
    'iconFilled',
    'iconOutlined',
    'iconStandard',
    'nativeInput'
]);
exports.default = nativeSelectClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AQwB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSelectUtilityClasses", ()=>getSelectUtilityClasses
);
var _base = require("@mui/base");
function getSelectUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiSelect', slot);
}
const selectClasses = _base.generateUtilityClasses('MuiSelect', [
    'select',
    'multiple',
    'filled',
    'outlined',
    'standard',
    'disabled',
    'focused',
    'icon',
    'iconOpen',
    'iconFilled',
    'iconOutlined',
    'iconStandard',
    'nativeInput'
]);
exports.default = selectClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9FEul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M7 10l5 5 5-5z"
}), 'ArrowDropDown');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kvpDT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTextFieldUtilityClass", ()=>getTextFieldUtilityClass
);
var _base = require("@mui/base");
function getTextFieldUtilityClass(slot) {
    return _base.generateUtilityClass('MuiTextField', slot);
}
const textFieldClasses = _base.generateUtilityClasses('MuiTextField', [
    'root'
]);
exports.default = textFieldClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnTLA":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$8d8f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$8d8f.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _speedDial = require("@mui/material/SpeedDial");
var _speedDialDefault = parcelHelpers.interopDefault(_speedDial);
var _speedDialIcon = require("@mui/material/SpeedDialIcon");
var _speedDialIconDefault = parcelHelpers.interopDefault(_speedDialIcon);
var _speedDialAction = require("@mui/material/SpeedDialAction");
var _speedDialActionDefault = parcelHelpers.interopDefault(_speedDialAction);
var _fileOpen = require("@mui/icons-material/FileOpen");
var _fileOpenDefault = parcelHelpers.interopDefault(_fileOpen);
var _accountBox = require("@mui/icons-material/AccountBox");
var _accountBoxDefault = parcelHelpers.interopDefault(_accountBox);
var _article = require("@mui/icons-material/Article");
var _articleDefault = parcelHelpers.interopDefault(_article);
var _list = require("@mui/icons-material/List");
var _listDefault = parcelHelpers.interopDefault(_list);
var _types = require("../types");
const actions = [
    {
        icon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_accountBoxDefault.default, {}, void 0, false, {
            fileName: "src/authenticated/new-secret-dial.tsx",
            lineNumber: 15,
            columnNumber: 11
        }, undefined),
        name: "Account Password",
        kind: _types.SecretKind.Account
    },
    {
        icon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_articleDefault.default, {}, void 0, false, {
            fileName: "src/authenticated/new-secret-dial.tsx",
            lineNumber: 20,
            columnNumber: 11
        }, undefined),
        name: "Secure Note",
        kind: _types.SecretKind.Note
    },
    {
        icon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_listDefault.default, {}, void 0, false, {
            fileName: "src/authenticated/new-secret-dial.tsx",
            lineNumber: 25,
            columnNumber: 11
        }, undefined),
        name: "Credentials List",
        kind: _types.SecretKind.Credentials
    },
    {
        icon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileOpenDefault.default, {}, void 0, false, {
            fileName: "src/authenticated/new-secret-dial.tsx",
            lineNumber: 30,
            columnNumber: 11
        }, undefined),
        name: "File Upload",
        kind: _types.SecretKind.File
    }, 
];
function NewSecretDial(props) {
    const { onSelect  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_speedDialDefault.default, {
        ariaLabel: "New secret",
        sx: {
            position: "fixed",
            bottom: 16,
            right: 16
        },
        icon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_speedDialIconDefault.default, {}, void 0, false, void 0, void 0),
        children: actions.map((action)=>/*#__PURE__*/ _jsxDevRuntime.jsxDEV(_speedDialActionDefault.default, {
                icon: action.icon,
                tooltipTitle: action.name,
                onClick: ()=>onSelect(action.kind)
            }, action.name, false, {
                fileName: "src/authenticated/new-secret-dial.tsx",
                lineNumber: 49,
                columnNumber: 9
            }, this)
        )
    }, void 0, false, {
        fileName: "src/authenticated/new-secret-dial.tsx",
        lineNumber: 43,
        columnNumber: 5
    }, this);
}
exports.default = NewSecretDial;
_c = NewSecretDial;
var _c;
$RefreshReg$(_c, "NewSecretDial");

  $parcel$ReactRefreshHelpers$8d8f.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/SpeedDial":"5kcc8","@mui/material/SpeedDialIcon":"4Ytbn","@mui/material/SpeedDialAction":"a5UpM","@mui/icons-material/FileOpen":"6jodQ","@mui/icons-material/AccountBox":"s4grW","@mui/icons-material/Article":"fZbk9","@mui/icons-material/List":"dVv2a","../types":"38MWl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"5kcc8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_speedDialDefault.default
);
parcelHelpers.export(exports, "speedDialClasses", ()=>_speedDialClassesDefault.default
);
var _speedDial = require("./SpeedDial");
var _speedDialDefault = parcelHelpers.interopDefault(_speedDial);
var _speedDialClasses = require("./speedDialClasses");
var _speedDialClassesDefault = parcelHelpers.interopDefault(_speedDialClasses);
parcelHelpers.exportAll(_speedDialClasses, exports);

},{"./SpeedDial":"97lZz","./speedDialClasses":"1z404","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97lZz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _zoom = require("../Zoom");
var _zoomDefault = parcelHelpers.interopDefault(_zoom);
var _fab = require("../Fab");
var _fabDefault = parcelHelpers.interopDefault(_fab);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _isMuiElement = require("../utils/isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _speedDialClasses = require("./speedDialClasses");
var _speedDialClassesDefault = parcelHelpers.interopDefault(_speedDialClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "ref"
], _excluded2 = [
    "ariaLabel",
    "FabProps",
    "children",
    "className",
    "direction",
    "hidden",
    "icon",
    "onBlur",
    "onClose",
    "onFocus",
    "onKeyDown",
    "onMouseEnter",
    "onMouseLeave",
    "onOpen",
    "open",
    "openIcon",
    "TransitionComponent",
    "transitionDuration",
    "TransitionProps"
], _excluded3 = [
    "ref"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , open , direction  } = ownerState;
    const slots = {
        root: [
            'root',
            `direction${_capitalizeDefault.default(direction)}`
        ],
        fab: [
            'fab'
        ],
        actions: [
            'actions',
            !open && 'actionsClosed'
        ]
    };
    return _base.unstable_composeClasses(slots, _speedDialClasses.getSpeedDialUtilityClass, classes);
};
function getOrientation(direction) {
    if (direction === 'up' || direction === 'down') return 'vertical';
    if (direction === 'right' || direction === 'left') return 'horizontal';
    return undefined;
}
function clamp(value, min, max) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
}
const dialRadius = 32;
const spacingActions = 16;
const SpeedDialRoot = _styledDefault.default('div', {
    name: 'MuiSpeedDial',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`direction${_capitalizeDefault.default(ownerState.direction)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        zIndex: theme.zIndex.speedDial,
        display: 'flex',
        alignItems: 'center',
        pointerEvents: 'none'
    }, ownerState.direction === 'up' && {
        flexDirection: 'column-reverse',
        [`& .${_speedDialClassesDefault.default.actions}`]: {
            flexDirection: 'column-reverse',
            marginBottom: -dialRadius,
            paddingBottom: spacingActions + dialRadius
        }
    }, ownerState.direction === 'down' && {
        flexDirection: 'column',
        [`& .${_speedDialClassesDefault.default.actions}`]: {
            flexDirection: 'column',
            marginTop: -dialRadius,
            paddingTop: spacingActions + dialRadius
        }
    }, ownerState.direction === 'left' && {
        flexDirection: 'row-reverse',
        [`& .${_speedDialClassesDefault.default.actions}`]: {
            flexDirection: 'row-reverse',
            marginRight: -dialRadius,
            paddingRight: spacingActions + dialRadius
        }
    }, ownerState.direction === 'right' && {
        flexDirection: 'row',
        [`& .${_speedDialClassesDefault.default.actions}`]: {
            flexDirection: 'row',
            marginLeft: -dialRadius,
            paddingLeft: spacingActions + dialRadius
        }
    })
);
const SpeedDialFab = _styledDefault.default(_fabDefault.default, {
    name: 'MuiSpeedDial',
    slot: 'Fab',
    overridesResolver: (props, styles)=>styles.fab
})(()=>({
        pointerEvents: 'auto'
    })
);
const SpeedDialActions = _styledDefault.default('div', {
    name: 'MuiSpeedDial',
    slot: 'Actions',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.actions,
            !ownerState.open && styles.actionsClosed
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'flex',
        pointerEvents: 'auto'
    }, !ownerState.open && {
        transition: 'top 0s linear 0.2s',
        pointerEvents: 'none'
    })
);
const SpeedDial = /*#__PURE__*/ _react.forwardRef(function SpeedDial(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSpeedDial'
    });
    const theme = _useThemeDefault.default();
    const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { ariaLabel , FabProps: { ref: origDialButtonRef  } = {} , children: childrenProp , className , direction ='up' , hidden =false , icon , onBlur , onClose , onFocus , onKeyDown , onMouseEnter , onMouseLeave , onOpen , open: openProp , TransitionComponent =_zoomDefault.default , transitionDuration =defaultTransitionDuration , TransitionProps  } = props, FabProps = _objectWithoutPropertiesLooseDefault.default(props.FabProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const [open, setOpenState] = _useControlledDefault.default({
        controlled: openProp,
        default: false,
        name: 'SpeedDial',
        state: 'open'
    });
    const ownerState = _extendsDefault.default({}, props, {
        open,
        direction
    });
    const classes = useUtilityClasses(ownerState);
    const eventTimer = _react.useRef();
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(eventTimer.current);
        };
    }, []);
    /**
   * an index in actions.current
   */ const focusedAction = _react.useRef(0);
    /**
   * pressing this key while the focus is on a child SpeedDialAction focuses
   * the next SpeedDialAction.
   * It is equal to the first arrow key pressed while focus is on the SpeedDial
   * that is not orthogonal to the direction.
   * @type {utils.ArrowKey?}
   */ const nextItemArrowKey = _react.useRef();
    /**
   * refs to the Button that have an action associated to them in this SpeedDial
   * [Fab, ...(SpeedDialActions > Button)]
   * @type {HTMLButtonElement[]}
   */ const actions = _react.useRef([]);
    actions.current = [
        actions.current[0]
    ];
    const handleOwnFabRef = _react.useCallback((fabFef)=>{
        actions.current[0] = fabFef;
    }, []);
    const handleFabRef = _useForkRefDefault.default(origDialButtonRef, handleOwnFabRef);
    /**
   * creates a ref callback for the Button in a SpeedDialAction
   * Is called before the original ref callback for Button that was set in buttonProps
   *
   * @param dialActionIndex {number}
   * @param origButtonRef {React.RefObject?}
   */ const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef)=>{
        return (buttonRef)=>{
            actions.current[dialActionIndex + 1] = buttonRef;
            if (origButtonRef) origButtonRef(buttonRef);
        };
    };
    const handleKeyDown = (event)=>{
        if (onKeyDown) onKeyDown(event);
        const key = event.key.replace('Arrow', '').toLowerCase();
        const { current: nextItemArrowKeyCurrent = key  } = nextItemArrowKey;
        if (event.key === 'Escape') {
            setOpenState(false);
            actions.current[0].focus();
            if (onClose) onClose(event, 'escapeKeyDown');
            return;
        }
        if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== undefined) {
            event.preventDefault();
            const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1; // stay within array indices
            const nextAction = clamp(focusedAction.current + actionStep, 0, actions.current.length - 1);
            actions.current[nextAction].focus();
            focusedAction.current = nextAction;
            nextItemArrowKey.current = nextItemArrowKeyCurrent;
        }
    };
    _react.useEffect(()=>{
        // actions were closed while navigation state was not reset
        if (!open) {
            focusedAction.current = 0;
            nextItemArrowKey.current = undefined;
        }
    }, [
        open
    ]);
    const handleClose = (event)=>{
        if (event.type === 'mouseleave' && onMouseLeave) onMouseLeave(event);
        if (event.type === 'blur' && onBlur) onBlur(event);
        clearTimeout(eventTimer.current);
        if (event.type === 'blur') eventTimer.current = setTimeout(()=>{
            setOpenState(false);
            if (onClose) onClose(event, 'blur');
        });
        else {
            setOpenState(false);
            if (onClose) onClose(event, 'mouseLeave');
        }
    };
    const handleClick = (event)=>{
        if (FabProps.onClick) FabProps.onClick(event);
        clearTimeout(eventTimer.current);
        if (open) {
            setOpenState(false);
            if (onClose) onClose(event, 'toggle');
        } else {
            setOpenState(true);
            if (onOpen) onOpen(event, 'toggle');
        }
    };
    const handleOpen = (event)=>{
        if (event.type === 'mouseenter' && onMouseEnter) onMouseEnter(event);
        if (event.type === 'focus' && onFocus) onFocus(event);
         // When moving the focus between two items,
        // a chain if blur and focus event is triggered.
        // We only handle the last event.
        clearTimeout(eventTimer.current);
        if (!open) // Wait for a future focus or click event
        eventTimer.current = setTimeout(()=>{
            setOpenState(true);
            if (onOpen) {
                const eventMap = {
                    focus: 'focus',
                    mouseenter: 'mouseEnter'
                };
                onOpen(event, eventMap[event.type]);
            }
        });
    }; // Filter the label for valid id characters.
    const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
    const allItems = _react.Children.toArray(childrenProp).filter((child)=>{
        if (_reactIs.isFragment(child)) console.error([
            "MUI: The SpeedDial component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        return /*#__PURE__*/ _react.isValidElement(child);
    });
    const children = allItems.map((child, index)=>{
        const _child$props = child.props, { FabProps: { ref: origButtonRef  } = {} , tooltipPlacement: tooltipPlacementProp  } = _child$props, ChildFabProps = _objectWithoutPropertiesLooseDefault.default(_child$props.FabProps, _excluded3);
        const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === 'vertical' ? 'left' : 'top');
        return /*#__PURE__*/ _react.cloneElement(child, {
            FabProps: _extendsDefault.default({}, ChildFabProps, {
                ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
            }),
            delay: 30 * (open ? index : allItems.length - index),
            open,
            tooltipPlacement,
            id: `${id}-action-${index}`
        });
    });
    return /*#__PURE__*/ _jsxRuntime.jsxs(SpeedDialRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        role: "presentation",
        onKeyDown: handleKeyDown,
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseEnter: handleOpen,
        onMouseLeave: handleClose,
        ownerState: ownerState
    }, other, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
                in: !hidden,
                timeout: transitionDuration,
                unmountOnExit: true
            }, TransitionProps, {
                children: /*#__PURE__*/ _jsxRuntime.jsx(SpeedDialFab, _extendsDefault.default({
                    color: "primary",
                    "aria-label": ariaLabel,
                    "aria-haspopup": "true",
                    "aria-expanded": open,
                    "aria-controls": `${id}-actions`
                }, FabProps, {
                    onClick: handleClick,
                    className: _clsxDefault.default(classes.fab, FabProps.className),
                    ref: handleFabRef,
                    ownerState: ownerState,
                    children: /*#__PURE__*/ _react.isValidElement(icon) && _isMuiElementDefault.default(icon, [
                        'SpeedDialIcon'
                    ]) ? /*#__PURE__*/ _react.cloneElement(icon, {
                        open
                    }) : icon
                }))
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(SpeedDialActions, {
                id: `${id}-actions`,
                role: "menu",
                "aria-orientation": getOrientation(direction),
                className: _clsxDefault.default(classes.actions, !open && classes.actionsClosed),
                ownerState: ownerState,
                children: children
            })
        ]
    }));
});
SpeedDial.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The aria-label of the button element.
   * Also used to provide the `id` for the `SpeedDial` element and its children.
   */ ariaLabel: _propTypesDefault.default.string.isRequired,
    /**
   * SpeedDialActions to display when the SpeedDial is `open`.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The direction the actions open relative to the floating action button.
   * @default 'up'
   */ direction: _propTypesDefault.default.oneOf([
        'down',
        'left',
        'right',
        'up'
    ]),
    /**
   * Props applied to the [`Fab`](/api/fab/) element.
   * @default {}
   */ FabProps: _propTypesDefault.default.object,
    /**
   * If `true`, the SpeedDial is hidden.
   * @default false
   */ hidden: _propTypesDefault.default.bool,
    /**
   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
   * provides a default Icon with animation.
   */ icon: _propTypesDefault.default.node,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseLeave: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
   */ onOpen: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * The icon to display in the SpeedDial Fab when the SpeedDial is open.
   */ openIcon: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Zoom
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = SpeedDial;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","react-is":"7EuwB","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../styles/useTheme":"5nWMX","../Zoom":"4cIKp","../Fab":"bL0iw","../utils/capitalize":"lwNtZ","../utils/isMuiElement":"guro1","../utils/useForkRef":"Q1vCZ","../utils/useControlled":"68YU6","./speedDialClasses":"1z404","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4cIKp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_zoomDefault.default
);
var _zoom = require("./Zoom");
var _zoomDefault = parcelHelpers.interopDefault(_zoom);

},{"./Zoom":"bPpxR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPpxR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _utils = require("@mui/utils");
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _utils1 = require("../transitions/utils");
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "addEndListener",
    "appear",
    "children",
    "easing",
    "in",
    "onEnter",
    "onEntered",
    "onEntering",
    "onExit",
    "onExited",
    "onExiting",
    "style",
    "timeout",
    "TransitionComponent"
];
const styles = {
    entering: {
        transform: 'none'
    },
    entered: {
        transform: 'none'
    }
};
/**
 * The Zoom transition can be used for the floating variant of the
 * [Button](/components/buttons/#floating-action-buttons) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */ const Zoom = /*#__PURE__*/ _react.forwardRef(function Zoom(props, ref) {
    const theme = _useThemeDefault.default();
    const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { addEndListener , appear =true , children , easing , in: inProp , onEnter , onEntered , onEntering , onExit , onExited , onExiting , style , timeout =defaultTimeout , // eslint-disable-next-line react/prop-types
    TransitionComponent =_reactTransitionGroup.Transition  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const nodeRef = _react.useRef(null);
    const foreignRef = _useForkRefDefault.default(children.ref, ref);
    const handleRef = _useForkRefDefault.default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback)=>(maybeIsAppearing)=>{
            if (callback) {
                const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
                if (maybeIsAppearing === undefined) callback(node);
                else callback(node, maybeIsAppearing);
            }
        }
    ;
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing)=>{
        _utils1.reflow(node); // So the animation always start from the start.
        const transitionProps = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);
        if (onEnter) onEnter(node, isAppearing);
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node)=>{
        const transitionProps = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);
        if (onExit) onExit(node);
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next)=>{
        if (addEndListener) // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
    };
    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout
    }, other, {
        children: (state, childProps)=>{
            return /*#__PURE__*/ _react.cloneElement(children, _extendsDefault.default({
                style: _extendsDefault.default({
                    transform: 'scale(0)',
                    visibility: state === 'exited' && !inProp ? 'hidden' : undefined
                }, styles[state], style, children.props.style),
                ref: handleRef
            }, childProps));
        }
    }));
});
Zoom.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */ appear: _propTypesDefault.default.bool,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */ easing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.shape({
            enter: _propTypesDefault.default.string,
            exit: _propTypesDefault.default.string
        }),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component will transition in.
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntered: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntering: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExit: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExited: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExiting: _propTypesDefault.default.func,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ timeout: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
exports.default = Zoom;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","react-transition-group":"fZSkB","@mui/utils":"cttLn","../styles/useTheme":"5nWMX","../transitions/utils":"bSIvX","../utils/useForkRef":"Q1vCZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1z404":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSpeedDialUtilityClass", ()=>getSpeedDialUtilityClass
);
var _base = require("@mui/base");
function getSpeedDialUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSpeedDial', slot);
}
const speedDialClasses = _base.generateUtilityClasses('MuiSpeedDial', [
    'root',
    'fab',
    'directionUp',
    'directionDown',
    'directionLeft',
    'directionRight',
    'actions',
    'actionsClosed'
]);
exports.default = speedDialClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Ytbn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_speedDialIconDefault.default
);
parcelHelpers.export(exports, "speedDialIconClasses", ()=>_speedDialIconClassesDefault.default
);
var _speedDialIcon = require("./SpeedDialIcon");
var _speedDialIconDefault = parcelHelpers.interopDefault(_speedDialIcon);
var _speedDialIconClasses = require("./speedDialIconClasses");
var _speedDialIconClassesDefault = parcelHelpers.interopDefault(_speedDialIconClasses);
parcelHelpers.exportAll(_speedDialIconClasses, exports);

},{"./SpeedDialIcon":"5wfyv","./speedDialIconClasses":"ldONY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5wfyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _add = require("../internal/svg-icons/Add");
var _addDefault = parcelHelpers.interopDefault(_add);
var _speedDialIconClasses = require("./speedDialIconClasses");
var _speedDialIconClassesDefault = parcelHelpers.interopDefault(_speedDialIconClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "icon",
    "open",
    "openIcon"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , open , openIcon  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        icon: [
            'icon',
            open && 'iconOpen',
            openIcon && open && 'iconWithOpenIconOpen'
        ],
        openIcon: [
            'openIcon',
            open && 'openIconOpen'
        ]
    };
    return _base.unstable_composeClasses(slots, _speedDialIconClasses.getSpeedDialIconUtilityClass, classes);
};
const SpeedDialIconRoot = _styledDefault.default('span', {
    name: 'MuiSpeedDialIcon',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            {
                [`& .${_speedDialIconClassesDefault.default.icon}`]: styles.icon
            },
            {
                [`& .${_speedDialIconClassesDefault.default.icon}`]: ownerState.open && styles.iconOpen
            },
            {
                [`& .${_speedDialIconClassesDefault.default.icon}`]: ownerState.open && ownerState.openIcon && styles.iconWithOpenIconOpen
            },
            {
                [`& .${_speedDialIconClassesDefault.default.openIcon}`]: styles.openIcon
            },
            {
                [`& .${_speedDialIconClassesDefault.default.openIcon}`]: ownerState.open && styles.openIconOpen
            },
            styles.root
        ];
    }
})(({ theme , ownerState  })=>({
        height: 24,
        [`& .${_speedDialIconClassesDefault.default.icon}`]: _extendsDefault.default({
            transition: theme.transitions.create([
                'transform',
                'opacity'
            ], {
                duration: theme.transitions.duration.short
            })
        }, ownerState.open && _extendsDefault.default({
            transform: 'rotate(45deg)'
        }, ownerState.openIcon && {
            opacity: 0
        })),
        [`& .${_speedDialIconClassesDefault.default.openIcon}`]: _extendsDefault.default({
            position: 'absolute',
            transition: theme.transitions.create([
                'transform',
                'opacity'
            ], {
                duration: theme.transitions.duration.short
            }),
            opacity: 0,
            transform: 'rotate(-45deg)'
        }, ownerState.open && {
            transform: 'rotate(0deg)',
            opacity: 1
        })
    })
);
const SpeedDialIcon = /*#__PURE__*/ _react.forwardRef(function SpeedDialIcon(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSpeedDialIcon'
    });
    const { className , icon: iconProp , openIcon: openIconProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = props;
    const classes = useUtilityClasses(ownerState);
    function formatIcon(icon, newClassName) {
        if (/*#__PURE__*/ _react.isValidElement(icon)) return /*#__PURE__*/ _react.cloneElement(icon, {
            className: newClassName
        });
        return icon;
    }
    return /*#__PURE__*/ _jsxRuntime.jsxs(SpeedDialIconRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: [
            openIconProp ? formatIcon(openIconProp, classes.openIcon) : null,
            iconProp ? formatIcon(iconProp, classes.icon) : /*#__PURE__*/ _jsxRuntime.jsx(_addDefault.default, {
                className: classes.icon
            })
        ]
    }));
});
SpeedDialIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The icon to display.
   */ icon: _propTypesDefault.default.node,
    /**
   * @ignore
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
   */ openIcon: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
SpeedDialIcon.muiName = 'SpeedDialIcon';
exports.default = SpeedDialIcon;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../internal/svg-icons/Add":"8HcYz","./speedDialIconClasses":"ldONY","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8HcYz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _utils = require("../../utils");
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _utils.createSvgIcon(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), 'Add');

},{"react":"21dqq","../../utils":"9bp9M","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ldONY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSpeedDialIconUtilityClass", ()=>getSpeedDialIconUtilityClass
);
var _base = require("@mui/base");
function getSpeedDialIconUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSpeedDialIcon', slot);
}
const speedDialIconClasses = _base.generateUtilityClasses('MuiSpeedDialIcon', [
    'root',
    'icon',
    'iconOpen',
    'iconWithOpenIconOpen',
    'openIcon',
    'openIconOpen'
]);
exports.default = speedDialIconClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5UpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_speedDialActionDefault.default
);
parcelHelpers.export(exports, "speedDialActionClasses", ()=>_speedDialActionClassesDefault.default
);
var _speedDialAction = require("./SpeedDialAction");
var _speedDialActionDefault = parcelHelpers.interopDefault(_speedDialAction);
var _speedDialActionClasses = require("./speedDialActionClasses");
var _speedDialActionClassesDefault = parcelHelpers.interopDefault(_speedDialActionClasses);
parcelHelpers.exportAll(_speedDialActionClasses, exports);

},{"./SpeedDialAction":"8wUqA","./speedDialActionClasses":"7a8aj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wUqA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// @inheritedComponent Tooltip
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _fab = require("../Fab");
var _fabDefault = parcelHelpers.interopDefault(_fab);
var _tooltip = require("../Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _speedDialActionClasses = require("./speedDialActionClasses");
var _speedDialActionClassesDefault = parcelHelpers.interopDefault(_speedDialActionClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "delay",
    "FabProps",
    "icon",
    "id",
    "open",
    "TooltipClasses",
    "tooltipOpen",
    "tooltipPlacement",
    "tooltipTitle"
];
const useUtilityClasses = (ownerState)=>{
    const { open , tooltipPlacement , classes  } = ownerState;
    const slots = {
        fab: [
            'fab',
            !open && 'fabClosed'
        ],
        staticTooltip: [
            'staticTooltip',
            `tooltipPlacement${_capitalizeDefault.default(tooltipPlacement)}`,
            !open && 'staticTooltipClosed'
        ],
        staticTooltipLabel: [
            'staticTooltipLabel'
        ]
    };
    return _base.unstable_composeClasses(slots, _speedDialActionClasses.getSpeedDialActionUtilityClass, classes);
};
const SpeedDialActionFab = _styledDefault.default(_fabDefault.default, {
    name: 'MuiSpeedDialAction',
    slot: 'Fab',
    skipVariantsResolver: false,
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.fab,
            !ownerState.open && styles.fabClosed
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        margin: 8,
        color: theme.palette.text.secondary,
        backgroundColor: theme.palette.background.paper,
        '&:hover': {
            backgroundColor: _system.emphasize(theme.palette.background.paper, 0.15)
        },
        transition: `${theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter
        })}, opacity 0.8s`,
        opacity: 1
    }, !ownerState.open && {
        opacity: 0,
        transform: 'scale(0)'
    })
);
const SpeedDialActionStaticTooltip = _styledDefault.default('span', {
    name: 'MuiSpeedDialAction',
    slot: 'StaticTooltip',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.staticTooltip,
            !ownerState.open && styles.staticTooltipClosed,
            styles[`tooltipPlacement${_capitalizeDefault.default(ownerState.tooltipPlacement)}`]
        ];
    }
})(({ theme , ownerState  })=>({
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        [`& .${_speedDialActionClassesDefault.default.staticTooltipLabel}`]: _extendsDefault.default({
            transition: theme.transitions.create([
                'transform',
                'opacity'
            ], {
                duration: theme.transitions.duration.shorter
            }),
            opacity: 1
        }, !ownerState.open && {
            opacity: 0,
            transform: 'scale(0.5)'
        }, ownerState.tooltipPlacement === 'left' && {
            transformOrigin: '100% 50%',
            right: '100%',
            marginRight: 8
        }, ownerState.tooltipPlacement === 'right' && {
            transformOrigin: '0% 50%',
            left: '100%',
            marginLeft: 8
        })
    })
);
const SpeedDialActionStaticTooltipLabel = _styledDefault.default('span', {
    name: 'MuiSpeedDialAction',
    slot: 'StaticTooltipLabel',
    overridesResolver: (props, styles)=>styles.staticTooltipLabel
})(({ theme  })=>_extendsDefault.default({
        position: 'absolute'
    }, theme.typography.body1, {
        backgroundColor: theme.palette.background.paper,
        borderRadius: theme.shape.borderRadius,
        boxShadow: theme.shadows[1],
        color: theme.palette.text.secondary,
        padding: '4px 16px',
        wordBreak: 'keep-all'
    })
);
const SpeedDialAction = /*#__PURE__*/ _react.forwardRef(function SpeedDialAction(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSpeedDialAction'
    });
    const { className , delay =0 , FabProps ={} , icon , id , open , TooltipClasses , tooltipOpen: tooltipOpenProp = false , tooltipPlacement ='left' , tooltipTitle  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        tooltipPlacement
    });
    const classes = useUtilityClasses(ownerState);
    const [tooltipOpen, setTooltipOpen] = _react.useState(tooltipOpenProp);
    const handleTooltipClose = ()=>{
        setTooltipOpen(false);
    };
    const handleTooltipOpen = ()=>{
        setTooltipOpen(true);
    };
    const transitionStyle = {
        transitionDelay: `${delay}ms`
    };
    const fab = /*#__PURE__*/ _jsxRuntime.jsx(SpeedDialActionFab, _extendsDefault.default({
        size: "small",
        className: _clsxDefault.default(classes.fab, className),
        tabIndex: -1,
        role: "menuitem",
        ownerState: ownerState
    }, FabProps, {
        style: _extendsDefault.default({}, transitionStyle, FabProps.style),
        children: icon
    }));
    if (tooltipOpenProp) return /*#__PURE__*/ _jsxRuntime.jsxs(SpeedDialActionStaticTooltip, _extendsDefault.default({
        id: id,
        ref: ref,
        className: classes.staticTooltip,
        ownerState: ownerState
    }, other, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(SpeedDialActionStaticTooltipLabel, {
                style: transitionStyle,
                id: `${id}-label`,
                className: classes.staticTooltipLabel,
                ownerState: ownerState,
                children: tooltipTitle
            }),
            /*#__PURE__*/ _react.cloneElement(fab, {
                'aria-labelledby': `${id}-label`
            })
        ]
    }));
    if (!open && tooltipOpen) setTooltipOpen(false);
    return /*#__PURE__*/ _jsxRuntime.jsx(_tooltipDefault.default, _extendsDefault.default({
        id: id,
        ref: ref,
        title: tooltipTitle,
        placement: tooltipPlacement,
        onClose: handleTooltipClose,
        onOpen: handleTooltipOpen,
        open: open && tooltipOpen,
        classes: TooltipClasses
    }, other, {
        children: fab
    }));
});
SpeedDialAction.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
   * @default 0
   */ delay: _propTypesDefault.default.number,
    /**
   * Props applied to the [`Fab`](/api/fab/) component.
   * @default {}
   */ FabProps: _propTypesDefault.default.object,
    /**
   * The icon to display in the SpeedDial Fab.
   */ icon: _propTypesDefault.default.node,
    /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */ id: _propTypesDefault.default.string,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * `classes` prop applied to the [`Tooltip`](/api/tooltip/) element.
   */ TooltipClasses: _propTypesDefault.default.object,
    /**
   * Make the tooltip always visible when the SpeedDial is open.
   * @default false
   */ tooltipOpen: _propTypesDefault.default.bool,
    /**
   * Placement of the tooltip.
   * @default 'left'
   */ tooltipPlacement: _propTypesDefault.default.oneOf([
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * Label to display in the tooltip.
   */ tooltipTitle: _propTypesDefault.default.node
};
exports.default = SpeedDialAction;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Fab":"bL0iw","../Tooltip":"5uL59","../utils/capitalize":"lwNtZ","./speedDialActionClasses":"7a8aj","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5uL59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_tooltipDefault.default
);
parcelHelpers.export(exports, "tooltipClasses", ()=>_tooltipClassesDefault.default
);
var _tooltip = require("./Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _tooltipClasses = require("./tooltipClasses");
var _tooltipClassesDefault = parcelHelpers.interopDefault(_tooltipClasses);
parcelHelpers.exportAll(_tooltipClasses, exports);

},{"./Tooltip":"ari2T","./tooltipClasses":"gj2D4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ari2T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "testReset", ()=>testReset
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _grow = require("../Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);
var _popper = require("../Popper");
var _popperDefault = parcelHelpers.interopDefault(_popper);
var _useEventCallback = require("../utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useId = require("../utils/useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _tooltipClasses = require("./tooltipClasses");
var _tooltipClassesDefault = parcelHelpers.interopDefault(_tooltipClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "arrow",
    "children",
    "classes",
    "components",
    "componentsProps",
    "describeChild",
    "disableFocusListener",
    "disableHoverListener",
    "disableInteractive",
    "disableTouchListener",
    "enterDelay",
    "enterNextDelay",
    "enterTouchDelay",
    "followCursor",
    "id",
    "leaveDelay",
    "leaveTouchDelay",
    "onClose",
    "onOpen",
    "open",
    "placement",
    "PopperComponent",
    "PopperProps",
    "title",
    "TransitionComponent",
    "TransitionProps"
];
function round(value) {
    return Math.round(value * 100000) / 100000;
}
const useUtilityClasses = (ownerState)=>{
    const { classes , disableInteractive , arrow , touch , placement  } = ownerState;
    const slots = {
        popper: [
            'popper',
            !disableInteractive && 'popperInteractive',
            arrow && 'popperArrow'
        ],
        tooltip: [
            'tooltip',
            arrow && 'tooltipArrow',
            touch && 'touch',
            `tooltipPlacement${_capitalizeDefault.default(placement.split('-')[0])}`
        ],
        arrow: [
            'arrow'
        ]
    };
    return _base.unstable_composeClasses(slots, _tooltipClasses.getTooltipUtilityClass, classes);
};
const TooltipPopper = _styledDefault.default(_popperDefault.default, {
    name: 'MuiTooltip',
    slot: 'Popper',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.popper,
            !ownerState.disableInteractive && styles.popperInteractive,
            ownerState.arrow && styles.popperArrow,
            !ownerState.open && styles.popperClose
        ];
    }
})(({ theme , ownerState , open  })=>_extendsDefault.default({
        zIndex: theme.zIndex.tooltip,
        pointerEvents: 'none'
    }, !ownerState.disableInteractive && {
        pointerEvents: 'auto'
    }, !open && {
        pointerEvents: 'none'
    }, ownerState.arrow && {
        [`&[data-popper-placement*="bottom"] .${_tooltipClassesDefault.default.arrow}`]: {
            top: 0,
            marginTop: '-0.71em',
            '&::before': {
                transformOrigin: '0 100%'
            }
        },
        [`&[data-popper-placement*="top"] .${_tooltipClassesDefault.default.arrow}`]: {
            bottom: 0,
            marginBottom: '-0.71em',
            '&::before': {
                transformOrigin: '100% 0'
            }
        },
        [`&[data-popper-placement*="right"] .${_tooltipClassesDefault.default.arrow}`]: _extendsDefault.default({}, !ownerState.isRtl ? {
            left: 0,
            marginLeft: '-0.71em'
        } : {
            right: 0,
            marginRight: '-0.71em'
        }, {
            height: '1em',
            width: '0.71em',
            '&::before': {
                transformOrigin: '100% 100%'
            }
        }),
        [`&[data-popper-placement*="left"] .${_tooltipClassesDefault.default.arrow}`]: _extendsDefault.default({}, !ownerState.isRtl ? {
            right: 0,
            marginRight: '-0.71em'
        } : {
            left: 0,
            marginLeft: '-0.71em'
        }, {
            height: '1em',
            width: '0.71em',
            '&::before': {
                transformOrigin: '0 0'
            }
        })
    })
);
const TooltipTooltip = _styledDefault.default('div', {
    name: 'MuiTooltip',
    slot: 'Tooltip',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.tooltip,
            ownerState.touch && styles.touch,
            ownerState.arrow && styles.tooltipArrow,
            styles[`tooltipPlacement${_capitalizeDefault.default(ownerState.placement.split('-')[0])}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        backgroundColor: _system.alpha(theme.palette.grey[700], 0.92),
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        padding: '4px 8px',
        fontSize: theme.typography.pxToRem(11),
        maxWidth: 300,
        margin: 2,
        wordWrap: 'break-word',
        fontWeight: theme.typography.fontWeightMedium
    }, ownerState.arrow && {
        position: 'relative',
        margin: 0
    }, ownerState.touch && {
        padding: '8px 16px',
        fontSize: theme.typography.pxToRem(14),
        lineHeight: `${round(16 / 14)}em`,
        fontWeight: theme.typography.fontWeightRegular
    }, {
        [`.${_tooltipClassesDefault.default.popper}[data-popper-placement*="left"] &`]: _extendsDefault.default({
            transformOrigin: 'right center'
        }, !ownerState.isRtl ? _extendsDefault.default({
            marginRight: '14px'
        }, ownerState.touch && {
            marginRight: '24px'
        }) : _extendsDefault.default({
            marginLeft: '14px'
        }, ownerState.touch && {
            marginLeft: '24px'
        })),
        [`.${_tooltipClassesDefault.default.popper}[data-popper-placement*="right"] &`]: _extendsDefault.default({
            transformOrigin: 'left center'
        }, !ownerState.isRtl ? _extendsDefault.default({
            marginLeft: '14px'
        }, ownerState.touch && {
            marginLeft: '24px'
        }) : _extendsDefault.default({
            marginRight: '14px'
        }, ownerState.touch && {
            marginRight: '24px'
        })),
        [`.${_tooltipClassesDefault.default.popper}[data-popper-placement*="top"] &`]: _extendsDefault.default({
            transformOrigin: 'center bottom',
            marginBottom: '14px'
        }, ownerState.touch && {
            marginBottom: '24px'
        }),
        [`.${_tooltipClassesDefault.default.popper}[data-popper-placement*="bottom"] &`]: _extendsDefault.default({
            transformOrigin: 'center top',
            marginTop: '14px'
        }, ownerState.touch && {
            marginTop: '24px'
        })
    })
);
const TooltipArrow = _styledDefault.default('span', {
    name: 'MuiTooltip',
    slot: 'Arrow',
    overridesResolver: (props, styles)=>styles.arrow
})(({ theme  })=>({
        overflow: 'hidden',
        position: 'absolute',
        width: '1em',
        height: '0.71em',
        boxSizing: 'border-box',
        color: _system.alpha(theme.palette.grey[700], 0.9),
        '&::before': {
            content: '""',
            margin: 'auto',
            display: 'block',
            width: '100%',
            height: '100%',
            backgroundColor: 'currentColor',
            transform: 'rotate(45deg)'
        }
    })
);
let hystersisOpen = false;
let hystersisTimer = null;
function testReset() {
    hystersisOpen = false;
    clearTimeout(hystersisTimer);
}
function composeEventHandler(handler, eventHandler) {
    return (event)=>{
        if (eventHandler) eventHandler(event);
        handler(event);
    };
} // TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
const Tooltip = /*#__PURE__*/ _react.forwardRef(function Tooltip(inProps, ref) {
    var _components$Popper, _ref, _components$Transitio, _components$Tooltip, _components$Arrow, _componentsProps$popp;
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTooltip'
    });
    const { arrow =false , children , components ={} , componentsProps ={} , describeChild =false , disableFocusListener =false , disableHoverListener =false , disableInteractive: disableInteractiveProp = false , disableTouchListener =false , enterDelay =100 , enterNextDelay =0 , enterTouchDelay =700 , followCursor =false , id: idProp , leaveDelay =0 , leaveTouchDelay =1500 , onClose , onOpen , open: openProp , placement ='bottom' , PopperComponent: PopperComponentProp , PopperProps ={} , title , TransitionComponent: TransitionComponentProp = _growDefault.default , TransitionProps  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const theme = _useThemeDefault.default();
    const isRtl = theme.direction === 'rtl';
    const [childNode, setChildNode] = _react.useState();
    const [arrowRef, setArrowRef] = _react.useState(null);
    const ignoreNonTouchEvents = _react.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = _react.useRef();
    const enterTimer = _react.useRef();
    const leaveTimer = _react.useRef();
    const touchTimer = _react.useRef();
    const [openState, setOpenState] = _useControlledDefault.default({
        controlled: openProp,
        default: false,
        name: 'Tooltip',
        state: 'open'
    });
    let open = openState;
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const { current: isControlled  } = _react.useRef(openProp !== undefined); // eslint-disable-next-line react-hooks/rules-of-hooks
        _react.useEffect(()=>{
            if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') console.error([
                'MUI: You are providing a disabled `button` child to the Tooltip component.',
                'A disabled element does not fire events.',
                "Tooltip needs to listen to the child element's events to display the title.",
                '',
                'Add a simple wrapper element, such as a `span`.'
            ].join('\n'));
        }, [
            title,
            childNode,
            isControlled
        ]);
    }
    const id = _useIdDefault.default(idProp);
    const prevUserSelect = _react.useRef();
    const stopTouchInteraction = _react.useCallback(()=>{
        if (prevUserSelect.current !== undefined) {
            document.body.style.WebkitUserSelect = prevUserSelect.current;
            prevUserSelect.current = undefined;
        }
        clearTimeout(touchTimer.current);
    }, []);
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(closeTimer.current);
            clearTimeout(enterTimer.current);
            clearTimeout(leaveTimer.current);
            stopTouchInteraction();
        };
    }, [
        stopTouchInteraction
    ]);
    const handleOpen = (event)=>{
        clearTimeout(hystersisTimer);
        hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
        // We can skip rerendering when the tooltip is already open.
        // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
        setOpenState(true);
        if (onOpen && !open) onOpen(event);
    };
    const handleClose = _useEventCallbackDefault.default(/**
   * @param {React.SyntheticEvent | Event} event
   */ (event)=>{
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(()=>{
            hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);
        if (onClose && open) onClose(event);
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(()=>{
            ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
    });
    const handleEnter = (event)=>{
        if (ignoreNonTouchEvents.current && event.type !== 'touchstart') return;
         // Remove the title ahead of time.
        // We don't want to wait for the next render commit.
        // We would risk displaying two tooltips at the same time (native + this one).
        if (childNode) childNode.removeAttribute('title');
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        if (enterDelay || hystersisOpen && enterNextDelay) enterTimer.current = setTimeout(()=>{
            handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
        else handleOpen(event);
    };
    const handleLeave = (event)=>{
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        leaveTimer.current = setTimeout(()=>{
            handleClose(event);
        }, leaveDelay);
    };
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _useIsFocusVisibleDefault.default(); // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
    // We just need to re-render the Tooltip if the focus-visible state changes.
    const [, setChildIsFocusVisible] = _react.useState(false);
    const handleBlur = (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
            setChildIsFocusVisible(false);
            handleLeave(event);
        }
    };
    const handleFocus = (event)=>{
        // Workaround for https://github.com/facebook/react/issues/7769
        // The autoFocus of React might trigger the event before the componentDidMount.
        // We need to account for this eventuality.
        if (!childNode) setChildNode(event.currentTarget);
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
            setChildIsFocusVisible(true);
            handleEnter(event);
        }
    };
    const detectTouchStart = (event)=>{
        ignoreNonTouchEvents.current = true;
        const childrenProps = children.props;
        if (childrenProps.onTouchStart) childrenProps.onTouchStart(event);
    };
    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;
    const handleTouchStart = (event)=>{
        detectTouchStart(event);
        clearTimeout(leaveTimer.current);
        clearTimeout(closeTimer.current);
        stopTouchInteraction();
        prevUserSelect.current = document.body.style.WebkitUserSelect; // Prevent iOS text selection on long-tap.
        document.body.style.WebkitUserSelect = 'none';
        touchTimer.current = setTimeout(()=>{
            document.body.style.WebkitUserSelect = prevUserSelect.current;
            handleEnter(event);
        }, enterTouchDelay);
    };
    const handleTouchEnd = (event)=>{
        if (children.props.onTouchEnd) children.props.onTouchEnd(event);
        stopTouchInteraction();
        clearTimeout(leaveTimer.current);
        leaveTimer.current = setTimeout(()=>{
            handleClose(event);
        }, leaveTouchDelay);
    };
    _react.useEffect(()=>{
        if (!open) return undefined;
        /**
     * @param {KeyboardEvent} nativeEvent
     */ function handleKeyDown(nativeEvent) {
            // IE11, Edge (prior to using Bink?) use 'Esc'
            if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') handleClose(nativeEvent);
        }
        document.addEventListener('keydown', handleKeyDown);
        return ()=>{
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [
        handleClose,
        open
    ]);
    const handleUseRef = _useForkRefDefault.default(setChildNode, ref);
    const handleFocusRef = _useForkRefDefault.default(focusVisibleRef, handleUseRef);
    const handleRef = _useForkRefDefault.default(children.ref, handleFocusRef); // There is no point in displaying an empty tooltip.
    if (title === '') open = false;
    const positionRef = _react.useRef({
        x: 0,
        y: 0
    });
    const popperRef = _react.useRef();
    const handleMouseMove = (event)=>{
        const childrenProps = children.props;
        if (childrenProps.onMouseMove) childrenProps.onMouseMove(event);
        positionRef.current = {
            x: event.clientX,
            y: event.clientY
        };
        if (popperRef.current) popperRef.current.update();
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === 'string';
    if (describeChild) {
        nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
        nameOrDescProps['aria-describedby'] = open ? id : null;
    } else {
        nameOrDescProps['aria-label'] = titleIsString ? title : null;
        nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
    }
    const childrenProps1 = _extendsDefault.default({}, nameOrDescProps, other, children.props, {
        className: _clsxDefault.default(other.className, children.props.className),
        onTouchStart: detectTouchStart,
        ref: handleRef
    }, followCursor ? {
        onMouseMove: handleMouseMove
    } : {});
    childrenProps1['data-mui-internal-clone-element'] = true; // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) console.error([
            'MUI: The `children` component of the Tooltip is not forwarding its props correctly.',
            'Please make sure that props are spread on the same element that the ref is applied to.'
        ].join('\n'));
    }, [
        childNode
    ]);
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
        childrenProps1.onTouchStart = handleTouchStart;
        childrenProps1.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
        childrenProps1.onMouseOver = composeEventHandler(handleMouseOver, childrenProps1.onMouseOver);
        childrenProps1.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps1.onMouseLeave);
        if (!disableInteractive) {
            interactiveWrapperListeners.onMouseOver = handleMouseOver;
            interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
        }
    }
    if (!disableFocusListener) {
        childrenProps1.onFocus = composeEventHandler(handleFocus, childrenProps1.onFocus);
        childrenProps1.onBlur = composeEventHandler(handleBlur, childrenProps1.onBlur);
        if (!disableInteractive) {
            interactiveWrapperListeners.onFocus = handleFocus;
            interactiveWrapperListeners.onBlur = handleBlur;
        }
    }
    if (children.props.title) console.error([
        'MUI: You have provided a `title` prop to the child of <Tooltip />.',
        `Remove this title prop \`${children.props.title}\` or the Tooltip component.`
    ].join('\n'));
    const popperOptions = _react.useMemo(()=>{
        var _PopperProps$popperOp;
        let tooltipModifiers = [
            {
                name: 'arrow',
                enabled: Boolean(arrowRef),
                options: {
                    element: arrowRef,
                    padding: 4
                }
            }
        ];
        if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
        return _extendsDefault.default({}, PopperProps.popperOptions, {
            modifiers: tooltipModifiers
        });
    }, [
        arrowRef,
        PopperProps
    ]);
    const ownerState = _extendsDefault.default({}, props, {
        isRtl,
        arrow,
        disableInteractive,
        placement,
        PopperComponentProp,
        touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses(ownerState);
    const PopperComponent = (_components$Popper = components.Popper) != null ? _components$Popper : TooltipPopper;
    const TransitionComponent = (_ref = (_components$Transitio = components.Transition) != null ? _components$Transitio : TransitionComponentProp) != null ? _ref : _growDefault.default;
    const TooltipComponent = (_components$Tooltip = components.Tooltip) != null ? _components$Tooltip : TooltipTooltip;
    const ArrowComponent = (_components$Arrow = components.Arrow) != null ? _components$Arrow : TooltipArrow;
    const popperProps = _base.appendOwnerState(PopperComponent, _extendsDefault.default({}, PopperProps, componentsProps.popper), ownerState);
    const transitionProps = _base.appendOwnerState(TransitionComponent, _extendsDefault.default({}, TransitionProps, componentsProps.transition), ownerState);
    const tooltipProps = _base.appendOwnerState(TooltipComponent, _extendsDefault.default({}, componentsProps.tooltip), ownerState);
    const tooltipArrowProps = _base.appendOwnerState(ArrowComponent, _extendsDefault.default({}, componentsProps.arrow), ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _react.cloneElement(children, childrenProps1),
            /*#__PURE__*/ _jsxRuntime.jsx(PopperComponent, _extendsDefault.default({
                as: PopperComponentProp != null ? PopperComponentProp : _popperDefault.default,
                placement: placement,
                anchorEl: followCursor ? {
                    getBoundingClientRect: ()=>({
                            top: positionRef.current.y,
                            left: positionRef.current.x,
                            right: positionRef.current.x,
                            bottom: positionRef.current.y,
                            width: 0,
                            height: 0
                        })
                } : childNode,
                popperRef: popperRef,
                open: childNode ? open : false,
                id: id,
                transition: true
            }, interactiveWrapperListeners, popperProps, {
                className: _clsxDefault.default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
                popperOptions: popperOptions,
                children: ({ TransitionProps: TransitionPropsInner  })=>{
                    var _componentsProps$tool, _componentsProps$arro;
                    return /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
                        timeout: theme.transitions.duration.shorter
                    }, TransitionPropsInner, transitionProps, {
                        children: /*#__PURE__*/ _jsxRuntime.jsxs(TooltipComponent, _extendsDefault.default({}, tooltipProps, {
                            className: _clsxDefault.default(classes.tooltip, (_componentsProps$tool = componentsProps.tooltip) == null ? void 0 : _componentsProps$tool.className),
                            children: [
                                title,
                                arrow ? /*#__PURE__*/ _jsxRuntime.jsx(ArrowComponent, _extendsDefault.default({}, tooltipArrowProps, {
                                    className: _clsxDefault.default(classes.arrow, (_componentsProps$arro = componentsProps.arrow) == null ? void 0 : _componentsProps$arro.className),
                                    ref: setArrowRef
                                })) : null
                            ]
                        }))
                    }));
                }
            }))
        ]
    });
});
Tooltip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */ arrow: _propTypesDefault.default.bool,
    /**
   * Tooltip reference element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The components used for each slot inside the Tooltip.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Arrow: _propTypesDefault.default.elementType,
        Popper: _propTypesDefault.default.elementType,
        Tooltip: _propTypesDefault.default.elementType,
        Transition: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Tooltip.
   * Note that `componentsProps.popper` prop values win over `PopperProps`
   * and `componentsProps.transition` prop values win over `TransitionProps` if both are applied.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        arrow: _propTypesDefault.default.object,
        popper: _propTypesDefault.default.object,
        tooltip: _propTypesDefault.default.object,
        transition: _propTypesDefault.default.object
    }),
    /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */ describeChild: _propTypesDefault.default.bool,
    /**
   * Do not respond to focus-visible events.
   * @default false
   */ disableFocusListener: _propTypesDefault.default.bool,
    /**
   * Do not respond to hover events.
   * @default false
   */ disableHoverListener: _propTypesDefault.default.bool,
    /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */ disableInteractive: _propTypesDefault.default.bool,
    /**
   * Do not respond to long press touch events.
   * @default false
   */ disableTouchListener: _propTypesDefault.default.bool,
    /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */ enterDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */ enterNextDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */ enterTouchDelay: _propTypesDefault.default.number,
    /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */ followCursor: _propTypesDefault.default.bool,
    /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */ id: _propTypesDefault.default.string,
    /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */ leaveDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */ leaveTouchDelay: _propTypesDefault.default.number,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */ onOpen: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * Tooltip placement.
   * @default 'bottom'
   */ placement: _propTypesDefault.default.oneOf([
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * The component used for the popper.
   * @default Popper
   */ PopperComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Popper`](/api/popper/) element.
   * @default {}
   */ PopperProps: _propTypesDefault.default.object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Tooltip title. Zero-length titles string are never displayed.
   */ title: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .node.isRequired,
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = Tooltip;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../styles/styled":"32xTg","../styles/useTheme":"5nWMX","../styles/useThemeProps":"dewuS","../utils/capitalize":"lwNtZ","../Grow":"9py3h","../Popper":"fRdIk","../utils/useEventCallback":"bucP2","../utils/useForkRef":"Q1vCZ","../utils/useId":"99ilJ","../utils/useIsFocusVisible":"6c2qt","../utils/useControlled":"68YU6","./tooltipClasses":"gj2D4","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fRdIk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_popperDefault.default
);
var _popper = require("./Popper");
var _popperDefault = parcelHelpers.interopDefault(_popper);

},{"./Popper":"djLqP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djLqP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _popperUnstyled = require("@mui/base/PopperUnstyled");
var _popperUnstyledDefault = parcelHelpers.interopDefault(_popperUnstyled);
var _system = require("@mui/system");
var _utils = require("@mui/utils");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _styles = require("../styles");
var _jsxRuntime = require("react/jsx-runtime");
const PopperRoot = _styles.styled(_popperUnstyledDefault.default, {
    name: 'MuiPopper',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({});
/**
 *
 * Demos:
 *
 * - [Autocomplete](https://mui.com/components/autocomplete/)
 * - [Menus](https://mui.com/components/menus/)
 * - [Popper](https://mui.com/components/popper/)
 *
 * API:
 *
 * - [Popper API](https://mui.com/api/popper/)
 */ const Popper = /*#__PURE__*/ _react.forwardRef(function Popper(inProps, ref) {
    const theme = _system.useThemeWithoutDefault();
    const props = _styles.useThemeProps({
        props: inProps,
        name: 'MuiPopper'
    });
    return /*#__PURE__*/ _jsxRuntime.jsx(PopperRoot, _extendsDefault.default({
        direction: theme == null ? void 0 : theme.direction
    }, props, {
        ref: ref
    }));
});
Popper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */ anchorEl: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]),
    /**
   * Popper render function or node.
   */ children: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.node,
        _propTypesDefault.default.func
    ]),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _utils.HTMLElementType,
        _propTypesDefault.default.func
    ]),
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */ modifiers: _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
        data: _propTypesDefault.default.object,
        effect: _propTypesDefault.default.func,
        enabled: _propTypesDefault.default.bool,
        fn: _propTypesDefault.default.func,
        name: _propTypesDefault.default.any,
        options: _propTypesDefault.default.object,
        phase: _propTypesDefault.default.oneOf([
            'afterMain',
            'afterRead',
            'afterWrite',
            'beforeMain',
            'beforeRead',
            'beforeWrite',
            'main',
            'read',
            'write'
        ]),
        requires: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        requiresIfExists: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string)
    })),
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * Popper placement.
   * @default 'bottom'
   */ placement: _propTypesDefault.default.oneOf([
        'auto-end',
        'auto-start',
        'auto',
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */ popperOptions: _propTypesDefault.default.shape({
        modifiers: _propTypesDefault.default.array,
        onFirstUpdate: _propTypesDefault.default.func,
        placement: _propTypesDefault.default.oneOf([
            'auto-end',
            'auto-start',
            'auto',
            'bottom-end',
            'bottom-start',
            'bottom',
            'left-end',
            'left-start',
            'left',
            'right-end',
            'right-start',
            'right',
            'top-end',
            'top-start',
            'top'
        ]),
        strategy: _propTypesDefault.default.oneOf([
            'absolute',
            'fixed'
        ])
    }),
    /**
   * A ref that points to the used popper instance.
   */ popperRef: _utils.refType,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */ transition: _propTypesDefault.default.bool
};
exports.default = Popper;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@mui/base/PopperUnstyled":"hxXeM","@mui/system":"Q0Zql","@mui/utils":"cttLn","prop-types":"7wKI2","react":"21dqq","../styles":"1lzai","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gj2D4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTooltipUtilityClass", ()=>getTooltipUtilityClass
);
var _base = require("@mui/base");
function getTooltipUtilityClass(slot) {
    return _base.generateUtilityClass('MuiTooltip', slot);
}
const tooltipClasses = _base.generateUtilityClasses('MuiTooltip', [
    'popper',
    'popperInteractive',
    'popperArrow',
    'popperClose',
    'tooltip',
    'tooltipArrow',
    'touch',
    'tooltipPlacementLeft',
    'tooltipPlacementRight',
    'tooltipPlacementTop',
    'tooltipPlacementBottom',
    'arrow'
]);
exports.default = tooltipClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7a8aj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSpeedDialActionUtilityClass", ()=>getSpeedDialActionUtilityClass
);
var _base = require("@mui/base");
function getSpeedDialActionUtilityClass(slot) {
    return _base.generateUtilityClass('MuiSpeedDialAction', slot);
}
const speedDialActionClasses = _base.generateUtilityClasses('MuiSpeedDialAction', [
    'fab',
    'fabClosed',
    'staticTooltip',
    'staticTooltipClosed',
    'staticTooltipLabel',
    'tooltipPlacementLeft',
    'tooltipPlacementRight'
]);
exports.default = speedDialActionClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2IXgn":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$74de = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$74de.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _dialogs = require("../../store/dialogs");
var _vaults = require("../../store/vaults");
var _newVault = require("./new-vault");
var _newVaultDefault = parcelHelpers.interopDefault(_newVault);
var _secureNote = require("./secure-note");
var _secureNoteDefault = parcelHelpers.interopDefault(_secureNote);
var _accountPassword = require("./account-password");
var _accountPasswordDefault = parcelHelpers.interopDefault(_accountPassword);
var _credentials = require("./credentials");
var _credentialsDefault = parcelHelpers.interopDefault(_credentials);
var _fileUpload = require("./file-upload");
var _fileUploadDefault = parcelHelpers.interopDefault(_fileUpload);
var _s = $RefreshSig$();
function Dialogs(props) {
    _s();
    const { worker  } = props;
    const navigate = _reactRouterDom.useNavigate();
    const dispatch = _reactRedux.useDispatch();
    const { dialogs  } = _reactRedux.useSelector(_dialogs.dialogsSelector);
    const { current  } = _reactRedux.useSelector(_vaults.vaultsSelector);
    const createNewVault = async (result)=>{
        cancelDialog(_dialogs.NEW_VAULT);
        dispatch(_vaults.createNewVault({
            worker,
            navigate,
            result
        }));
    };
    const createNewSecureNote = async (result)=>{
        cancelDialog(_dialogs.NEW_SECURE_NOTE);
        dispatch(_vaults.createNewSecureNote({
            result,
            owner: current
        }));
    };
    const createNewAccountPassword = async (result)=>{
        cancelDialog(_dialogs.NEW_ACCOUNT_PASSWORD);
        dispatch(_vaults.createNewAccountPassword({
            result,
            owner: current
        }));
    };
    const createNewCredentials = async (result)=>{
        console.log(result);
        cancelDialog(_dialogs.NEW_CREDENTIALS);
        dispatch(_vaults.createNewCredentials({
            result,
            owner: current
        }));
    };
    const createNewFileUpload = async (result)=>{
        console.log(result);
        cancelDialog(_dialogs.NEW_FILE_UPLOAD);
        dispatch(_vaults.createNewFileUpload({
            result,
            owner: current
        }));
    };
    const cancelDialog = (key)=>{
        dispatch(_dialogs.setDialogVisible([
            key,
            false
        ]));
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_newVaultDefault.default, {
                worker: worker,
                open: dialogs[_dialogs.NEW_VAULT] || false,
                handleCancel: ()=>cancelDialog(_dialogs.NEW_VAULT)
                ,
                handleOk: createNewVault
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/index.tsx",
                lineNumber: 81,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_secureNoteDefault.default, {
                open: dialogs[_dialogs.NEW_SECURE_NOTE] || false,
                handleCancel: ()=>cancelDialog(_dialogs.NEW_SECURE_NOTE)
                ,
                handleOk: createNewSecureNote
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/index.tsx",
                lineNumber: 88,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_accountPasswordDefault.default, {
                open: dialogs[_dialogs.NEW_ACCOUNT_PASSWORD] || false,
                handleCancel: ()=>cancelDialog(_dialogs.NEW_ACCOUNT_PASSWORD)
                ,
                handleOk: createNewAccountPassword
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/index.tsx",
                lineNumber: 94,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_credentialsDefault.default, {
                open: dialogs[_dialogs.NEW_CREDENTIALS] || false,
                handleCancel: ()=>cancelDialog(_dialogs.NEW_CREDENTIALS)
                ,
                handleOk: createNewCredentials
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/index.tsx",
                lineNumber: 100,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileUploadDefault.default, {
                open: dialogs[_dialogs.NEW_FILE_UPLOAD] || false,
                handleCancel: ()=>cancelDialog(_dialogs.NEW_FILE_UPLOAD)
                ,
                handleOk: createNewFileUpload
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/index.tsx",
                lineNumber: 106,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
exports.default = Dialogs;
_s(Dialogs, "KO2vu7dR2bI7CaiyOpTwL653ABs=", false, function() {
    return [
        _reactRouterDom.useNavigate,
        _reactRedux.useDispatch,
        _reactRedux.useSelector,
        _reactRedux.useSelector
    ];
});
_c = Dialogs;
var _c;
$RefreshReg$(_c, "Dialogs");

  $parcel$ReactRefreshHelpers$74de.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","react-router-dom":"fdOAw","../../store/dialogs":"3qJjA","../../store/vaults":"3zSpK","./new-vault":"jsT6Q","./secure-note":"45a4A","./account-password":"eR8kI","./credentials":"gNWnV","./file-upload":"afKQz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"jsT6Q":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$cd3b = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$cd3b.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _alert = require("@mui/material/Alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _checkbox = require("@mui/material/Checkbox");
var _checkboxDefault = parcelHelpers.interopDefault(_checkbox);
var _formControlLabel = require("@mui/material/FormControlLabel");
var _formControlLabelDefault = parcelHelpers.interopDefault(_formControlLabel);
var _dialog = require("@mui/material/Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogActions = require("@mui/material/DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogContent = require("@mui/material/DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogTitle = require("@mui/material/DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _createVault = require("../forms/create-vault");
var _createVaultDefault = parcelHelpers.interopDefault(_createVault);
function NewVaultDialog(props) {
    const { worker , open , handleCancel , handleOk  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogDefault.default, {
        open: open,
        onClose: handleCancel,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogTitleDefault.default, {
                color: "text.secondary",
                children: "New Vault"
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/new-vault.tsx",
                lineNumber: 27,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogContentDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_createVaultDefault.default, {
                        onFormSubmit: handleOk,
                        worker: worker
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/new-vault.tsx",
                        lineNumber: 29,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_alertDefault.default, {
                        sx: {
                            marginTop: 2
                        },
                        severity: "warning",
                        children: "You must memorize or write down the passphrase for your new vault"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/new-vault.tsx",
                        lineNumber: 30,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formControlLabelDefault.default, {
                        control: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_checkboxDefault.default, {}, void 0, false, void 0, void 0),
                        label: "I have memorized or written down the passphrase"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/new-vault.tsx",
                        lineNumber: 33,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/new-vault.tsx",
                lineNumber: 28,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogActionsDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        onClick: handleCancel,
                        children: "Cancel"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/new-vault.tsx",
                        lineNumber: 39,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "new-vault-form",
                        variant: "contained",
                        children: "OK"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/new-vault.tsx",
                        lineNumber: 40,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/new-vault.tsx",
                lineNumber: 38,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/dialogs/new-vault.tsx",
        lineNumber: 26,
        columnNumber: 5
    }, this);
}
exports.default = NewVaultDialog;
_c = NewVaultDialog;
var _c;
$RefreshReg$(_c, "NewVaultDialog");

  $parcel$ReactRefreshHelpers$cd3b.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Alert":"bJH0A","@mui/material/Button":"73csw","@mui/material/Checkbox":"duHVh","@mui/material/FormControlLabel":"gbxlC","@mui/material/Dialog":"ftK48","@mui/material/DialogActions":"25Z2G","@mui/material/DialogContent":"gZO7I","@mui/material/DialogTitle":"642rE","../forms/create-vault":"a6q2n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"duHVh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_checkboxDefault.default
);
parcelHelpers.export(exports, "checkboxClasses", ()=>_checkboxClassesDefault.default
);
var _checkbox = require("./Checkbox");
var _checkboxDefault = parcelHelpers.interopDefault(_checkbox);
var _checkboxClasses = require("./checkboxClasses");
var _checkboxClassesDefault = parcelHelpers.interopDefault(_checkboxClasses);
parcelHelpers.exportAll(_checkboxClasses, exports);

},{"./Checkbox":"3dHlt","./checkboxClasses":"kwxWJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dHlt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _switchBase = require("../internal/SwitchBase");
var _switchBaseDefault = parcelHelpers.interopDefault(_switchBase);
var _checkBoxOutlineBlank = require("../internal/svg-icons/CheckBoxOutlineBlank");
var _checkBoxOutlineBlankDefault = parcelHelpers.interopDefault(_checkBoxOutlineBlank);
var _checkBox = require("../internal/svg-icons/CheckBox");
var _checkBoxDefault = parcelHelpers.interopDefault(_checkBox);
var _indeterminateCheckBox = require("../internal/svg-icons/IndeterminateCheckBox");
var _indeterminateCheckBoxDefault = parcelHelpers.interopDefault(_indeterminateCheckBox);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _checkboxClasses = require("./checkboxClasses");
var _checkboxClassesDefault = parcelHelpers.interopDefault(_checkboxClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "checkedIcon",
    "color",
    "icon",
    "indeterminate",
    "indeterminateIcon",
    "inputProps",
    "size"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , indeterminate , color  } = ownerState;
    const slots = {
        root: [
            'root',
            indeterminate && 'indeterminate',
            `color${_capitalizeDefault.default(color)}`
        ]
    };
    const composedClasses = _base.unstable_composeClasses(slots, _checkboxClasses.getCheckboxUtilityClass, classes);
    return _extendsDefault.default({}, classes, composedClasses);
};
const CheckboxRoot = _styledDefault.default(_switchBaseDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiCheckbox',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.indeterminate && styles.indeterminate,
            ownerState.color !== 'default' && styles[`color${_capitalizeDefault.default(ownerState.color)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        color: theme.palette.text.secondary
    }, !ownerState.disableRipple && {
        '&:hover': {
            backgroundColor: _system.alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }
    }, ownerState.color !== 'default' && {
        [`&.${_checkboxClassesDefault.default.checked}, &.${_checkboxClassesDefault.default.indeterminate}`]: {
            color: theme.palette[ownerState.color].main
        },
        [`&.${_checkboxClassesDefault.default.disabled}`]: {
            color: theme.palette.action.disabled
        }
    })
);
const defaultCheckedIcon = /*#__PURE__*/ _jsxRuntime.jsx(_checkBoxDefault.default, {});
const defaultIcon = /*#__PURE__*/ _jsxRuntime.jsx(_checkBoxOutlineBlankDefault.default, {});
const defaultIndeterminateIcon = /*#__PURE__*/ _jsxRuntime.jsx(_indeterminateCheckBoxDefault.default, {});
const Checkbox = /*#__PURE__*/ _react.forwardRef(function Checkbox(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiCheckbox'
    });
    const { checkedIcon =defaultCheckedIcon , color ='primary' , icon: iconProp = defaultIcon , indeterminate =false , indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon , inputProps , size ='medium'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extendsDefault.default({}, props, {
        color,
        indeterminate,
        size
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(CheckboxRoot, _extendsDefault.default({
        type: "checkbox",
        inputProps: _extendsDefault.default({
            'data-indeterminate': indeterminate
        }, inputProps),
        icon: /*#__PURE__*/ _react.cloneElement(icon, {
            fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
        }),
        checkedIcon: /*#__PURE__*/ _react.cloneElement(indeterminateIcon, {
            fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
        }),
        ownerState: ownerState,
        ref: ref
    }, other, {
        classes: classes
    }));
});
Checkbox.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the component is checked.
   */ checked: _propTypesDefault.default.bool,
    /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */ checkedIcon: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'default',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The default checked state. Use when the component is not controlled.
   */ defaultChecked: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */ icon: _propTypesDefault.default.node,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */ indeterminate: _propTypesDefault.default.bool,
    /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */ indeterminateIcon: _propTypesDefault.default.node,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */ onChange: _propTypesDefault.default.func,
    /**
   * If `true`, the `input` element is required.
   */ required: _propTypesDefault.default.bool,
    /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */ value: _propTypesDefault.default.any
};
exports.default = Checkbox;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","@mui/utils":"cttLn","@mui/base":"656dE","@mui/system":"Q0Zql","../internal/SwitchBase":"hk8fm","../internal/svg-icons/CheckBoxOutlineBlank":"hZn7k","../internal/svg-icons/CheckBox":"kanVs","../internal/svg-icons/IndeterminateCheckBox":"eAXu9","../utils/capitalize":"lwNtZ","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./checkboxClasses":"kwxWJ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hk8fm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _switchBaseClasses = require("./switchBaseClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "autoFocus",
    "checked",
    "checkedIcon",
    "className",
    "defaultChecked",
    "disabled",
    "disableFocusRipple",
    "edge",
    "icon",
    "id",
    "inputProps",
    "inputRef",
    "name",
    "onBlur",
    "onChange",
    "onFocus",
    "readOnly",
    "required",
    "tabIndex",
    "type",
    "value"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , checked , disabled , edge  } = ownerState;
    const slots = {
        root: [
            'root',
            checked && 'checked',
            disabled && 'disabled',
            edge && `edge${_capitalizeDefault.default(edge)}`
        ],
        input: [
            'input'
        ]
    };
    return _base.unstable_composeClasses(slots, _switchBaseClasses.getSwitchBaseUtilityClass, classes);
};
const SwitchBaseRoot = _styledDefault.default(_buttonBaseDefault.default)(({ ownerState  })=>_extendsDefault.default({
        padding: 9,
        borderRadius: '50%'
    }, ownerState.edge === 'start' && {
        marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
        marginRight: ownerState.size === 'small' ? -3 : -12
    })
);
const SwitchBaseInput = _styledDefault.default('input')({
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
});
/**
 * @ignore - internal component.
 */ const SwitchBase = /*#__PURE__*/ _react.forwardRef(function SwitchBase(props, ref) {
    const { autoFocus , checked: checkedProp , checkedIcon , className , defaultChecked , disabled: disabledProp , disableFocusRipple =false , edge =false , icon , id , inputProps , inputRef , name , onBlur , onChange , onFocus , readOnly , required , tabIndex , type , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [checked, setCheckedState] = _useControlledDefault.default({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'SwitchBase',
        state: 'checked'
    });
    const muiFormControl = _useFormControlDefault.default();
    const handleFocus = (event)=>{
        if (onFocus) onFocus(event);
        if (muiFormControl && muiFormControl.onFocus) muiFormControl.onFocus(event);
    };
    const handleBlur = (event)=>{
        if (onBlur) onBlur(event);
        if (muiFormControl && muiFormControl.onBlur) muiFormControl.onBlur(event);
    };
    const handleInputChange = (event)=>{
        // Workaround for https://github.com/facebook/react/issues/9023
        if (event.nativeEvent.defaultPrevented) return;
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) // TODO v6: remove the second argument.
        onChange(event, newChecked);
    };
    let disabled = disabledProp;
    if (muiFormControl) {
        if (typeof disabled === 'undefined') disabled = muiFormControl.disabled;
    }
    const hasLabelFor = type === 'checkbox' || type === 'radio';
    const ownerState = _extendsDefault.default({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsxs(SwitchBaseRoot, _extendsDefault.default({
        component: "span",
        className: _clsxDefault.default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(SwitchBaseInput, _extendsDefault.default({
                autoFocus: autoFocus,
                checked: checkedProp,
                defaultChecked: defaultChecked,
                className: classes.input,
                disabled: disabled,
                id: hasLabelFor && id,
                name: name,
                onChange: handleInputChange,
                readOnly: readOnly,
                ref: inputRef,
                required: required,
                ownerState: ownerState,
                tabIndex: tabIndex,
                type: type
            }, type === 'checkbox' && value === undefined ? {} : {
                value
            }, inputProps)),
            checked ? checkedIcon : icon
        ]
    }));
}); // NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.
SwitchBase.propTypes = {
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is checked.
   */ checked: _propTypesDefault.default.bool,
    /**
   * The icon to display when the component is checked.
   */ checkedIcon: _propTypesDefault.default.node.isRequired,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ defaultChecked: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */ edge: _propTypesDefault.default.oneOf([
        'end',
        'start',
        false
    ]),
    /**
   * The icon to display when the component is unchecked.
   */ icon: _propTypesDefault.default.node.isRequired,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */ inputProps: _propTypesDefault.default.object,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /*
   * @ignore
   */ name: _propTypesDefault.default.string,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   */ required: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.object,
    /**
   * @ignore
   */ tabIndex: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * The input component prop `type`.
   */ type: _propTypesDefault.default.string.isRequired,
    /**
   * The value of the component.
   */ value: _propTypesDefault.default.any
};
exports.default = SwitchBase;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","../utils/capitalize":"lwNtZ","../styles/styled":"32xTg","../utils/useControlled":"68YU6","../FormControl/useFormControl":"4Clb9","../ButtonBase":"aeHoF","./switchBaseClasses":"kYBSN","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kYBSN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSwitchBaseUtilityClass", ()=>getSwitchBaseUtilityClass
);
var _base = require("@mui/base");
function getSwitchBaseUtilityClass(slot) {
    return _base.generateUtilityClass('PrivateSwitchBase', slot);
}
const switchBaseClasses = _base.generateUtilityClasses('PrivateSwitchBase', [
    'root',
    'checked',
    'disabled',
    'input',
    'edgeStart',
    'edgeEnd'
]);
exports.default = switchBaseClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZn7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}), 'CheckBoxOutlineBlank');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kanVs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), 'CheckBox');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eAXu9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _createSvgIcon = require("../../utils/createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
exports.default = _createSvgIconDefault.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), 'IndeterminateCheckBox');

},{"react":"21dqq","../../utils/createSvgIcon":"f9XLK","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kwxWJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCheckboxUtilityClass", ()=>getCheckboxUtilityClass
);
var _base = require("@mui/base");
function getCheckboxUtilityClass(slot) {
    return _base.generateUtilityClass('MuiCheckbox', slot);
}
const checkboxClasses = _base.generateUtilityClasses('MuiCheckbox', [
    'root',
    'checked',
    'disabled',
    'indeterminate',
    'colorPrimary',
    'colorSecondary'
]);
exports.default = checkboxClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gbxlC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formControlLabelDefault.default
);
parcelHelpers.export(exports, "formControlLabelClasses", ()=>_formControlLabelClassesDefault.default
);
var _formControlLabel = require("./FormControlLabel");
var _formControlLabelDefault = parcelHelpers.interopDefault(_formControlLabel);
var _formControlLabelClasses = require("./formControlLabelClasses");
var _formControlLabelClassesDefault = parcelHelpers.interopDefault(_formControlLabelClasses);
parcelHelpers.exportAll(_formControlLabelClasses, exports);

},{"./FormControlLabel":"5h0NR","./formControlLabelClasses":"2PiDA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5h0NR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormControlLabelRoot", ()=>FormControlLabelRoot
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _formControl = require("../FormControl");
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _formControlLabelClasses = require("./formControlLabelClasses");
var _formControlLabelClassesDefault = parcelHelpers.interopDefault(_formControlLabelClasses);
var _formControlState = require("../FormControl/formControlState");
var _formControlStateDefault = parcelHelpers.interopDefault(_formControlState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "checked",
    "className",
    "componentsProps",
    "control",
    "disabled",
    "disableTypography",
    "inputRef",
    "label",
    "labelPlacement",
    "name",
    "onChange",
    "value"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disabled , labelPlacement , error  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            `labelPlacement${_capitalizeDefault.default(labelPlacement)}`,
            error && 'error'
        ],
        label: [
            'label',
            disabled && 'disabled'
        ]
    };
    return _base.unstable_composeClasses(slots, _formControlLabelClasses.getFormControlLabelUtilityClasses, classes);
};
const FormControlLabelRoot = _styledDefault.default('label', {
    name: 'MuiFormControlLabel',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            {
                [`& .${_formControlLabelClassesDefault.default.label}`]: styles.label
            },
            styles.root,
            styles[`labelPlacement${_capitalizeDefault.default(ownerState.labelPlacement)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'inline-flex',
        alignItems: 'center',
        cursor: 'pointer',
        // For correct alignment with the text.
        verticalAlign: 'middle',
        WebkitTapHighlightColor: 'transparent',
        marginLeft: -11,
        marginRight: 16,
        // used for row presentation of radio/checkbox
        [`&.${_formControlLabelClassesDefault.default.disabled}`]: {
            cursor: 'default'
        }
    }, ownerState.labelPlacement === 'start' && {
        flexDirection: 'row-reverse',
        marginLeft: 16,
        // used for row presentation of radio/checkbox
        marginRight: -11
    }, ownerState.labelPlacement === 'top' && {
        flexDirection: 'column-reverse',
        marginLeft: 16
    }, ownerState.labelPlacement === 'bottom' && {
        flexDirection: 'column',
        marginLeft: 16
    }, {
        [`& .${_formControlLabelClassesDefault.default.label}`]: {
            [`&.${_formControlLabelClassesDefault.default.disabled}`]: {
                color: theme.palette.text.disabled
            }
        }
    })
);
/**
 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
 * Use this component if you want to display an extra label.
 */ const FormControlLabel = /*#__PURE__*/ _react.forwardRef(function FormControlLabel(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiFormControlLabel'
    });
    const { className , componentsProps ={} , control , disabled: disabledProp , disableTypography , label: labelProp , labelPlacement ='end'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const muiFormControl = _formControl.useFormControl();
    let disabled = disabledProp;
    if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') disabled = control.props.disabled;
    if (typeof disabled === 'undefined' && muiFormControl) disabled = muiFormControl.disabled;
    const controlProps = {
        disabled
    };
    [
        'checked',
        'name',
        'onChange',
        'value',
        'inputRef'
    ].forEach((key)=>{
        if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') controlProps[key] = props[key];
    });
    const fcs = _formControlStateDefault.default({
        props,
        muiFormControl,
        states: [
            'error'
        ]
    });
    const ownerState = _extendsDefault.default({}, props, {
        disabled,
        labelPlacement,
        error: fcs.error
    });
    const classes = useUtilityClasses(ownerState);
    let label = labelProp;
    if (label != null && label.type !== _typographyDefault.default && !disableTypography) label = /*#__PURE__*/ _jsxRuntime.jsx(_typographyDefault.default, _extendsDefault.default({
        component: "span",
        className: classes.label
    }, componentsProps.typography, {
        children: label
    }));
    return /*#__PURE__*/ _jsxRuntime.jsxs(FormControlLabelRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: [
            /*#__PURE__*/ _react.cloneElement(control, controlProps),
            label
        ]
    }));
});
FormControlLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the component appears selected.
   */ checked: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The props used for each slot inside.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        typography: _propTypesDefault.default.object
    }),
    /**
   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
   */ control: _propTypesDefault.default.element.isRequired,
    /**
   * If `true`, the control is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is rendered as it is passed without an additional typography node.
   */ disableTypography: _propTypesDefault.default.bool,
    /**
   * Pass a ref to the `input` element.
   */ inputRef: _utils.refType,
    /**
   * A text or an element to be used in an enclosing label element.
   */ label: _propTypesDefault.default.node,
    /**
   * The position of the label.
   * @default 'end'
   */ labelPlacement: _propTypesDefault.default.oneOf([
        'bottom',
        'end',
        'start',
        'top'
    ]),
    /**
   * @ignore
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when the state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */ onChange: _propTypesDefault.default.func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The value of the component.
   */ value: _propTypesDefault.default.any
};
exports.default = FormControlLabel;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","../FormControl":"2FZGq","../Typography":"faxSz","../utils/capitalize":"lwNtZ","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./formControlLabelClasses":"2PiDA","../FormControl/formControlState":"7wKpz","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2PiDA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormControlLabelUtilityClasses", ()=>getFormControlLabelUtilityClasses
);
var _base = require("@mui/base");
function getFormControlLabelUtilityClasses(slot) {
    return _base.generateUtilityClass('MuiFormControlLabel', slot);
}
const formControlLabelClasses = _base.generateUtilityClasses('MuiFormControlLabel', [
    'root',
    'labelPlacementStart',
    'labelPlacementTop',
    'labelPlacementBottom',
    'disabled',
    'label',
    'error'
]);
exports.default = formControlLabelClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftK48":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_dialogDefault.default
);
parcelHelpers.export(exports, "dialogClasses", ()=>_dialogClassesDefault.default
);
var _dialog = require("./Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogClasses = require("./dialogClasses");
var _dialogClassesDefault = parcelHelpers.interopDefault(_dialogClasses);
parcelHelpers.exportAll(_dialogClasses, exports);

},{"./Dialog":"20Psa","./dialogClasses":"fJvp4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"20Psa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _modal = require("../Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _fade = require("../Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _dialogClasses = require("./dialogClasses");
var _dialogClassesDefault = parcelHelpers.interopDefault(_dialogClasses);
var _dialogContext = require("./DialogContext");
var _dialogContextDefault = parcelHelpers.interopDefault(_dialogContext);
var _backdrop = require("../Backdrop");
var _backdropDefault = parcelHelpers.interopDefault(_backdrop);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-describedby",
    "aria-labelledby",
    "BackdropComponent",
    "BackdropProps",
    "children",
    "className",
    "disableEscapeKeyDown",
    "fullScreen",
    "fullWidth",
    "maxWidth",
    "onBackdropClick",
    "onClose",
    "open",
    "PaperComponent",
    "PaperProps",
    "scroll",
    "TransitionComponent",
    "transitionDuration",
    "TransitionProps"
];
const DialogBackdrop = _styledDefault.default(_backdropDefault.default, {
    name: 'MuiDialog',
    slot: 'Backdrop',
    overrides: (props, styles)=>styles.backdrop
})({
    // Improve scrollable dialog support.
    zIndex: -1
});
const useUtilityClasses = (ownerState)=>{
    const { classes , scroll , maxWidth , fullWidth , fullScreen  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        container: [
            'container',
            `scroll${_capitalizeDefault.default(scroll)}`
        ],
        paper: [
            'paper',
            `paperScroll${_capitalizeDefault.default(scroll)}`,
            `paperWidth${_capitalizeDefault.default(String(maxWidth))}`,
            fullWidth && 'paperFullWidth',
            fullScreen && 'paperFullScreen'
        ]
    };
    return _base.unstable_composeClasses(slots, _dialogClasses.getDialogUtilityClass, classes);
};
const DialogRoot = _styledDefault.default(_modalDefault.default, {
    name: 'MuiDialog',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({
    '@media print': {
        // Use !important to override the Modal inline-style.
        position: 'absolute !important'
    }
});
const DialogContainer = _styledDefault.default('div', {
    name: 'MuiDialog',
    slot: 'Container',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.container,
            styles[`scroll${_capitalizeDefault.default(ownerState.scroll)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        height: '100%',
        '@media print': {
            height: 'auto'
        },
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
    }, ownerState.scroll === 'paper' && {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
    }, ownerState.scroll === 'body' && {
        overflowY: 'auto',
        overflowX: 'hidden',
        textAlign: 'center',
        '&:after': {
            content: '""',
            display: 'inline-block',
            verticalAlign: 'middle',
            height: '100%',
            width: '0'
        }
    })
);
const DialogPaper = _styledDefault.default(_paperDefault.default, {
    name: 'MuiDialog',
    slot: 'Paper',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.paper,
            styles[`scrollPaper${_capitalizeDefault.default(ownerState.scroll)}`],
            styles[`paperWidth${_capitalizeDefault.default(String(ownerState.maxWidth))}`],
            ownerState.fullWidth && styles.paperFullWidth,
            ownerState.fullScreen && styles.paperFullScreen
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        margin: 32,
        position: 'relative',
        overflowY: 'auto',
        // Fix IE11 issue, to remove at some point.
        '@media print': {
            overflowY: 'visible',
            boxShadow: 'none'
        }
    }, ownerState.scroll === 'paper' && {
        display: 'flex',
        flexDirection: 'column',
        maxHeight: 'calc(100% - 64px)'
    }, ownerState.scroll === 'body' && {
        display: 'inline-block',
        verticalAlign: 'middle',
        textAlign: 'left' // 'initial' doesn't work on IE11
    }, !ownerState.maxWidth && {
        maxWidth: 'calc(100% - 64px)'
    }, ownerState.maxWidth === 'xs' && {
        maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
        [`&.${_dialogClassesDefault.default.paperScrollBody}`]: {
            [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 64)]: {
                maxWidth: 'calc(100% - 64px)'
            }
        }
    }, ownerState.maxWidth !== 'xs' && {
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
        [`&.${_dialogClassesDefault.default.paperScrollBody}`]: {
            [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 64)]: {
                maxWidth: 'calc(100% - 64px)'
            }
        }
    }, ownerState.fullWidth && {
        width: 'calc(100% - 64px)'
    }, ownerState.fullScreen && {
        margin: 0,
        width: '100%',
        maxWidth: '100%',
        height: '100%',
        maxHeight: 'none',
        borderRadius: 0,
        [`&.${_dialogClassesDefault.default.paperScrollBody}`]: {
            margin: 0,
            maxWidth: '100%'
        }
    })
);
/**
 * Dialogs are overlaid modal paper based components with a backdrop.
 */ const Dialog = /*#__PURE__*/ _react.forwardRef(function Dialog(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDialog'
    });
    const theme = _useThemeDefault.default();
    const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
    };
    const { 'aria-describedby': ariaDescribedby , 'aria-labelledby': ariaLabelledbyProp , BackdropComponent , BackdropProps , children , className , disableEscapeKeyDown =false , fullScreen =false , fullWidth =false , maxWidth ='sm' , onBackdropClick , onClose , open , PaperComponent =_paperDefault.default , PaperProps ={} , scroll ='paper' , TransitionComponent =_fadeDefault.default , transitionDuration =defaultTransitionDuration , TransitionProps  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        disableEscapeKeyDown,
        fullScreen,
        fullWidth,
        maxWidth,
        scroll
    });
    const classes = useUtilityClasses(ownerState);
    const backdropClick = _react.useRef();
    const handleMouseDown = (event)=>{
        // We don't want to close the dialog when clicking the dialog content.
        // Make sure the event starts and ends on the same DOM element.
        backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event)=>{
        // Ignore the events not coming from the "backdrop".
        if (!backdropClick.current) return;
        backdropClick.current = null;
        if (onBackdropClick) onBackdropClick(event);
        if (onClose) onClose(event, 'backdropClick');
    };
    const ariaLabelledby = _utils.unstable_useId(ariaLabelledbyProp);
    const dialogContextValue = _react.useMemo(()=>{
        return {
            titleId: ariaLabelledby
        };
    }, [
        ariaLabelledby
    ]);
    return /*#__PURE__*/ _jsxRuntime.jsx(DialogRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        BackdropProps: _extendsDefault.default({
            transitionDuration,
            as: BackdropComponent
        }, BackdropProps),
        closeAfterTransition: true,
        BackdropComponent: DialogBackdrop,
        disableEscapeKeyDown: disableEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref,
        onClick: handleBackdropClick,
        ownerState: ownerState
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
            appear: true,
            in: open,
            timeout: transitionDuration,
            role: "presentation"
        }, TransitionProps, {
            children: /*#__PURE__*/ _jsxRuntime.jsx(DialogContainer, {
                className: _clsxDefault.default(classes.container),
                onMouseDown: handleMouseDown,
                ownerState: ownerState,
                children: /*#__PURE__*/ _jsxRuntime.jsx(DialogPaper, _extendsDefault.default({
                    as: PaperComponent,
                    elevation: 24,
                    role: "dialog",
                    "aria-describedby": ariaDescribedby,
                    "aria-labelledby": ariaLabelledby
                }, PaperProps, {
                    className: _clsxDefault.default(classes.paper, PaperProps.className),
                    ownerState: ownerState,
                    children: /*#__PURE__*/ _jsxRuntime.jsx(_dialogContextDefault.default.Provider, {
                        value: dialogContextValue,
                        children: children
                    })
                }))
            })
        }))
    }));
});
Dialog.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The id(s) of the element(s) that describe the dialog.
   */ 'aria-describedby': _propTypesDefault.default.string,
    /**
   * The id(s) of the element(s) that label the dialog.
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */ BackdropComponent: _propTypesDefault.default.elementType,
    /**
   * @ignore
   */ BackdropProps: _propTypesDefault.default.object,
    /**
   * Dialog children, usually the included sub-components.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */ disableEscapeKeyDown: _propTypesDefault.default.bool,
    /**
   * If `true`, the dialog is full-screen.
   * @default false
   */ fullScreen: _propTypesDefault.default.bool,
    /**
   * If `true`, the dialog stretches to `maxWidth`.
   *
   * Notice that the dialog width grow is limited by the default margin.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * Determine the max-width of the dialog.
   * The dialog width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'sm'
   */ maxWidth: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            false
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Callback fired when the backdrop is clicked.
   */ onBackdropClick: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * The component used to render the body of the dialog.
   * @default Paper
   */ PaperComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Paper`](/api/paper/) element.
   * @default {}
   */ PaperProps: _propTypesDefault.default.object,
    /**
   * Determine the container for scrolling the dialog.
   * @default 'paper'
   */ scroll: _propTypesDefault.default.oneOf([
        'body',
        'paper'
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = Dialog;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","@mui/utils":"cttLn","../utils/capitalize":"lwNtZ","../Modal":"lSUh1","../Fade":"eB1a4","../Paper":"6IiTP","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","./dialogClasses":"fJvp4","./DialogContext":"9xRZm","../Backdrop":"23PLD","../styles/useTheme":"5nWMX","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJvp4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDialogUtilityClass", ()=>getDialogUtilityClass
);
var _base = require("@mui/base");
function getDialogUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDialog', slot);
}
const dialogClasses = _base.generateUtilityClasses('MuiDialog', [
    'root',
    'scrollPaper',
    'scrollBody',
    'container',
    'paper',
    'paperScrollPaper',
    'paperScrollBody',
    'paperWidthFalse',
    'paperWidthXs',
    'paperWidthSm',
    'paperWidthMd',
    'paperWidthLg',
    'paperWidthXl',
    'paperFullWidth',
    'paperFullScreen'
]);
exports.default = dialogClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xRZm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const DialogContext = /*#__PURE__*/ _react.createContext({});
DialogContext.displayName = 'DialogContext';
exports.default = DialogContext;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25Z2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_dialogActionsDefault.default
);
parcelHelpers.export(exports, "dialogActionsClasses", ()=>_dialogActionsClassesDefault.default
);
var _dialogActions = require("./DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogActionsClasses = require("./dialogActionsClasses");
var _dialogActionsClassesDefault = parcelHelpers.interopDefault(_dialogActionsClasses);
parcelHelpers.exportAll(_dialogActionsClasses, exports);

},{"./DialogActions":"4xGCu","./dialogActionsClasses":"gaH17","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4xGCu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _dialogActionsClasses = require("./dialogActionsClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "disableSpacing"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disableSpacing  } = ownerState;
    const slots = {
        root: [
            'root',
            !disableSpacing && 'spacing'
        ]
    };
    return _base.unstable_composeClasses(slots, _dialogActionsClasses.getDialogActionsUtilityClass, classes);
};
const DialogActionsRoot = _styledDefault.default('div', {
    name: 'MuiDialogActions',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            !ownerState.disableSpacing && styles.spacing
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end',
        flex: '0 0 auto'
    }, !ownerState.disableSpacing && {
        '& > :not(:first-of-type)': {
            marginLeft: 8
        }
    })
);
const DialogActions = /*#__PURE__*/ _react.forwardRef(function DialogActions(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDialogActions'
    });
    const { className , disableSpacing =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        disableSpacing
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(DialogActionsRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other));
});
DialogActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */ disableSpacing: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = DialogActions;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./dialogActionsClasses":"gaH17","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gaH17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDialogActionsUtilityClass", ()=>getDialogActionsUtilityClass
);
var _base = require("@mui/base");
function getDialogActionsUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDialogActions', slot);
}
const dialogActionsClasses = _base.generateUtilityClasses('MuiDialogActions', [
    'root',
    'spacing'
]);
exports.default = dialogActionsClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZO7I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_dialogContentDefault.default
);
parcelHelpers.export(exports, "dialogContentClasses", ()=>_dialogContentClassesDefault.default
);
var _dialogContent = require("./DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogContentClasses = require("./dialogContentClasses");
var _dialogContentClassesDefault = parcelHelpers.interopDefault(_dialogContentClasses);
parcelHelpers.exportAll(_dialogContentClasses, exports);

},{"./DialogContent":"gZreI","./dialogContentClasses":"oJjRp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZreI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _dialogContentClasses = require("./dialogContentClasses");
var _dialogTitleClasses = require("../DialogTitle/dialogTitleClasses");
var _dialogTitleClassesDefault = parcelHelpers.interopDefault(_dialogTitleClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "dividers"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , dividers  } = ownerState;
    const slots = {
        root: [
            'root',
            dividers && 'dividers'
        ]
    };
    return _base.unstable_composeClasses(slots, _dialogContentClasses.getDialogContentUtilityClass, classes);
};
const DialogContentRoot = _styledDefault.default('div', {
    name: 'MuiDialogContent',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.dividers && styles.dividers
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        flex: '1 1 auto',
        // Add iOS momentum scrolling for iOS < 13.0
        WebkitOverflowScrolling: 'touch',
        overflowY: 'auto',
        padding: '20px 24px'
    }, ownerState.dividers ? {
        padding: '16px 24px',
        borderTop: `1px solid ${theme.palette.divider}`,
        borderBottom: `1px solid ${theme.palette.divider}`
    } : {
        [`.${_dialogTitleClassesDefault.default.root} + &`]: {
            paddingTop: 0
        }
    })
);
const DialogContent = /*#__PURE__*/ _react.forwardRef(function DialogContent(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDialogContent'
    });
    const { className , dividers =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        dividers
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(DialogContentRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other));
});
DialogContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Display the top and bottom dividers.
   * @default false
   */ dividers: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = DialogContent;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./dialogContentClasses":"oJjRp","../DialogTitle/dialogTitleClasses":"6HAYZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"oJjRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDialogContentUtilityClass", ()=>getDialogContentUtilityClass
);
var _base = require("@mui/base");
function getDialogContentUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDialogContent', slot);
}
const dialogContentClasses = _base.generateUtilityClasses('MuiDialogContent', [
    'root',
    'dividers'
]);
exports.default = dialogContentClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HAYZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDialogTitleUtilityClass", ()=>getDialogTitleUtilityClass
);
var _base = require("@mui/base");
function getDialogTitleUtilityClass(slot) {
    return _base.generateUtilityClass('MuiDialogTitle', slot);
}
const dialogTitleClasses = _base.generateUtilityClasses('MuiDialogTitle', [
    'root'
]);
exports.default = dialogTitleClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"642rE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_dialogTitleDefault.default
);
parcelHelpers.export(exports, "dialogTitleClasses", ()=>_dialogTitleClassesDefault.default
);
var _dialogTitle = require("./DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _dialogTitleClasses = require("./dialogTitleClasses");
var _dialogTitleClassesDefault = parcelHelpers.interopDefault(_dialogTitleClasses);
parcelHelpers.exportAll(_dialogTitleClasses, exports);

},{"./DialogTitle":"dIj98","./dialogTitleClasses":"6HAYZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dIj98":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _dialogTitleClasses = require("./dialogTitleClasses");
var _dialogContext = require("../Dialog/DialogContext");
var _dialogContextDefault = parcelHelpers.interopDefault(_dialogContext);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "id"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ]
    };
    return _base.unstable_composeClasses(slots, _dialogTitleClasses.getDialogTitleUtilityClass, classes);
};
const DialogTitleRoot = _styledDefault.default(_typographyDefault.default, {
    name: 'MuiDialogTitle',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({
    padding: '16px 24px',
    flex: '0 0 auto'
});
const DialogTitle = /*#__PURE__*/ _react.forwardRef(function DialogTitle(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiDialogTitle'
    });
    const { className , id: idProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = props;
    const classes = useUtilityClasses(ownerState);
    const { titleId: id = idProp  } = _react.useContext(_dialogContextDefault.default);
    return /*#__PURE__*/ _jsxRuntime.jsx(DialogTitleRoot, _extendsDefault.default({
        component: "h2",
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref,
        variant: "h6",
        id: id
    }, other));
});
DialogTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * @ignore
   */ id: _propTypesDefault.default.string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = DialogTitle;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../Typography":"faxSz","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./dialogTitleClasses":"6HAYZ","../Dialog/DialogContext":"9xRZm","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6q2n":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$c9ea = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$c9ea.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _diceware = require("../../diceware");
var _dicewareDefault = parcelHelpers.interopDefault(_diceware);
var _s = $RefreshSig$();
function CreateVaultForm(props) {
    _s();
    const { worker  } = props;
    const { onFormSubmit  } = props;
    const [label, setLabel] = _react.useState("");
    const [labelError, setLabelError] = _react.useState(false);
    const [labelHelperText, setLabelHelperText] = _react.useState("");
    const [password, setPassword] = _react.useState("");
    const onLabelChange = (e)=>setLabel(e.target.value)
    ;
    const onSubmit = (e)=>{
        e.preventDefault();
        setLabelHelperText("");
        setLabelError(false);
        if (label.trim() === "") {
            setLabelHelperText("Label may not be empty");
            setLabelError(true);
            setLabel("");
        } else onFormSubmit({
            label,
            password
        });
    };
    const onGenerate = (passphrase)=>{
        setPassword(passphrase);
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "new-vault-form",
        onSubmit: onSubmit,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            sx: {
                paddingTop: 1
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "vault-label",
                    label: "Label",
                    autoFocus: true,
                    onChange: onLabelChange,
                    value: label,
                    error: labelError,
                    helperText: labelHelperText,
                    variant: "outlined",
                    placeholder: "Label for the new vault"
                }, void 0, false, {
                    fileName: "src/authenticated/forms/create-vault.tsx",
                    lineNumber: 49,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dicewareDefault.default, {
                    onGenerate: onGenerate,
                    worker: worker
                }, void 0, false, {
                    fileName: "src/authenticated/forms/create-vault.tsx",
                    lineNumber: 60,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/authenticated/forms/create-vault.tsx",
            lineNumber: 48,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/forms/create-vault.tsx",
        lineNumber: 47,
        columnNumber: 5
    }, this);
}
exports.default = CreateVaultForm;
_s(CreateVaultForm, "kaPREODkIjjL+p7Fti0iCBTjp7A=");
_c = CreateVaultForm;
var _c;
$RefreshReg$(_c, "CreateVaultForm");

  $parcel$ReactRefreshHelpers$c9ea.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","../../diceware":"7sKW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"7sKW5":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$7621 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$7621.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _box = require("@mui/material/Box");
var _boxDefault = parcelHelpers.interopDefault(_box);
var _card = require("@mui/material/Card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _cardContent = require("@mui/material/CardContent");
var _cardContentDefault = parcelHelpers.interopDefault(_cardContent);
var _divider = require("@mui/material/Divider");
var _dividerDefault = parcelHelpers.interopDefault(_divider);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _slider = require("@mui/material/Slider");
var _sliderDefault = parcelHelpers.interopDefault(_slider);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _toggleButton = require("@mui/material/ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _tooltip = require("@mui/material/Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _typography = require("@mui/material/Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _refresh = require("@mui/icons-material/Refresh");
var _refreshDefault = parcelHelpers.interopDefault(_refresh);
var _numbers = require("@mui/icons-material/Numbers");
var _numbersDefault = parcelHelpers.interopDefault(_numbers);
var _s = $RefreshSig$();
function WordCount(props) {
    const { words , onChange , onChangeCommitted  } = props;
    function valueText(value) {
        return `${value} words`;
    }
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
                sx: {
                    m: 2
                },
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                    spacing: 1,
                    sx: {
                        width: "100%"
                    },
                    alignItems: "center",
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                            sx: {
                                fontSize: 14,
                                maxWidth: 360,
                                textAlign: "center"
                            },
                            color: "text.secondary",
                            gutterBottom: true,
                            children: "Adjust the slider to use more words for your passphrase"
                        }, void 0, false, {
                            fileName: "src/diceware.tsx",
                            lineNumber: 36,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
                            sx: {
                                width: 240
                            },
                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_sliderDefault.default, {
                                "aria-label": "Words",
                                defaultValue: 6,
                                getAriaValueText: valueText,
                                valueLabelDisplay: "auto",
                                onChange: (e, value)=>onChange(value)
                                ,
                                onChangeCommitted: ()=>onChangeCommitted()
                                ,
                                step: 1,
                                value: words,
                                marks: true,
                                min: 6,
                                max: 16
                            }, void 0, false, {
                                fileName: "src/diceware.tsx",
                                lineNumber: 45,
                                columnNumber: 13
                            }, this)
                        }, void 0, false, {
                            fileName: "src/diceware.tsx",
                            lineNumber: 44,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                            sx: {
                                fontSize: 12,
                                maxWidth: 360,
                                textAlign: "center"
                            },
                            color: "text.secondary",
                            gutterBottom: true,
                            children: "Using more words for your passphrase will make your secrets safer but be sure you can remember it!"
                        }, void 0, false, {
                            fileName: "src/diceware.tsx",
                            lineNumber: 60,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src/diceware.tsx",
                    lineNumber: 35,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/diceware.tsx",
                lineNumber: 34,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {}, void 0, false, {
                fileName: "src/diceware.tsx",
                lineNumber: 70,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
}
_c = WordCount;
function Diceware(props) {
    _s();
    const { worker  } = props;
    const { onGenerate  } = props;
    const [passphrase1, setPassphrase] = _react.useState(null);
    const [bits1, setBits] = _react.useState(null);
    const [words1, setWords] = _react.useState(6);
    const [wordsVisible, setWordsVisible] = _react.useState(false);
    const generate = async ()=>{
        const [passphrase, bits] = await worker.generatePassphrase(words1);
        setPassphrase(passphrase);
        setBits(Math.round(bits));
        onGenerate(passphrase);
    };
    const onChange = (words)=>setWords(words)
    ;
    const onChangeCommitted = ()=>generate()
    ;
    _react.useEffect(()=>{
        generate();
    }, []);
    if (!passphrase1) return null;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_cardDefault.default, {
        variant: "outlined",
        sx: {
            backgroundColor: "transparent"
        },
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_cardContentDefault.default, {
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
                    sx: {
                        marginBottom: 1
                    },
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                        direction: "row",
                        sx: {
                            width: "100%",
                            alignItems: "flex-end"
                        },
                        justifyContent: "space-between",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                                direction: "row",
                                spacing: 2,
                                children: [
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_tooltipDefault.default, {
                                        title: "Increase number of words",
                                        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_toggleButtonDefault.default, {
                                            selected: wordsVisible,
                                            onClick: ()=>setWordsVisible(!wordsVisible)
                                            ,
                                            "aria-label": "word count",
                                            component: "span",
                                            value: "words",
                                            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_numbersDefault.default, {}, void 0, false, {
                                                fileName: "src/diceware.tsx",
                                                lineNumber: 124,
                                                columnNumber: 19
                                            }, this)
                                        }, void 0, false, {
                                            fileName: "src/diceware.tsx",
                                            lineNumber: 117,
                                            columnNumber: 17
                                        }, this)
                                    }, void 0, false, {
                                        fileName: "src/diceware.tsx",
                                        lineNumber: 116,
                                        columnNumber: 15
                                    }, this),
                                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                                        children: [
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                                                children: "Passphrase"
                                            }, void 0, false, {
                                                fileName: "src/diceware.tsx",
                                                lineNumber: 128,
                                                columnNumber: 17
                                            }, this),
                                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                                                sx: {
                                                    fontSize: 12
                                                },
                                                color: "text.secondary",
                                                gutterBottom: true,
                                                children: [
                                                    words1,
                                                    " words, ",
                                                    bits1,
                                                    " bit entropy"
                                                ]
                                            }, void 0, true, {
                                                fileName: "src/diceware.tsx",
                                                lineNumber: 129,
                                                columnNumber: 17
                                            }, this)
                                        ]
                                    }, void 0, true, {
                                        fileName: "src/diceware.tsx",
                                        lineNumber: 127,
                                        columnNumber: 15
                                    }, this)
                                ]
                            }, void 0, true, {
                                fileName: "src/diceware.tsx",
                                lineNumber: 115,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_tooltipDefault.default, {
                                title: "Generate a new passphrase",
                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                                    onClick: generate,
                                    "aria-label": "refresh",
                                    sx: {
                                        width: 36,
                                        height: 36
                                    },
                                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_refreshDefault.default, {}, void 0, false, {
                                        fileName: "src/diceware.tsx",
                                        lineNumber: 144,
                                        columnNumber: 17
                                    }, this)
                                }, void 0, false, {
                                    fileName: "src/diceware.tsx",
                                    lineNumber: 139,
                                    columnNumber: 15
                                }, this)
                            }, void 0, false, {
                                fileName: "src/diceware.tsx",
                                lineNumber: 138,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true, {
                        fileName: "src/diceware.tsx",
                        lineNumber: 110,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/diceware.tsx",
                    lineNumber: 109,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dividerDefault.default, {}, void 0, false, {
                    fileName: "src/diceware.tsx",
                    lineNumber: 150,
                    columnNumber: 9
                }, this),
                wordsVisible && /*#__PURE__*/ _jsxDevRuntime.jsxDEV(WordCount, {
                    words: words1,
                    onChange: onChange,
                    onChangeCommitted: onChangeCommitted
                }, void 0, false, {
                    fileName: "src/diceware.tsx",
                    lineNumber: 153,
                    columnNumber: 11
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_boxDefault.default, {
                    sx: {
                        m: 2,
                        marginBottom: 0
                    },
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_typographyDefault.default, {
                        sx: {
                            fontSize: 24,
                            textAlign: "center"
                        },
                        color: "text.secondary",
                        children: passphrase1
                    }, void 0, false, {
                        fileName: "src/diceware.tsx",
                        lineNumber: 161,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "src/diceware.tsx",
                    lineNumber: 160,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/diceware.tsx",
            lineNumber: 108,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/diceware.tsx",
        lineNumber: 107,
        columnNumber: 5
    }, this);
}
exports.default = Diceware;
_s(Diceware, "8z8biQ4GuoVzxNP0ud+yoYjxa94=");
_c1 = Diceware;
var _c, _c1;
$RefreshReg$(_c, "WordCount");
$RefreshReg$(_c1, "Diceware");

  $parcel$ReactRefreshHelpers$7621.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Box":"eQD0H","@mui/material/Card":"hWYZ3","@mui/material/CardContent":"lVecn","@mui/material/Divider":"lHE5Y","@mui/material/IconButton":"38BrD","@mui/material/Slider":"lasgU","@mui/material/Stack":"cuThX","@mui/material/ToggleButton":"1n5QG","@mui/material/Tooltip":"5uL59","@mui/material/Typography":"faxSz","@mui/icons-material/Refresh":"bFVOC","@mui/icons-material/Numbers":"k2MkZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"hWYZ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_cardDefault.default
);
parcelHelpers.export(exports, "cardClasses", ()=>_cardClassesDefault.default
);
var _card = require("./Card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _cardClasses = require("./cardClasses");
var _cardClassesDefault = parcelHelpers.interopDefault(_cardClasses);
parcelHelpers.exportAll(_cardClasses, exports);

},{"./Card":"7uU3h","./cardClasses":"bATNQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7uU3h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _cardClasses = require("./cardClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "raised"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ]
    };
    return _base.unstable_composeClasses(slots, _cardClasses.getCardUtilityClass, classes);
};
const CardRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiCard',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})(()=>{
    return {
        overflow: 'hidden'
    };
});
const Card = /*#__PURE__*/ _react.forwardRef(function Card(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiCard'
    });
    const { className , raised =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        raised
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(CardRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        elevation: raised ? 8 : undefined,
        ref: ref,
        ownerState: ownerState
    }, other));
});
Card.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the card will use raised styling.
   * @default false
   */ raised: _utils.chainPropTypes(_propTypesDefault.default.bool, (props)=>{
        if (props.raised && props.variant === 'outlined') return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
        return null;
    }),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = Card;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","../Paper":"6IiTP","./cardClasses":"bATNQ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bATNQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCardUtilityClass", ()=>getCardUtilityClass
);
var _base = require("@mui/base");
function getCardUtilityClass(slot) {
    return _base.generateUtilityClass('MuiCard', slot);
}
const cardClasses = _base.generateUtilityClasses('MuiCard', [
    'root'
]);
exports.default = cardClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lVecn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_cardContentDefault.default
);
parcelHelpers.export(exports, "cardContentClasses", ()=>_cardContentClassesDefault.default
);
var _cardContent = require("./CardContent");
var _cardContentDefault = parcelHelpers.interopDefault(_cardContent);
var _cardContentClasses = require("./cardContentClasses");
var _cardContentClassesDefault = parcelHelpers.interopDefault(_cardContentClasses);
parcelHelpers.exportAll(_cardContentClasses, exports);

},{"./CardContent":"1IjsV","./cardContentClasses":"1cKja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1IjsV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _cardContentClasses = require("./cardContentClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ]
    };
    return _base.unstable_composeClasses(slots, _cardContentClasses.getCardContentUtilityClass, classes);
};
const CardContentRoot = _styledDefault.default('div', {
    name: 'MuiCardContent',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})(()=>{
    return {
        padding: 16,
        '&:last-child': {
            paddingBottom: 24
        }
    };
});
const CardContent = /*#__PURE__*/ _react.forwardRef(function CardContent(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiCardContent'
    });
    const { className , component ='div'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        component
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(CardContentRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other));
});
CardContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = CardContent;

},{"@babel/runtime/helpers/esm/extends":"fTBFS","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../styles/styled":"32xTg","../styles/useThemeProps":"dewuS","./cardContentClasses":"1cKja","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cKja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCardContentUtilityClass", ()=>getCardContentUtilityClass
);
var _base = require("@mui/base");
function getCardContentUtilityClass(slot) {
    return _base.generateUtilityClass('MuiCardContent', slot);
}
const cardContentClasses = _base.generateUtilityClasses('MuiCardContent', [
    'root'
]);
exports.default = cardContentClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lasgU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_sliderDefault.default
);
var _slider = require("./Slider");
var _sliderDefault = parcelHelpers.interopDefault(_slider);
parcelHelpers.exportAll(_slider, exports);

},{"./Slider":"6NY0U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NY0U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sliderClasses", ()=>sliderClasses
);
parcelHelpers.export(exports, "SliderRoot", ()=>SliderRoot
);
parcelHelpers.export(exports, "SliderRail", ()=>SliderRail
);
parcelHelpers.export(exports, "SliderTrack", ()=>SliderTrack
);
parcelHelpers.export(exports, "SliderThumb", ()=>SliderThumb
);
parcelHelpers.export(exports, "SliderValueLabel", ()=>SliderValueLabel
);
parcelHelpers.export(exports, "SliderMark", ()=>SliderMark
);
parcelHelpers.export(exports, "SliderMarkLabel", ()=>SliderMarkLabel
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _sliderUnstyled = require("@mui/base/SliderUnstyled");
var _sliderUnstyledDefault = parcelHelpers.interopDefault(_sliderUnstyled);
var _system = require("@mui/system");
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _shouldSpreadAdditionalProps = require("../utils/shouldSpreadAdditionalProps");
var _shouldSpreadAdditionalPropsDefault = parcelHelpers.interopDefault(_shouldSpreadAdditionalProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "component",
    "components",
    "componentsProps",
    "color",
    "size"
];
const sliderClasses = _extendsDefault.default({}, _sliderUnstyled.sliderUnstyledClasses, _base.generateUtilityClasses('MuiSlider', [
    'colorPrimary',
    'colorSecondary',
    'thumbColorPrimary',
    'thumbColorSecondary',
    'sizeSmall',
    'thumbSizeSmall'
]));
const SliderRoot = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        const marks = ownerState.marksProp === true && ownerState.step !== null ? [
            ...Array(Math.floor((ownerState.max - ownerState.min) / ownerState.step) + 1)
        ].map((_, index)=>({
                value: ownerState.min + ownerState.step * index
            })
        ) : ownerState.marksProp || [];
        const marked = marks.length > 0 && marks.some((mark)=>mark.label
        );
        return [
            styles.root,
            styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            ownerState.size !== 'medium' && styles[`size${_capitalizeDefault.default(ownerState.size)}`],
            marked && styles.marked,
            ownerState.orientation === 'vertical' && styles.vertical,
            ownerState.track === 'inverted' && styles.trackInverted,
            ownerState.track === false && styles.trackFalse
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        borderRadius: 12,
        boxSizing: 'content-box',
        display: 'inline-block',
        position: 'relative',
        cursor: 'pointer',
        touchAction: 'none',
        color: theme.palette[ownerState.color].main,
        WebkitTapHighlightColor: 'transparent'
    }, ownerState.orientation === 'horizontal' && _extendsDefault.default({
        height: 4,
        width: '100%',
        padding: '13px 0',
        // The primary input mechanism of the device includes a pointing device of limited accuracy.
        '@media (pointer: coarse)': {
            // Reach 42px touch target, about ~8mm on screen.
            padding: '20px 0'
        }
    }, ownerState.size === 'small' && {
        height: 2
    }, ownerState.marked && {
        marginBottom: 20
    }), ownerState.orientation === 'vertical' && _extendsDefault.default({
        height: '100%',
        width: 4,
        padding: '0 13px',
        // The primary input mechanism of the device includes a pointing device of limited accuracy.
        '@media (pointer: coarse)': {
            // Reach 42px touch target, about ~8mm on screen.
            padding: '0 20px'
        }
    }, ownerState.size === 'small' && {
        width: 2
    }, ownerState.marked && {
        marginRight: 44
    }), {
        '@media print': {
            colorAdjust: 'exact'
        },
        [`&.${sliderClasses.disabled}`]: {
            pointerEvents: 'none',
            cursor: 'default',
            color: theme.palette.grey[400]
        },
        [`&.${sliderClasses.dragging}`]: {
            [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
                transition: 'none'
            }
        }
    })
);
SliderRoot.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderRail = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'Rail',
    overridesResolver: (props, styles)=>styles.rail
})(({ ownerState  })=>_extendsDefault.default({
        display: 'block',
        position: 'absolute',
        borderRadius: 'inherit',
        backgroundColor: 'currentColor',
        opacity: 0.38
    }, ownerState.orientation === 'horizontal' && {
        width: '100%',
        height: 'inherit',
        top: '50%',
        transform: 'translateY(-50%)'
    }, ownerState.orientation === 'vertical' && {
        height: '100%',
        width: 'inherit',
        left: '50%',
        transform: 'translateX(-50%)'
    }, ownerState.track === 'inverted' && {
        opacity: 1
    })
);
SliderRail.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderTrack = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'Track',
    overridesResolver: (props, styles)=>styles.track
})(({ theme , ownerState  })=>{
    const color = theme.palette.mode === 'light' ? _system.lighten(theme.palette[ownerState.color].main, 0.62) : _system.darken(theme.palette[ownerState.color].main, 0.5);
    return _extendsDefault.default({
        display: 'block',
        position: 'absolute',
        borderRadius: 'inherit',
        border: '1px solid currentColor',
        backgroundColor: 'currentColor',
        transition: theme.transitions.create([
            'left',
            'width',
            'bottom',
            'height'
        ], {
            duration: theme.transitions.duration.shortest
        })
    }, ownerState.size === 'small' && {
        border: 'none'
    }, ownerState.orientation === 'horizontal' && {
        height: 'inherit',
        top: '50%',
        transform: 'translateY(-50%)'
    }, ownerState.orientation === 'vertical' && {
        width: 'inherit',
        left: '50%',
        transform: 'translateX(-50%)'
    }, ownerState.track === false && {
        display: 'none'
    }, ownerState.track === 'inverted' && {
        backgroundColor: color,
        borderColor: color
    });
});
SliderTrack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderThumb = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'Thumb',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.thumb,
            styles[`thumbColor${_capitalizeDefault.default(ownerState.color)}`],
            ownerState.size !== 'medium' && styles[`thumbSize${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        position: 'absolute',
        width: 20,
        height: 20,
        boxSizing: 'border-box',
        borderRadius: '50%',
        outline: 0,
        backgroundColor: 'currentColor',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: theme.transitions.create([
            'box-shadow',
            'left',
            'bottom'
        ], {
            duration: theme.transitions.duration.shortest
        })
    }, ownerState.size === 'small' && {
        width: 12,
        height: 12
    }, ownerState.orientation === 'horizontal' && {
        top: '50%',
        transform: 'translate(-50%, -50%)'
    }, ownerState.orientation === 'vertical' && {
        left: '50%',
        transform: 'translate(-50%, 50%)'
    }, {
        '&:before': _extendsDefault.default({
            position: 'absolute',
            content: '""',
            borderRadius: 'inherit',
            width: '100%',
            height: '100%',
            boxShadow: theme.shadows[2]
        }, ownerState.size === 'small' && {
            boxShadow: 'none'
        }),
        '&::after': {
            position: 'absolute',
            content: '""',
            borderRadius: '50%',
            // 42px is the hit target
            width: 42,
            height: 42,
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)'
        },
        [`&:hover, &.${sliderClasses.focusVisible}`]: {
            boxShadow: `0px 0px 0px 8px ${_system.alpha(theme.palette[ownerState.color].main, 0.16)}`,
            '@media (hover: none)': {
                boxShadow: 'none'
            }
        },
        [`&.${sliderClasses.active}`]: {
            boxShadow: `0px 0px 0px 14px ${_system.alpha(theme.palette[ownerState.color].main, 0.16)}`
        },
        [`&.${sliderClasses.disabled}`]: {
            '&:hover': {
                boxShadow: 'none'
            }
        }
    })
);
SliderThumb.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderValueLabel = _styledDefault.default(_sliderUnstyled.SliderValueLabelUnstyled, {
    name: 'MuiSlider',
    slot: 'ValueLabel',
    overridesResolver: (props, styles)=>styles.valueLabel
})(({ theme , ownerState  })=>_extendsDefault.default({
        [`&.${sliderClasses.valueLabelOpen}`]: {
            transform: 'translateY(-100%) scale(1)'
        },
        zIndex: 1,
        whiteSpace: 'nowrap'
    }, theme.typography.body2, {
        fontWeight: 500,
        transition: theme.transitions.create([
            'transform'
        ], {
            duration: theme.transitions.duration.shortest
        }),
        top: -10,
        transformOrigin: 'bottom center',
        transform: 'translateY(-100%) scale(0)',
        position: 'absolute',
        backgroundColor: theme.palette.grey[600],
        borderRadius: 2,
        color: theme.palette.common.white,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '0.25rem 0.75rem'
    }, ownerState.size === 'small' && {
        fontSize: theme.typography.pxToRem(12),
        padding: '0.25rem 0.5rem'
    }, {
        '&:before': {
            position: 'absolute',
            content: '""',
            width: 8,
            height: 8,
            bottom: 0,
            left: '50%',
            transform: 'translate(-50%, 50%) rotate(45deg)',
            backgroundColor: 'inherit'
        }
    })
);
SliderValueLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderMark = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'Mark',
    shouldForwardProp: (prop)=>_styled.slotShouldForwardProp(prop) && prop !== 'markActive'
    ,
    overridesResolver: (props, styles)=>styles.mark
})(({ theme , ownerState , markActive  })=>_extendsDefault.default({
        position: 'absolute',
        width: 2,
        height: 2,
        borderRadius: 1,
        backgroundColor: 'currentColor'
    }, ownerState.orientation === 'horizontal' && {
        top: '50%',
        transform: 'translate(-1px, -50%)'
    }, ownerState.orientation === 'vertical' && {
        left: '50%',
        transform: 'translate(-50%, 1px)'
    }, markActive && {
        backgroundColor: theme.palette.background.paper,
        opacity: 0.8
    })
);
SliderMark.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const SliderMarkLabel = _styledDefault.default('span', {
    name: 'MuiSlider',
    slot: 'MarkLabel',
    shouldForwardProp: (prop)=>_styled.slotShouldForwardProp(prop) && prop !== 'markLabelActive'
    ,
    overridesResolver: (props, styles)=>styles.markLabel
})(({ theme , ownerState , markLabelActive  })=>_extendsDefault.default({}, theme.typography.body2, {
        color: theme.palette.text.secondary,
        position: 'absolute',
        whiteSpace: 'nowrap'
    }, ownerState.orientation === 'horizontal' && {
        top: 30,
        transform: 'translateX(-50%)',
        '@media (pointer: coarse)': {
            top: 40
        }
    }, ownerState.orientation === 'vertical' && {
        left: 36,
        transform: 'translateY(50%)',
        '@media (pointer: coarse)': {
            left: 44
        }
    }, markLabelActive && {
        color: theme.palette.text.primary
    })
);
SliderMarkLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node
};
const extendUtilityClasses = (ownerState)=>{
    const { color , size , classes ={}  } = ownerState;
    return _extendsDefault.default({}, classes, {
        root: _clsxDefault.default(classes.root, _sliderUnstyled.getSliderUtilityClass(`color${_capitalizeDefault.default(color)}`), classes[`color${_capitalizeDefault.default(color)}`], size && [
            _sliderUnstyled.getSliderUtilityClass(`size${_capitalizeDefault.default(size)}`),
            classes[`size${_capitalizeDefault.default(size)}`]
        ]),
        thumb: _clsxDefault.default(classes.thumb, _sliderUnstyled.getSliderUtilityClass(`thumbColor${_capitalizeDefault.default(color)}`), classes[`thumbColor${_capitalizeDefault.default(color)}`], size && [
            _sliderUnstyled.getSliderUtilityClass(`thumbSize${_capitalizeDefault.default(size)}`),
            classes[`thumbSize${_capitalizeDefault.default(size)}`]
        ])
    });
};
const Slider = /*#__PURE__*/ _react.forwardRef(function Slider(inputProps, ref) {
    var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;
    const props = _useThemePropsDefault.default({
        props: inputProps,
        name: 'MuiSlider'
    });
    const theme = _useThemeDefault.default();
    const isRtl = theme.direction === 'rtl';
    const { // eslint-disable-next-line react/prop-types
    component ='span' , components ={} , componentsProps ={} , color ='primary' , size ='medium'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({}, props, {
        color,
        size
    });
    const classes = extendUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_sliderUnstyledDefault.default, _extendsDefault.default({}, other, {
        isRtl: isRtl,
        components: _extendsDefault.default({
            Root: SliderRoot,
            Rail: SliderRail,
            Track: SliderTrack,
            Thumb: SliderThumb,
            ValueLabel: SliderValueLabel,
            Mark: SliderMark,
            MarkLabel: SliderMarkLabel
        }, components),
        componentsProps: _extendsDefault.default({}, componentsProps, {
            root: _extendsDefault.default({}, componentsProps.root, _shouldSpreadAdditionalPropsDefault.default(components.Root) && {
                as: component,
                ownerState: _extendsDefault.default({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
                    color,
                    size
                })
            }),
            thumb: _extendsDefault.default({}, componentsProps.thumb, _shouldSpreadAdditionalPropsDefault.default(components.Thumb) && {
                ownerState: _extendsDefault.default({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
                    color,
                    size
                })
            }),
            track: _extendsDefault.default({}, componentsProps.track, _shouldSpreadAdditionalPropsDefault.default(components.Track) && {
                ownerState: _extendsDefault.default({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
                    color,
                    size
                })
            }),
            valueLabel: _extendsDefault.default({}, componentsProps.valueLabel, _shouldSpreadAdditionalPropsDefault.default(components.ValueLabel) && {
                ownerState: _extendsDefault.default({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
                    color,
                    size
                })
            })
        }),
        classes: classes,
        ref: ref
    }));
});
Slider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The label of the slider.
   */ 'aria-label': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-label'] != null) return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        return null;
    }),
    /**
   * The id of the element containing a label for the slider.
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */ 'aria-valuetext': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-valuetext'] != null) return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        return null;
    }),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/customization/palette/#adding-new-colors).
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'primary',
            'secondary'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Mark: _propTypesDefault.default.elementType,
        MarkLabel: _propTypesDefault.default.elementType,
        Rail: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Thumb: _propTypesDefault.default.elementType,
        Track: _propTypesDefault.default.elementType,
        ValueLabel: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Slider.
   * @default {}
   */ componentsProps: _propTypesDefault.default.shape({
        input: _propTypesDefault.default.object,
        mark: _propTypesDefault.default.object,
        markLabel: _propTypesDefault.default.object,
        rail: _propTypesDefault.default.object,
        root: _propTypesDefault.default.object,
        thumb: _propTypesDefault.default.object,
        track: _propTypesDefault.default.object,
        valueLabel: _propTypesDefault.default.shape({
            className: _propTypesDefault.default.string,
            components: _propTypesDefault.default.shape({
                Root: _propTypesDefault.default.elementType
            }),
            style: _propTypesDefault.default.object,
            value: _propTypesDefault.default.oneOfType([
                _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
                _propTypesDefault.default.number
            ]),
            valueLabelDisplay: _propTypesDefault.default.oneOf([
                'auto',
                'off',
                'on'
            ])
        })
    }),
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */ disableSwap: _propTypesDefault.default.bool,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaLabel: _propTypesDefault.default.func,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaValueText: _propTypesDefault.default.func,
    /**
   * Indicates whether the theme context has rtl direction. It is set automatically.
   * @default false
   */ isRtl: _propTypesDefault.default.bool,
    /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */ marks: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
            label: _propTypesDefault.default.node,
            value: _propTypesDefault.default.number.isRequired
        })),
        _propTypesDefault.default.bool
    ]),
    /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */ max: _propTypesDefault.default.number,
    /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */ min: _propTypesDefault.default.number,
    /**
   * Name attribute of the hidden `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */ onChangeCommitted: _propTypesDefault.default.func,
    /**
   * The component orientation.
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * A transformation function, to change the scale of the slider.
   * @default (x) => x
   */ scale: _propTypesDefault.default.func,
    /**
   * The size of the slider.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */ step: _propTypesDefault.default.number,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Tab index attribute of the hidden `input` element.
   */ tabIndex: _propTypesDefault.default.number,
    /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */ track: _propTypesDefault.default.oneOf([
        'inverted',
        'normal',
        false
    ]),
    /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */ valueLabelDisplay: _propTypesDefault.default.oneOf([
        'auto',
        'off',
        'on'
    ]),
    /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @default (x) => x
   */ valueLabelFormat: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.string
    ])
};
exports.default = Slider;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/utils":"cttLn","@mui/base":"656dE","@mui/base/SliderUnstyled":"edJYV","@mui/system":"Q0Zql","../styles/useThemeProps":"dewuS","../styles/styled":"32xTg","../styles/useTheme":"5nWMX","../utils/shouldSpreadAdditionalProps":"eECwp","../utils/capitalize":"lwNtZ","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eECwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _base = require("@mui/base");
const shouldSpreadAdditionalProps = (Slot)=>{
    return !Slot || !_base.isHostComponent(Slot);
};
exports.default = shouldSpreadAdditionalProps;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFVOC":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
}), 'Refresh');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"k2MkZ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "m20.5 10 .5-2h-4l1-4h-2l-1 4h-4l1-4h-2L9 8H5l-.5 2h4l-1 4h-4L3 16h4l-1 4h2l1-4h4l-1 4h2l1-4h4l.5-2h-4l1-4h4zm-7 4h-4l1-4h4l-1 4z"
}), 'Numbers');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"45a4A":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$e96d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e96d.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dialog = require("@mui/material/Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogActions = require("@mui/material/DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogContent = require("@mui/material/DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogTitle = require("@mui/material/DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _secureNote = require("../forms/secure-note");
var _secureNoteDefault = parcelHelpers.interopDefault(_secureNote);
function SecureNoteDialog(props) {
    const { open , handleCancel , handleOk  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogDefault.default, {
        open: open,
        onClose: handleCancel,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogTitleDefault.default, {
                color: "text.secondary",
                children: "Secure Note"
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/secure-note.tsx",
                lineNumber: 23,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogContentDefault.default, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_secureNoteDefault.default, {
                    label: "",
                    note: "",
                    onFormSubmit: handleOk
                }, void 0, false, {
                    fileName: "src/authenticated/dialogs/secure-note.tsx",
                    lineNumber: 25,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/secure-note.tsx",
                lineNumber: 24,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogActionsDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        onClick: handleCancel,
                        children: "Cancel"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/secure-note.tsx",
                        lineNumber: 28,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "secure-note-form",
                        variant: "contained",
                        children: "OK"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/secure-note.tsx",
                        lineNumber: 29,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/secure-note.tsx",
                lineNumber: 27,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/dialogs/secure-note.tsx",
        lineNumber: 22,
        columnNumber: 5
    }, this);
}
exports.default = SecureNoteDialog;
_c = SecureNoteDialog;
var _c;
$RefreshReg$(_c, "SecureNoteDialog");

  $parcel$ReactRefreshHelpers$e96d.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Button":"73csw","@mui/material/Dialog":"ftK48","@mui/material/DialogActions":"25Z2G","@mui/material/DialogContent":"gZO7I","@mui/material/DialogTitle":"642rE","../forms/secure-note":"l5823","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"l5823":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$d04a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$d04a.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _s = $RefreshSig$();
function SecureNoteForm(props) {
    _s();
    const { onFormSubmit  } = props;
    const [label, setLabel] = _react.useState(props.label);
    const [labelError, setLabelError] = _react.useState(false);
    const [note, setNote] = _react.useState(props.note);
    const [noteError, setNoteError] = _react.useState(false);
    const onLabelChange = (e)=>setLabel(e.target.value)
    ;
    const onNoteChange = (e)=>setNote(e.target.value)
    ;
    const onSubmit = (e)=>{
        e.preventDefault();
        setLabelError(false);
        setNoteError(false);
        if (label.trim() === "") {
            setLabelError(true);
            setLabel("");
        } else if (note.trim() === "") {
            setNoteError(true);
            setNote("");
        } else onFormSubmit({
            label,
            note
        });
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "secure-note-form",
        onSubmit: onSubmit,
        noValidate: true,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            sx: {
                paddingTop: 1
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "secret-label",
                    label: "Name",
                    placeholder: "Enter a secret name",
                    required: true,
                    autoFocus: true,
                    onChange: onLabelChange,
                    value: label,
                    error: labelError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/secure-note.tsx",
                    lineNumber: 46,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "secure-note",
                    label: "Note",
                    placeholder: "Enter a note",
                    required: true,
                    multiline: true,
                    rows: 6,
                    onChange: onNoteChange,
                    value: note,
                    error: noteError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/secure-note.tsx",
                    lineNumber: 56,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/authenticated/forms/secure-note.tsx",
            lineNumber: 45,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/forms/secure-note.tsx",
        lineNumber: 44,
        columnNumber: 5
    }, this);
}
exports.default = SecureNoteForm;
_s(SecureNoteForm, "1BvOGGxccYk1tMaHLUbxXRv1LHI=");
_c = SecureNoteForm;
var _c;
$RefreshReg$(_c, "SecureNoteForm");

  $parcel$ReactRefreshHelpers$d04a.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"eR8kI":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$fdd5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$fdd5.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dialog = require("@mui/material/Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogActions = require("@mui/material/DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogContent = require("@mui/material/DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogTitle = require("@mui/material/DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _accountPassword = require("../forms/account-password");
var _accountPasswordDefault = parcelHelpers.interopDefault(_accountPassword);
function AccountPasswordDialog(props) {
    const { open , handleCancel , handleOk  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogDefault.default, {
        open: open,
        onClose: handleCancel,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogTitleDefault.default, {
                color: "text.secondary",
                children: "Account Password"
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/account-password.tsx",
                lineNumber: 23,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogContentDefault.default, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_accountPasswordDefault.default, {
                    label: "",
                    account: "",
                    url: "",
                    password: "",
                    onFormSubmit: handleOk
                }, void 0, false, {
                    fileName: "src/authenticated/dialogs/account-password.tsx",
                    lineNumber: 25,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/account-password.tsx",
                lineNumber: 24,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogActionsDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        onClick: handleCancel,
                        children: "Cancel"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/account-password.tsx",
                        lineNumber: 34,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "account-password-form",
                        variant: "contained",
                        children: "OK"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/account-password.tsx",
                        lineNumber: 35,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/account-password.tsx",
                lineNumber: 33,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/dialogs/account-password.tsx",
        lineNumber: 22,
        columnNumber: 5
    }, this);
}
exports.default = AccountPasswordDialog;
_c = AccountPasswordDialog;
var _c;
$RefreshReg$(_c, "AccountPasswordDialog");

  $parcel$ReactRefreshHelpers$fdd5.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Button":"73csw","@mui/material/Dialog":"ftK48","@mui/material/DialogActions":"25Z2G","@mui/material/DialogContent":"gZO7I","@mui/material/DialogTitle":"642rE","../forms/account-password":"l0Ow0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"l0Ow0":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$ca39 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$ca39.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _viewablePassword = require("./viewable-password");
var _viewablePasswordDefault = parcelHelpers.interopDefault(_viewablePassword);
var _s = $RefreshSig$();
function AccountPasswordForm(props) {
    _s();
    const { onFormSubmit  } = props;
    const [label, setLabel] = _react.useState(props.label);
    const [labelError, setLabelError] = _react.useState(false);
    const [account, setAccount] = _react.useState(props.account);
    const [accountError, setAccountError] = _react.useState(false);
    const [url, setUrl] = _react.useState(props.url);
    const [urlError, setUrlError] = _react.useState(false);
    const [password, setPassword] = _react.useState(props.password);
    const [passwordError, setPasswordError] = _react.useState(false);
    const onLabelChange = (e)=>setLabel(e.target.value)
    ;
    const onAccountChange = (e)=>setAccount(e.target.value)
    ;
    const onUrlChange = (e)=>setUrl(e.target.value)
    ;
    const onPasswordChange = (e)=>setPassword(e.target.value)
    ;
    const onSubmit = (e)=>{
        e.preventDefault();
        setLabelError(false);
        setAccountError(false);
        setUrlError(false);
        setPasswordError(false);
        // Validation of optional URL field
        let urlIsValid = url === "" ? true : false;
        if (!urlIsValid) try {
            new URL(url);
            urlIsValid = true;
        } catch (e1) {
            urlIsValid = false;
        }
        if (label.trim() === "") {
            setLabelError(true);
            setLabel("");
        } else if (account.trim() === "") {
            setAccountError(true);
            setAccount("");
        } else if (!urlIsValid) setUrlError(true);
        else if (password.trim() === "") {
            setPasswordError(true);
            setPassword("");
        } else onFormSubmit({
            label,
            account,
            url,
            password
        });
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "account-password-form",
        onSubmit: onSubmit,
        noValidate: true,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            sx: {
                paddingTop: 1
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "secret-label",
                    label: "Name",
                    placeholder: "Enter a secret name",
                    required: true,
                    autoFocus: true,
                    onChange: onLabelChange,
                    value: label,
                    error: labelError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/account-password.tsx",
                    lineNumber: 78,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "account-name",
                    label: "Account Name",
                    placeholder: "Enter the name of the account",
                    required: true,
                    onChange: onAccountChange,
                    value: account,
                    error: accountError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/account-password.tsx",
                    lineNumber: 88,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "account-url",
                    label: "Website",
                    type: "url",
                    placeholder: "Enter a URL for the website",
                    onChange: onUrlChange,
                    value: url,
                    error: urlError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/account-password.tsx",
                    lineNumber: 97,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_viewablePasswordDefault.default, {
                    id: "account-password",
                    label: "Password",
                    placeholder: "Enter a password",
                    value: password,
                    onChange: onPasswordChange,
                    error: passwordError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/account-password.tsx",
                    lineNumber: 107,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/authenticated/forms/account-password.tsx",
            lineNumber: 77,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/forms/account-password.tsx",
        lineNumber: 76,
        columnNumber: 5
    }, this);
}
exports.default = AccountPasswordForm;
_s(AccountPasswordForm, "rb1IdyOoWjSOj/6rjUeIGfnkODA=");
_c = AccountPasswordForm;
var _c;
$RefreshReg$(_c, "AccountPasswordForm");

  $parcel$ReactRefreshHelpers$ca39.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","./viewable-password":"fQxD3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"fQxD3":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$7f19 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$7f19.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _formControl = require("@mui/material/FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _inputLabel = require("@mui/material/InputLabel");
var _inputLabelDefault = parcelHelpers.interopDefault(_inputLabel);
var _outlinedInput = require("@mui/material/OutlinedInput");
var _outlinedInputDefault = parcelHelpers.interopDefault(_outlinedInput);
var _inputAdornment = require("@mui/material/InputAdornment");
var _inputAdornmentDefault = parcelHelpers.interopDefault(_inputAdornment);
var _visibility = require("@mui/icons-material/Visibility");
var _visibilityDefault = parcelHelpers.interopDefault(_visibility);
var _visibilityOff = require("@mui/icons-material/VisibilityOff");
var _visibilityOffDefault = parcelHelpers.interopDefault(_visibilityOff);
var _s = $RefreshSig$();
function ViewablePassword(props) {
    _s();
    const { id , label , value , placeholder , onChange , error  } = props;
    const [showPassword, setShowPassword] = _react.useState(false);
    const toggleShowPassword = ()=>{
        setShowPassword(!showPassword);
    };
    const onMouseDownPassword = (event)=>{
        event.preventDefault();
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_formControlDefault.default, {
        error: error,
        variant: "outlined",
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_inputLabelDefault.default, {
                error: error,
                htmlFor: id,
                children: [
                    label,
                    " *"
                ]
            }, void 0, true, {
                fileName: "src/authenticated/forms/viewable-password.tsx",
                lineNumber: 35,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_outlinedInputDefault.default, {
                id: id,
                label: label,
                type: showPassword ? "text" : "password",
                value: value,
                onChange: onChange,
                error: error,
                placeholder: placeholder,
                autoComplete: "off",
                required: true,
                endAdornment: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_inputAdornmentDefault.default, {
                    position: "end",
                    children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                        "aria-label": "toggle password visibility",
                        onClick: toggleShowPassword,
                        onMouseDown: onMouseDownPassword,
                        edge: "end",
                        children: showPassword ? /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_visibilityOffDefault.default, {}, void 0, false, void 0, void 0) : /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_visibilityDefault.default, {}, void 0, false, void 0, void 0)
                    }, void 0, false, void 0, void 0)
                }, void 0, false, void 0, void 0)
            }, void 0, false, {
                fileName: "src/authenticated/forms/viewable-password.tsx",
                lineNumber: 38,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/forms/viewable-password.tsx",
        lineNumber: 34,
        columnNumber: 5
    }, this);
}
exports.default = ViewablePassword;
_s(ViewablePassword, "daguiRHWMFkqPgCh/ppD7CF5VuQ=");
_c = ViewablePassword;
var _c;
$RefreshReg$(_c, "ViewablePassword");

  $parcel$ReactRefreshHelpers$7f19.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/IconButton":"38BrD","@mui/material/FormControl":"2FZGq","@mui/material/InputLabel":"3Ew25","@mui/material/OutlinedInput":"jaFpb","@mui/material/InputAdornment":"dKZP6","@mui/icons-material/Visibility":"fp2M4","@mui/icons-material/VisibilityOff":"8HjK5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"dKZP6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputAdornmentDefault.default
);
parcelHelpers.export(exports, "inputAdornmentClasses", ()=>_inputAdornmentClassesDefault.default
);
var _inputAdornment = require("./InputAdornment");
var _inputAdornmentDefault = parcelHelpers.interopDefault(_inputAdornment);
var _inputAdornmentClasses = require("./inputAdornmentClasses");
var _inputAdornmentClassesDefault = parcelHelpers.interopDefault(_inputAdornmentClasses);
parcelHelpers.exportAll(_inputAdornmentClasses, exports);

},{"./InputAdornment":"jCPQn","./inputAdornmentClasses":"8FIdP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jCPQn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _base = require("@mui/base");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _formControlContext = require("../FormControl/FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _useFormControl = require("../FormControl/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _inputAdornmentClasses = require("./inputAdornmentClasses");
var _inputAdornmentClassesDefault = parcelHelpers.interopDefault(_inputAdornmentClasses);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _jsxRuntime = require("react/jsx-runtime");
var _span;
const _excluded = [
    "children",
    "className",
    "component",
    "disablePointerEvents",
    "disableTypography",
    "position",
    "variant"
];
const overridesResolver = (props, styles)=>{
    const { ownerState  } = props;
    return [
        styles.root,
        styles[`position${_capitalizeDefault.default(ownerState.position)}`],
        ownerState.disablePointerEvents === true && styles.disablePointerEvents,
        styles[ownerState.variant]
    ];
};
const useUtilityClasses = (ownerState)=>{
    const { classes , disablePointerEvents , hiddenLabel , position , size , variant  } = ownerState;
    const slots = {
        root: [
            'root',
            disablePointerEvents && 'disablePointerEvents',
            position && `position${_capitalizeDefault.default(position)}`,
            variant,
            hiddenLabel && 'hiddenLabel',
            size && `size${_capitalizeDefault.default(size)}`
        ]
    };
    return _base.unstable_composeClasses(slots, _inputAdornmentClasses.getInputAdornmentUtilityClass, classes);
};
const InputAdornmentRoot = _styledDefault.default('div', {
    name: 'MuiInputAdornment',
    slot: 'Root',
    overridesResolver
})(({ theme , ownerState  })=>_extendsDefault.default({
        display: 'flex',
        height: '0.01em',
        // Fix IE11 flexbox alignment. To remove at some point.
        maxHeight: '2em',
        alignItems: 'center',
        whiteSpace: 'nowrap',
        color: theme.palette.action.active
    }, ownerState.variant === 'filled' && {
        // Styles applied to the root element if `variant="filled"`.
        [`&.${_inputAdornmentClassesDefault.default.positionStart}&:not(.${_inputAdornmentClassesDefault.default.hiddenLabel})`]: {
            marginTop: 16
        }
    }, ownerState.position === 'start' && {
        // Styles applied to the root element if `position="start"`.
        marginRight: 8
    }, ownerState.position === 'end' && {
        // Styles applied to the root element if `position="end"`.
        marginLeft: 8
    }, ownerState.disablePointerEvents === true && {
        // Styles applied to the root element if `disablePointerEvents={true}`.
        pointerEvents: 'none'
    })
);
const InputAdornment = /*#__PURE__*/ _react.forwardRef(function InputAdornment(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiInputAdornment'
    });
    const { children , className , component ='div' , disablePointerEvents =false , disableTypography =false , position , variant: variantProp  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const muiFormControl = _useFormControlDefault.default() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
        if (variantProp === muiFormControl.variant) console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
    }
    if (muiFormControl && !variant) variant = muiFormControl.variant;
    const ownerState = _extendsDefault.default({}, props, {
        hiddenLabel: muiFormControl.hiddenLabel,
        size: muiFormControl.size,
        disablePointerEvents,
        position,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ _jsxRuntime.jsx(_formControlContextDefault.default.Provider, {
        value: null,
        children: /*#__PURE__*/ _jsxRuntime.jsx(InputAdornmentRoot, _extendsDefault.default({
            as: component,
            ownerState: ownerState,
            className: _clsxDefault.default(classes.root, className),
            ref: ref
        }, other, {
            children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/ _jsxRuntime.jsx(_typographyDefault.default, {
                color: "text.secondary",
                children: children
            }) : /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
                children: [
                    position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */ _span || (_span = /*#__PURE__*/ _jsxRuntime.jsx("span", {
                        className: "notranslate",
                        children: "\u200B"
                    })) : null,
                    children
                ]
            })
        }))
    });
});
InputAdornment.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component, normally an `IconButton` or string.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */ disablePointerEvents: _propTypesDefault.default.bool,
    /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */ disableTypography: _propTypesDefault.default.bool,
    /**
   * The position this adornment should appear relative to the `Input`.
   */ position: _propTypesDefault.default.oneOf([
        'end',
        'start'
    ]).isRequired,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOfType([
            _propTypesDefault.default.func,
            _propTypesDefault.default.object,
            _propTypesDefault.default.bool
        ])),
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */ variant: _propTypesDefault.default.oneOf([
        'filled',
        'outlined',
        'standard'
    ])
};
exports.default = InputAdornment;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"adHgr","@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","prop-types":"7wKI2","clsx":"83C22","@mui/base":"656dE","../utils/capitalize":"lwNtZ","../Typography":"faxSz","../FormControl/FormControlContext":"iYyu4","../FormControl/useFormControl":"4Clb9","../styles/styled":"32xTg","./inputAdornmentClasses":"8FIdP","../styles/useThemeProps":"dewuS","react/jsx-runtime":"6AEwr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8FIdP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputAdornmentUtilityClass", ()=>getInputAdornmentUtilityClass
);
var _base = require("@mui/base");
function getInputAdornmentUtilityClass(slot) {
    return _base.generateUtilityClass('MuiInputAdornment', slot);
}
const inputAdornmentClasses = _base.generateUtilityClasses('MuiInputAdornment', [
    'root',
    'filled',
    'standard',
    'outlined',
    'positionStart',
    'positionEnd',
    'disablePointerEvents',
    'hiddenLabel',
    'sizeSmall'
]);
exports.default = inputAdornmentClasses;

},{"@mui/base":"656dE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fp2M4":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"
}), 'Visibility');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"8HjK5":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
}), 'VisibilityOff');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"gNWnV":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$63b4 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$63b4.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dialog = require("@mui/material/Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogActions = require("@mui/material/DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogContent = require("@mui/material/DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogTitle = require("@mui/material/DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _credentials = require("../forms/credentials");
var _credentialsDefault = parcelHelpers.interopDefault(_credentials);
function CredentialsDialog(props) {
    const { open , handleCancel , handleOk  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogDefault.default, {
        open: open,
        onClose: handleCancel,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogTitleDefault.default, {
                color: "text.secondary",
                children: "Credentials"
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/credentials.tsx",
                lineNumber: 23,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogContentDefault.default, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_credentialsDefault.default, {
                    label: "",
                    credentials: {
                        "": ""
                    },
                    onFormSubmit: handleOk
                }, void 0, false, {
                    fileName: "src/authenticated/dialogs/credentials.tsx",
                    lineNumber: 25,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/credentials.tsx",
                lineNumber: 24,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogActionsDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        onClick: handleCancel,
                        children: "Cancel"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/credentials.tsx",
                        lineNumber: 32,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "credentials-form",
                        variant: "contained",
                        children: "OK"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/credentials.tsx",
                        lineNumber: 33,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/credentials.tsx",
                lineNumber: 31,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/dialogs/credentials.tsx",
        lineNumber: 22,
        columnNumber: 5
    }, this);
}
exports.default = CredentialsDialog;
_c = CredentialsDialog;
var _c;
$RefreshReg$(_c, "CredentialsDialog");

  $parcel$ReactRefreshHelpers$63b4.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Button":"73csw","@mui/material/Dialog":"ftK48","@mui/material/DialogActions":"25Z2G","@mui/material/DialogContent":"gZO7I","@mui/material/DialogTitle":"642rE","../forms/credentials":"1kM1a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"1kM1a":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f3f5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f3f5.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _add = require("@mui/icons-material/Add");
var _addDefault = parcelHelpers.interopDefault(_add);
var _removeCircleOutline = require("@mui/icons-material/RemoveCircleOutline");
var _removeCircleOutlineDefault = parcelHelpers.interopDefault(_removeCircleOutline);
var _keyValueSecret = require("./key-value-secret");
var _keyValueSecretDefault = parcelHelpers.interopDefault(_keyValueSecret);
var _s = $RefreshSig$();
function mapErrors(credentials) {
    let hasCredError = false;
    const errors = credentials.map((item)=>{
        const [key, value] = item;
        const error = {
            key: false,
            value: false
        };
        if (key.trim() === "") {
            error.key = true;
            hasCredError = true;
        }
        if (value.trim() === "") {
            error.value = true;
            hasCredError = true;
        }
        return error;
    });
    return [
        hasCredError,
        errors
    ];
}
function CredentialsForm(props) {
    _s();
    const { onFormSubmit  } = props;
    const [label, setLabel] = _react.useState(props.label);
    const [labelError, setLabelError] = _react.useState(false);
    const [credentials, setCredentials] = _react.useState(Object.entries(props.credentials));
    const [credentialsErrors, setCredentialsErrors] = _react.useState(credentials.map(()=>({
            key: false,
            value: false
        })
    ));
    const onLabelChange = (e)=>setLabel(e.target.value)
    ;
    const addCredential = ()=>{
        console.log("Credentials before add", credentials);
        const creds = [
            ...credentials
        ];
        creds.unshift([
            "",
            ""
        ]);
        setCredentials(creds);
        const credsErrors = [
            ...credentialsErrors
        ];
        credsErrors.unshift({
            key: false,
            value: false
        });
        setCredentialsErrors(credsErrors);
    };
    const removeCredential = (index)=>{
        const creds = [
            ...credentials
        ];
        creds.splice(index, 1);
        setCredentials(creds);
        const credsErrors = [
            ...credentialsErrors
        ];
        credsErrors.splice(index, 1);
        setCredentialsErrors(credsErrors);
    };
    const onSubmit = (e)=>{
        e.preventDefault();
        setLabelError(false);
        setCredentialsErrors([]);
        const [hasError, credErrors] = mapErrors(credentials);
        if (label.trim() === "") {
            setLabelError(true);
            setLabel("");
        } else if (hasError) setCredentialsErrors(credErrors);
        else {
            const map = credentials.reduce((out, item)=>{
                const [key, value] = item;
                out[key] = value;
                return out;
            }, {});
            onFormSubmit({
                label,
                credentials: map
            });
        }
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "credentials-form",
        onSubmit: onSubmit,
        noValidate: true,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            sx: {
                paddingTop: 1
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "secret-label",
                    label: "Name",
                    placeholder: "Enter a secret name",
                    required: true,
                    autoFocus: true,
                    onChange: onLabelChange,
                    value: label,
                    error: labelError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/credentials.tsx",
                    lineNumber: 107,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                    onClick: addCredential,
                    startIcon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_addDefault.default, {}, void 0, false, void 0, void 0),
                    children: "Add Credential"
                }, void 0, false, {
                    fileName: "src/authenticated/forms/credentials.tsx",
                    lineNumber: 117,
                    columnNumber: 9
                }, this),
                credentials.map((item, index1)=>{
                    const [name, value1] = item;
                    const error = credentialsErrors[index1] || {
                        key: false,
                        value: false
                    };
                    console.log("render cred", name, value1);
                    const onChange = (index, key, value)=>{
                        const creds = [
                            ...credentials
                        ];
                        creds[index] = [
                            key,
                            value
                        ];
                        setCredentials(creds);
                    };
                    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
                        direction: "row",
                        spacing: 2,
                        alignItems: "center",
                        children: [
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_keyValueSecretDefault.default, {
                                onChange: onChange,
                                error: error,
                                name: name,
                                value: value1,
                                index: index1
                            }, void 0, false, {
                                fileName: "src/authenticated/forms/credentials.tsx",
                                lineNumber: 137,
                                columnNumber: 15
                            }, this),
                            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_iconButtonDefault.default, {
                                disabled: credentials.length === 1,
                                sx: {
                                    width: 40,
                                    height: 40
                                },
                                onClick: ()=>removeCredential(index1)
                                ,
                                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_removeCircleOutlineDefault.default, {}, void 0, false, {
                                    fileName: "src/authenticated/forms/credentials.tsx",
                                    lineNumber: 149,
                                    columnNumber: 17
                                }, this)
                            }, void 0, false, {
                                fileName: "src/authenticated/forms/credentials.tsx",
                                lineNumber: 144,
                                columnNumber: 15
                            }, this)
                        ]
                    }, index1, true, {
                        fileName: "src/authenticated/forms/credentials.tsx",
                        lineNumber: 136,
                        columnNumber: 13
                    }, this);
                })
            ]
        }, void 0, true, {
            fileName: "src/authenticated/forms/credentials.tsx",
            lineNumber: 106,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/forms/credentials.tsx",
        lineNumber: 105,
        columnNumber: 5
    }, this);
}
exports.default = CredentialsForm;
_s(CredentialsForm, "ILjW1Yn1APekuaHEp18fNCDqWac=");
_c = CredentialsForm;
var _c;
$RefreshReg$(_c, "CredentialsForm");

  $parcel$ReactRefreshHelpers$f3f5.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/Button":"73csw","@mui/material/IconButton":"38BrD","@mui/material/TextField":"hlqrK","@mui/icons-material/Add":"jBiYR","@mui/icons-material/RemoveCircleOutline":"8wXG1","./key-value-secret":"bwsWB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"8wXG1":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
}), 'RemoveCircleOutline');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}],"bwsWB":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$a997 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$a997.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _viewablePassword = require("./viewable-password");
var _viewablePasswordDefault = parcelHelpers.interopDefault(_viewablePassword);
var _s = $RefreshSig$();
function KeyValueSecret(props) {
    _s();
    const { index , error , onChange  } = props;
    const [key, setKey] = _react.useState(props.name);
    const [value, setValue] = _react.useState(props.value);
    const onKeyChange = (e)=>{
        setKey(e.target.value);
        onChange(index, key, value);
    };
    const onValueChange = (e)=>{
        setValue(e.target.value);
        onChange(index, key, value);
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
        direction: "row",
        justifyContent: "space-between",
        spacing: 2,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                id: `key${index}`,
                label: "Key",
                placeholder: "Enter a key",
                required: true,
                value: key,
                onChange: onKeyChange,
                error: error.key
            }, void 0, false, {
                fileName: "src/authenticated/forms/key-value-secret.tsx",
                lineNumber: 35,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_viewablePasswordDefault.default, {
                id: `value${index}`,
                label: "Value",
                placeholder: "Enter a value",
                value: value,
                onChange: onValueChange,
                error: error.value
            }, void 0, false, {
                fileName: "src/authenticated/forms/key-value-secret.tsx",
                lineNumber: 45,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/forms/key-value-secret.tsx",
        lineNumber: 34,
        columnNumber: 5
    }, this);
}
exports.default = KeyValueSecret;
_s(KeyValueSecret, "PSbfmMYYw2f/SbSM1QBDHA7aKTY=");
_c = KeyValueSecret;
var _c;
$RefreshReg$(_c, "KeyValueSecret");

  $parcel$ReactRefreshHelpers$a997.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","./viewable-password":"fQxD3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"afKQz":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f64b = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f64b.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dialog = require("@mui/material/Dialog");
var _dialogDefault = parcelHelpers.interopDefault(_dialog);
var _dialogActions = require("@mui/material/DialogActions");
var _dialogActionsDefault = parcelHelpers.interopDefault(_dialogActions);
var _dialogContent = require("@mui/material/DialogContent");
var _dialogContentDefault = parcelHelpers.interopDefault(_dialogContent);
var _dialogTitle = require("@mui/material/DialogTitle");
var _dialogTitleDefault = parcelHelpers.interopDefault(_dialogTitle);
var _fileUpload = require("../forms/file-upload");
var _fileUploadDefault = parcelHelpers.interopDefault(_fileUpload);
function FileUploadDialog(props) {
    const { open , handleCancel , handleOk  } = props;
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogDefault.default, {
        open: open,
        onClose: handleCancel,
        children: [
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogTitleDefault.default, {
                color: "text.secondary",
                children: "Secure Note"
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/file-upload.tsx",
                lineNumber: 23,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogContentDefault.default, {
                children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_fileUploadDefault.default, {
                    label: "",
                    onFormSubmit: handleOk
                }, void 0, false, {
                    fileName: "src/authenticated/dialogs/file-upload.tsx",
                    lineNumber: 25,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "src/authenticated/dialogs/file-upload.tsx",
                lineNumber: 24,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_dialogActionsDefault.default, {
                children: [
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        onClick: handleCancel,
                        children: "Cancel"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/file-upload.tsx",
                        lineNumber: 28,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                        type: "submit",
                        form: "file-upload-form",
                        variant: "contained",
                        children: "OK"
                    }, void 0, false, {
                        fileName: "src/authenticated/dialogs/file-upload.tsx",
                        lineNumber: 29,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "src/authenticated/dialogs/file-upload.tsx",
                lineNumber: 27,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "src/authenticated/dialogs/file-upload.tsx",
        lineNumber: 22,
        columnNumber: 5
    }, this);
}
exports.default = FileUploadDialog;
_c = FileUploadDialog;
var _c;
$RefreshReg$(_c, "FileUploadDialog");

  $parcel$ReactRefreshHelpers$f64b.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Button":"73csw","@mui/material/Dialog":"ftK48","@mui/material/DialogActions":"25Z2G","@mui/material/DialogContent":"gZO7I","@mui/material/DialogTitle":"642rE","../forms/file-upload":"1d2IZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"1d2IZ":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$13a1 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$13a1.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _stack = require("@mui/material/Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _textField = require("@mui/material/TextField");
var _textFieldDefault = parcelHelpers.interopDefault(_textField);
var _input = require("@mui/material/Input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _s = $RefreshSig$();
// 8MB for file uploads
const MAX_FILE_SIZE = 8388608;
function FileUploadForm(props) {
    _s();
    const { onFormSubmit  } = props;
    const [label, setLabel] = _react.useState(props.label);
    const [labelError, setLabelError] = _react.useState(false);
    const [file1, setFile] = _react.useState({
        buffer: props.buffer,
        name: null,
        size: null
    });
    const [fileError, setFileError] = _react.useState(false);
    const onLabelChange = (e)=>setLabel(e.target.value)
    ;
    const onFileChange = async (e)=>{
        const file = e.target.files[0];
        const { name , size  } = file;
        if (size <= MAX_FILE_SIZE) {
            const buffer = await file.arrayBuffer();
            setFile({
                name,
                size,
                buffer: Array.from(new Uint8Array(buffer))
            });
        } else // TODO: handle too large file error gracefully
        setFileError(true);
    };
    const onSubmit = (e)=>{
        e.preventDefault();
        setLabelError(false);
        setFileError(false);
        console.log("submit", file1);
        if (label.trim() === "") {
            setLabelError(true);
            setLabel("");
        } else if (!file1.buffer) setFileError(true);
        else {
            const { buffer , name  } = file1;
            onFormSubmit({
                label,
                buffer,
                name
            });
        }
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV("form", {
        id: "file-upload-form",
        onSubmit: onSubmit,
        noValidate: true,
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_stackDefault.default, {
            spacing: 2,
            sx: {
                paddingTop: 1
            },
            children: [
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "secret-label",
                    label: "Name",
                    placeholder: "Enter a secret name",
                    required: true,
                    autoFocus: true,
                    onChange: onLabelChange,
                    value: label,
                    error: labelError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/file-upload.tsx",
                    lineNumber: 74,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_textFieldDefault.default, {
                    id: "file-name",
                    hiddenLabel: true,
                    placeholder: "Select a file to upload",
                    disabled: true,
                    onChange: onLabelChange,
                    value: file1.name || "",
                    error: fileError
                }, void 0, false, {
                    fileName: "src/authenticated/forms/file-upload.tsx",
                    lineNumber: 84,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDevRuntime.jsxDEV("label", {
                    htmlFor: "file-upload",
                    children: [
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_inputDefault.default, {
                            id: "file-upload",
                            sx: {
                                display: "none"
                            },
                            onChange: onFileChange,
                            type: "file"
                        }, void 0, false, {
                            fileName: "src/authenticated/forms/file-upload.tsx",
                            lineNumber: 94,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                            variant: "contained",
                            component: "span",
                            children: "Upload"
                        }, void 0, false, {
                            fileName: "src/authenticated/forms/file-upload.tsx",
                            lineNumber: 100,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "src/authenticated/forms/file-upload.tsx",
                    lineNumber: 93,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "src/authenticated/forms/file-upload.tsx",
            lineNumber: 73,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "src/authenticated/forms/file-upload.tsx",
        lineNumber: 72,
        columnNumber: 5
    }, this);
}
exports.default = FileUploadForm;
_s(FileUploadForm, "EQwzGhgwQA33BD3UDwm5P/eGip4=");
_c = FileUploadForm;
var _c;
$RefreshReg$(_c, "FileUploadForm");

  $parcel$ReactRefreshHelpers$13a1.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","@mui/material/Button":"73csw","@mui/material/Stack":"cuThX","@mui/material/TextField":"hlqrK","@mui/material/Input":"4JIyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"iuGQM":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$7d19 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$7d19.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRedux = require("react-redux");
var _tooltip = require("@mui/material/Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _logout = require("@mui/icons-material/Logout");
var _logoutDefault = parcelHelpers.interopDefault(_logout);
var _user = require("../store/user");
var _vaults = require("../store/vaults");
var _s = $RefreshSig$();
function AppBarActions() {
    _s();
    const { vaults  } = _reactRedux.useSelector(_vaults.vaultsSelector);
    const dispatch = _reactRedux.useDispatch();
    const onLogout = ()=>{
        dispatch(_vaults.lockAll(vaults));
        dispatch(_user.logout());
    };
    return /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_jsxDevRuntime.Fragment, {
        children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_tooltipDefault.default, {
            title: "Logout",
            children: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_buttonDefault.default, {
                variant: "contained",
                onClick: onLogout,
                endIcon: /*#__PURE__*/ _jsxDevRuntime.jsxDEV(_logoutDefault.default, {}, void 0, false, void 0, void 0),
                children: "Logout"
            }, void 0, false, {
                fileName: "src/authenticated/app-bar-actions.tsx",
                lineNumber: 23,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "src/authenticated/app-bar-actions.tsx",
            lineNumber: 22,
            columnNumber: 7
        }, this)
    }, void 0, false);
}
exports.default = AppBarActions;
_s(AppBarActions, "otQpJQAPvX/kCpUJf6Os2fLWA/M=", false, function() {
    return [
        _reactRedux.useSelector,
        _reactRedux.useDispatch
    ];
});
_c = AppBarActions;
var _c;
$RefreshReg$(_c, "AppBarActions");

  $parcel$ReactRefreshHelpers$7d19.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-redux":"bdVon","@mui/material/Tooltip":"5uL59","@mui/material/Button":"73csw","@mui/icons-material/Logout":"8nyfm","../store/user":"dzJ1K","../store/vaults":"3zSpK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"8nyfm":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = (0, _createSvgIcon.default)(/*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
    d: "m17 7-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"
}), 'Logout');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"7XM86","./utils/createSvgIcon":"lVV9C","react/jsx-runtime":"6AEwr"}]},["kn9T2","6Oejs","4aBH6"], "4aBH6", "parcelRequire809c")

//# sourceMappingURL=index.2d3ace14.js.map
