use thiserror::Error;

/// Error thrown by the core library.
#[derive(Debug, Error)]
pub enum Error {

    /// Error generated when a vault identity byte is wrong.
    #[error("bad identity byte {0}")]
    BadIdentity(u8),

    /// Error generated when the kind of a secret is unknown.
    #[error("unknown secret kind {0}")]
    UnknownSecretKind(u8),

    #[error("vault must be unlocked")]
    VaultLocked,

    #[error("secret {0} does not exist")]
    SecretDoesNotExist(uuid::Uuid),

    #[error("secret meta data for {0} does not exist")]
    SecretMetaDoesNotExist(uuid::Uuid),

    #[error("vault is not initialized")]
    VaultNotInit,

    /// Error generated by the bip39 library.
    #[error(transparent)]
    Bip39(#[from] bip39::Error),

    /// Error generated by the JWT library.
    #[error(transparent)]
    Jwt(#[from] jwt_simple::Error),

    /// Error generated parsing URLs.
    #[error(transparent)]
    UrlParse(#[from] url::ParseError),

    /// Error generated parsing UUIDs.
    #[error(transparent)]
    Uuid(#[from] uuid::Error),

    /// Error generated converting to fixed length slice.
    #[error(transparent)]
    TryFromSlice(#[from] std::array::TryFromSliceError),

    /// Error generated from the binary reader / writer.
    #[error(transparent)]
    Binary(#[from] binary_rw::BinaryError),

    /// Error generated whilst reading or writing to a binary stream.
    #[error(transparent)]
    BinaryStream(#[from] binary_rw::StreamError),

    #[error(transparent)]
    Aes(#[from] aes_gcm::Error),

    /// Error generated by the ECDSA library.
    #[error(transparent)]
    Ecdsa(#[from] k256::ecdsa::Error),

    /// Error generated by elliptic curve library.
    #[error(transparent)]
    Elliptic(#[from] k256::elliptic_curve::Error),
}

