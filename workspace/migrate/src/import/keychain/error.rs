//! Error type for the keychain access module.
use thiserror::Error;

/// Error type for the keychain access module.
#[derive(Debug, Error)]
pub enum Error {
    /// Error generated if the name for a keychain could not
    /// be determined, no file stem.
    #[error("could not determine name for a keychain")]
    NoKeychainName,

    /// Error generated parsing keychain dump when the class of an
    /// entry is unknown.
    #[error("unknown keychain item class '{0}'")]
    ParseUnknownClass(String),

    /// Error generated parsing keychain dump when an unknown attribute
    /// name is encountered.
    #[error("unknown keychain item attribute name '{0}'")]
    ParseUnknownAttributeName(String),

    /// Error generated parsing keychain dump when an unknown attribute
    /// type is encountered.
    #[error("unknown keychain item attribute type '{0}'")]
    ParseUnknownAttributeType(String),

    /// Error generated parsing keychain dump when the parse could not
    /// parse a quoted blob.
    #[error("keychain parser unable to parse quoted value '{0}'")]
    ParseNotQuoted(String),

    /// Error generated parsing keychain dump when the parse could not
    /// parse an attribute type.
    #[error("keychain parser unable to parse attribute type '{0}'")]
    ParseNotAttributeType(String),

    /// Error generated parsing keychain dump when the parse could not
    /// parse an attribute value.
    #[error("keychain parser unable to parse attribute value '{0}'")]
    ParseNotAttributeValue(String),

    /// Error generated parsing keychain dump when the parse could not
    /// parse an attribute value.
    #[error("keychain parser unable to parse number '{0}'")]
    ParseNotNumber(String),

    /// Error generated converting an octal escape to a character.
    #[error("keychain parser unable to convert octal escape '{0}' to char")]
    InvalidOctalEscape(String),

    /// Error generated parsing keychain dump when
    /// expecting assignment operator.
    #[error("expecting equals sign (=) while parsing keychain dump")]
    ParseExpectsEquals,

    /// Error generated by the io library.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Error generated converting to integers.
    #[error(transparent)]
    ParseInt(#[from] std::num::ParseIntError),

    /// Error generated by the utf8 conversion.
    #[error(transparent)]
    Utf8(#[from] std::str::Utf8Error),

    /// Error generated by the security framework.
    #[cfg(target_os = "macos")]
    #[error(transparent)]
    SecurityFramework(#[from] security_framework::base::Error),

    /// Error generated by the mpsc sender.
    #[error(transparent)]
    SendBool(#[from] std::sync::mpsc::SendError<bool>),
}
