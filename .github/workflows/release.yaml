name: Release

on:
  push:
    tags:
      - '*'

env:
  RUST_LOG: "0"

jobs:
  build:
    name: build
    strategy:
      fail-fast: true
      matrix:
        target:
          #- x86_64-apple-darwin
          #- aarch64-apple-darwin
        
          #- x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

          #
          #- aarch64-apple-ios
          #- aarch64-linux-android
          #- aarch64-pc-windows-msvc
          #- aarch64-unknown-linux-musl
          #- arm-unknown-linux-gnueabihf
          #- armv7-linux-androideabi
          #- armv7-unknown-linux-musleabihf
          #- i686-pc-windows-msvc
          #- i686-unknown-linux-gnu
          #- i686-unknown-linux-musl
          #- x86_64-pc-windows-gnu
          #- x86_64-pc-windows-msvc
          #- x86_64-unknown-linux-musl
        
        include:
          #- target: x86_64-apple-darwin
            #os: macos-latest
          #- target: aarch64-apple-darwin
            #os: macos-latest

          #- target: x86_64-unknown-linux-gnu
            #os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

        #settings:
          #- host: macos-latest
            #target: 'x86_64-apple-darwin'
          #- host: macos-latest
            #target: 'aarch64-apple-darwin'
          #- host: ubuntu-latest
            #target: 'x86_64-unknown-linux-gnu'
          #- host: ubuntu-latest
            #target: 'aarch64-unknown-linux-gnu'
          #- host: windows-latest
            #target: 'x86_64-pc-windows-msvc'

          #- host: windows-latest
            #target: 'aarch64-pc-windows-msvc'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - if: ${{ contains(matrix.os, 'ubuntu') }}
        run: sudo apt-get update -y
      - if: ${{ !contains(matrix.os, 'windows') }}
        run: mk/install-build-tools.sh --target=${{ matrix.target }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
      - name: Run cargo build
        run: cargo build --release --all --bins --target=${{ matrix.target }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/sos-audit
            target/${{ matrix.target }}/release/sos-check
            target/${{ matrix.target }}/release/sos-client
            target/${{ matrix.target }}/release/sos-server

  upload-release:
    name: upload-release
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
            path: artifacts
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Tarball release artifacts
        run: >-
          mkdir tarballs;
          for target in $(ls artifacts); do
            for bin in $(ls artifacts/${target}); do
              tar -czvf tarballs/${target}.tar.gz artifacts/${target}/;
            done
          done
      - name: Display structure of tarballs
        run: ls -R tarballs
      - uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          artifacts: "tarballs/*.tar.gz"
          #bodyFile: "body.md"
          token: ${{ secrets.GITHUB_TOKEN }}
