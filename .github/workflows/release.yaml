name: Release

on:
  push:
    tags:
      - '*'

env:
  RUST_LOG: "0"

jobs:
  build:
    name: build-binaries
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc

          # NOTE: Need ring:0.17.0
          # SEE: https://github.com/briansmith/ring/issues/1461
          #- aarch64-pc-windows-msvc

          # TODO
          #- aarch64-apple-ios
          #- aarch64-linux-android
          #- x86_64-unknown-linux-musl
          #- aarch64-unknown-linux-musl
          #- arm-unknown-linux-gnueabihf
          #- armv7-linux-androideabi
          #- armv7-unknown-linux-musleabihf
          #- i686-pc-windows-msvc
          #- i686-unknown-linux-gnu
          #- i686-unknown-linux-musl
        
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

          #- target: aarch64-pc-windows-msvc
            #os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - if: ${{ contains(matrix.os, 'ubuntu') }}
        run: sudo apt-get update -y
      - if: ${{ !contains(matrix.os, 'windows') }}
        run: mk/install-build-tools.sh --target=${{ matrix.target }}
      - if: ${{ contains(matrix.os, 'windows') }}
        run: ./mk/install-build-tools.ps1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
      - if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
        run: |
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          echo "TARGET_CC=clang-cl" >> $GITHUB_ENV
        shell: bash

      - if: ${{ !contains(matrix.os, 'windows') }}
        name: Run cargo build (unix)
        run: |
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc;
          cargo build --release --all --bins --target=${{ matrix.target }}

      - if: ${{ contains(matrix.os, 'windows') }}
        name: Run cargo build (windows)
        run: |
          cargo build --release --all --bins --target=${{ matrix.target }}
      - if: ${{ !contains(matrix.os, 'windows') }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/sos
            target/${{ matrix.target }}/release/sos-audit
            target/${{ matrix.target }}/release/sos-check
            target/${{ matrix.target }}/release/sos-client
            target/${{ matrix.target }}/release/sos-server
      - if: ${{ contains(matrix.os, 'windows') }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/sos.exe
            target/${{ matrix.target }}/release/sos-*.exe

  upload-release-artifacts:
    name: upload-release-artifacts
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
            path: saveoursecrets
      - name: Display structure of downloads
        run: ls -R saveoursecrets
      - name: Tarball release artifacts
        run: >-
          mkdir tarballs;
          for target in $(ls saveoursecrets); do
            for bin in $(ls saveoursecrets/${target}); do
              chmod +x saveoursecrets/${target}/*;
              tar -czvf tarballs/${target}.tar.gz saveoursecrets/${target}/;
            done
          done
      - name: Display structure of tarballs
        run: ls -R tarballs
      - uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          artifacts: "tarballs/*.tar.gz"
          #bodyFile: "body.md"
          token: ${{ secrets.GITHUB_TOKEN }}
