name: Publish

on:
  workflow_call:

env:
  RELEASE_BUCKET: ${{ vars.RELEASE_BUCKET }} 
  RELEASE_REGION: ${{ vars.RELEASE_REGION }}
  BIN_DIR: target/bin

jobs:
  build:
    name: Publish for ${{ matrix.binary_target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-gnu
            platform: unknown-linux-gnu
            arch: x86_64
            distro: linux
            variant: none
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-musl
            platform: unknown-linux-musl
            arch: x86_64
            distro: linux
            variant: musl
          - os: windows-latest
            binary_target: x86_64-pc-windows-msvc
            platform: pc-windows-msvc
            arch: x86_64
            distro: windows
            variant: none
          - os: macos-latest
            binary_target: x86_64-apple-darwin
            platform: apple-darwin
            arch: x86_64
            distro: macos
            variant: none
          - os: macos-latest
            binary_target: aarch64-apple-darwin
            platform: apple-darwin
            arch: aarch64
            distro: macos
            variant: none
    steps:
      - uses: actions/checkout@v4
      - name: âš¡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Prepare
      - name: Set environment variables
        shell: bash
        run: |
          VERSION=$(./scripts/version.sh)
          echo "BUILD_DIR=target/${{ matrix.binary_target }}/release" >> $GITHUB_ENV
          echo "ZIP_FILE=${{ matrix.binary_target }}.zip" >> $GITHUB_ENV
          echo "SEMVER=$VERSION" >> $GITHUB_ENV

      # Install
      - name: Install release tools
        uses: jaxxstorm/action-install-gh-release@v1.14.0
        with:
          token: ${{ secrets.GH_RELEASE_DOWNLOAD }}
          repo: saveoursecrets/release-tools
          platform: ${{ matrix.platform }}
          arch: x86_64

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0
      - name: Check cosign install
        run: cosign version

      - name: Install musl tools
        if: matrix.binary_target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install musl-tools
      - name: Update rust
        run: |
          rustup override set stable
          rustup update --no-self-update stable
          rustup target add ${{ matrix.binary_target }}

      # Build client
      - name: Build client binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.binary_target }}

      # Build server
      - name: Build server binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p sos-server --release --locked --target ${{ matrix.binary_target }}

      - name: Gather executables
        shell: bash
        run: |
          ./scripts/ci/prepare-executables.sh $(./scripts/ci/find-executables.sh "$BUILD_DIR")

      - name: Archive release
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: 'zip'
          filename: ${{ env.ZIP_FILE }}
          directory: target/bin

      # Publish
      - name: Upload archive to S3 bucket
        shell: bash
        env:
          AWS_REGION: ${{ env.RELEASE_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}

          AWS_SIGN_REGION: ${{ env.RELEASE_REGION }}
          AWS_SIGN_ACCESS_KEY_ID: ${{ secrets.AWS_SIGN_ACCESS_KEY_ID }}
          AWS_SIGN_SECRET_ACCESS_KEY: ${{ secrets.AWS_SIGN_SECRET_ACCESS_KEY }}
          AWS_SIGN_KEY_ID: ${{ secrets.AWS_SIGN_KEY_ID }}

        run: |
          release-artifact upload \
            --bucket $RELEASE_BUCKET \
            --semver $SEMVER \
            --channel ${{ vars.DISTRIBUTION_CHANNEL }} \
            --platform ${{ matrix.distro }} \
            --arch ${{ matrix.arch }} \
            --collection cli \
            --variant ${{ matrix.variant }} \
            --commit ${{ github.sha }} \
            --latest \
            --sign \
            target/bin/$ZIP_FILE
