use sos_core::{commit::CommitHash, AccountId};
use std::path::PathBuf;
use thiserror::Error;

/// Errors generated by the database library.
#[derive(Debug, Error)]
pub enum Error {
    /// Database file already exists.
    #[error("database '{0}' already exists")]
    DatabaseExists(PathBuf),

    /// Upgrade failed as the account sync status from the source
    /// file system account does not match the imported database account.
    #[error(r#"upgrade failed for account '{0}', fs:{1} != db:{2}; more error information is in the log file '{3}'"#)]
    AccountStatus(AccountId, CommitHash, CommitHash, PathBuf),

    /// Backup archive is already version 3.
    #[cfg(feature = "archive")]
    #[error("cannot upgrade '{0}' already a version 3 backup archive")]
    ArchiveAlreadyVersion3(PathBuf),

    /// Errors generated by the core library.
    #[error(transparent)]
    Core(#[from] sos_core::Error),

    /// Errors generated by the database library.
    #[error(transparent)]
    Database(#[from] sos_database::Error),

    /// Errors generated by the vault library.
    #[error(transparent)]
    Vault(#[from] sos_vault::Error),

    /// Errors generated by the sync library.
    #[error(transparent)]
    Sync(#[from] sos_sync::Error),

    /// Errors generated by the backend library.
    #[error(transparent)]
    Backend(#[from] sos_backend::Error),

    /// Errors generated by the filesystem library.
    #[error(transparent)]
    FileSystem(#[from] sos_filesystem::Error),

    /// Errors generated by the client storage library.
    #[error(transparent)]
    ClientStorage(#[from] sos_client_storage::Error),

    /// Errors generated by the server storage library.
    #[error(transparent)]
    ServerStorage(#[from] sos_server_storage::Error),

    /// Errors generated by the filesystem archive module.
    #[error(transparent)]
    BackupArchive(#[from] sos_filesystem::archive::Error),

    /// Errors generated by the IO module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Errors generated by the JSON library.
    #[error(transparent)]
    Json(#[from] serde_json::Error),

    /// Errors generated by the async sqlite library.
    #[error(transparent)]
    AsyncSqlite(#[from] sos_database::async_sqlite::Error),

    /// Errors generated by the rusqlite library.
    #[error(transparent)]
    Rusqlite(#[from] sos_database::async_sqlite::rusqlite::Error),
}
