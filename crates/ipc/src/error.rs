use thiserror::Error;
use tokio::time::Duration;

use crate::IpcResponseError;

/// Error type for the library.
#[derive(Error, Debug)]
pub enum Error {
    /// Error reading server response.
    #[error("no server response")]
    NoResponse,

    /// Error decoding a request.
    #[error("error decoding ipc request")]
    DecodeRequest,

    /// Error decoding a response.
    #[error("error decoding ipc response")]
    DecodeResponse,

    /// Error when a response message id does not match the request id.
    #[error("response id {1} does not match request id {0}")]
    MessageId(u64, u64),

    /// Error when a response type does not match the request type.
    #[error("response type does not match the request type")]
    ResponseType,

    /// Error response received from a server.
    #[error("{0:?}")]
    ResponseError(IpcResponseError),

    /// Service request timed out.
    #[error("service request timed out, exceeded duration {0:?}")]
    ServiceTimeout(Duration),

    /// Error generated by the protobuf library when encoding.
    #[error(transparent)]
    ProtoBufEncode(#[from] prost::EncodeError),

    /// Error generated by the protobuf library when decoding.
    #[error(transparent)]
    ProtoBufDecode(#[from] prost::DecodeError),

    /// Error generated by the protobuf library when converting enums.
    #[error(transparent)]
    ProtoEnum(#[from] prost::UnknownEnumValue),

    /// Errors generated by the IO module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Errors generated by the SDK library.
    #[error(transparent)]
    Sdk(#[from] sos_net::sdk::Error),

    /// Errors generated by the networking library.
    #[error(transparent)]
    Net(#[from] sos_net::Error),

    /// Errors generated by the JSON library.
    #[error(transparent)]
    Json(#[from] serde_json::Error),
}

impl From<Error> for IpcResponseError {
    fn from(value: Error) -> Self {
        let code = match &value {
            Error::ServiceTimeout(_) => 504, // Gateway timeout
            _ => -1,
        };
        IpcResponseError {
            code,
            message: value.to_string(),
        }
    }
}
