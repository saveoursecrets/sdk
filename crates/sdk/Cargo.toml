[package]
name = "sos-sdk"
version = "0.12.1"
edition = "2021"
description = "Distributed, encrypted database for private secrets."
homepage = "https://saveoursecrets.com"
license = "MIT OR Apache-2.0"
categories = ["cryptography::cryptocurrencies", "authentication"]
repository = "https://github.com/saveoursecrets/sdk"

[lib]
crate-type = ["cdylib", "rlib"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["account", "archive", "audit", "logs", "search"]
account = []
archive = ["dep:async_zip"]
audit = []
contacts = []
device = [
  "dep:whoami",
]
files = []
interactive-keychain-tests = []
logs = ["rev_buf_reader", "tracing-appender", "tracing-subscriber"]
mem-fs = ["sos-vfs/mem-fs"]
migrate = ["dep:async_zip", "dep:csv-async"]
keychain-access = ["dep:security-framework", "dep:keychain_parser"]
recovery = ["dep:vsss-rs"]
preferences = []
search = ["dep:probly-search"]
security-report = []
system-messages = []
test-utils = ["dep:anyhow"]

[dependencies]
binary-stream.workspace = true
secrecy.workspace = true
tokio-util.workspace = true
tracing.workspace = true
thiserror.workspace = true
async-trait.workspace = true
async-recursion.workspace = true
http.workspace = true
serde.workspace = true
serde_json.workspace = true
uuid.workspace = true
hex.workspace = true
k256.workspace = true
sha1.workspace = true
sha2.workspace = true
sha3.workspace = true
serde_with.workspace = true
once_cell.workspace = true
rand.workspace = true
url.workspace = true
time.workspace = true
futures.workspace = true
parking_lot.workspace = true
bs58.workspace = true
indexmap.workspace = true
bitflags.workspace = true
enum-iterator.workspace = true
file-guard.workspace = true
tempfile.workspace = true
rs_merkle.workspace = true
subtle = { version = "2.5" }
ethereum-types = "0.14"
async_zip = { version = "0.0.17", default-features = false, features = ["deflate", "tokio"], optional = true }
csv-async = { version = "1", features = ["tokio", "with_serde"], optional = true }
sos-vfs = { version = "0.2.2" }
aes-gcm = { version = "0.10.1", features = ["std"] }
chacha20poly1305 = { version = "0.10.1", features = ["std"] }
filetime = "0.2"
argon2 = { version = "0.5", features = ["std"]}
balloon-hash = { version = "0.4", features = ["std"]}
app_dirs2 = "2"
pem = { version = "3", features = ["serde"] }
zxcvbn = { version = "3.0.1", features = ["ser"] }
totp-rs = { version = "5.5", features = ["qr", "serde_support", "zeroize"] }
vcard4 = { version = "0.5", features = ["serde"] }
async-once-cell = "0.5"
age = { version = "0.10", features = ["async"] }
ed25519-dalek = { version = "2.1.1", features = ["rand_core"] }
urn = { version = "0.7", features = ["serde"] }
walkdir = "2"
unicode-segmentation = "1.10"
mime_guess = { version = "2" }
sanitize-filename = "0.5"
futures-util = "0.3"
async-stream = "0.3"
anyhow = {version = "1", optional = true }
vsss-rs = {version = "3", optional = true }
whoami = { version = "1.5", optional = true }
tracing-appender = { version = "0.2", optional = true }
tracing-subscriber = { version = "0.3.16", features = ["env-filter", "json"], optional = true }
rev_buf_reader = { version = "0.3", optional = true }

[dependencies.probly-search]
version = "2.0.0"
optional = true

[target.'cfg(target_os = "macos")'.dependencies]
security-framework = { version = "2.8", optional = true }
keychain_parser = { version = "0.1", path = "../keychain_parser", optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { version = "1", default-features = false, features = ["rt", "fs", "io-util", "sync"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = {version = "0.2", features = ["js"]}
uuid = { version = "1", features = ["serde", "v4", "js"] }
tokio = { version = "1", default-features = false, features = ["rt", "sync", "macros", "io-util"] }

#git = "https://github.com/tmpfs/rs-merkle"
#branch = "sha2-update"
#path = "../../../../forks/rs-merkle"

[dependencies.chbs]
version = "0.1.1"

[dev-dependencies]
anyhow = "1"
tokio = { version = "1", features = ["full"] }
sos_test_utils = { path = "../test_utils" }

[build-dependencies]
rustc_version = "0.4.0"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(CHANNEL_NIGHTLY)'] }
