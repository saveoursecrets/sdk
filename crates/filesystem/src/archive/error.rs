use std::path::PathBuf;
use thiserror::Error;

/// Errors generated by the backup archive library.
#[derive(Debug, Error)]
pub enum Error {
    /// Error generated when a path is not a file.
    #[error("path {0} is not a file")]
    NotFile(PathBuf),

    /// Error generated when an archive is for an address that does
    /// not exist locally when we are expecting an archive to be imported
    /// in the context of an existing account.
    #[error("could not find account for archive identifier {0}")]
    NoArchiveAccount(String),

    /// Error generated when an archive account identifier
    /// does not match the account identifier in the archive manifest.
    #[error("archive account identifier does not match")]
    ArchiveAccountIdMismatch,

    /// Error generated an archive does not contain a manifest file.
    #[error("archive file {0} does not match the manifest checksum")]
    ArchiveChecksumMismatch(String),

    /// Error generated an archive does not contain a manifest file.
    #[error("archive does not contain a manifest file")]
    NoArchiveManifest,

    /// Error generated an archive does not contain a manifest file.
    #[error("archive does contain the vault {0}")]
    NoArchiveVault(PathBuf),

    /// Error generated attempting to restore an account from an archive
    /// whilst not authenticated and the identifier for the archive matches
    /// an account that already exists.
    #[error("account for archive identifier {0} already exists")]
    ArchiveAccountAlreadyExists(String),

    /// Error generated converting to fixed length slice.
    #[error(transparent)]
    TryFromSlice(#[from] std::array::TryFromSliceError),

    /// Error generated by the JSON library.
    #[error(transparent)]
    Json(#[from] serde_json::Error),

    /// Error generated by the IO module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Error generated by the core library.
    #[error(transparent)]
    Core(#[from] sos_core::Error),

    /// Error generated by the filesystem library.
    #[error(transparent)]
    FileSystem(#[from] crate::Error),

    /// Error generated by the vault library.
    #[error(transparent)]
    Vault(#[from] sos_vault::Error),

    /// Error generated by the ZIP library.
    #[error(transparent)]
    Zip(#[from] async_zip::error::ZipError),

    /// Error generated by the hexadecimal library.
    #[error(transparent)]
    Hex(#[from] hex::FromHexError),

    /// Error generated when stripping a prefix from a path.
    #[error(transparent)]
    StripPrefix(#[from] std::path::StripPrefixError),

    /// Error generated when walking a directory.
    #[error(transparent)]
    Walk(#[from] walkdir::Error),

    /// Error generated by the UUID library.
    #[error(transparent)]
    Uuid(#[from] uuid::Error),
}
