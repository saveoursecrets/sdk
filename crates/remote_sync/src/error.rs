//! Error type for the wire protocol.
use sos_sync::{MaybeConflict, SyncStatus};
use std::error::Error as StdError;
use thiserror::Error;

/*
/// Trait for error implementations that
/// support a conflict error.
pub trait AsConflict {
    /// Determine if this is a conflict error.
    fn is_conflict(&self) -> bool;

    /// Determine if this is a hard conflict error.
    fn is_hard_conflict(&self) -> bool;

    /// Take an underlying conflict error.
    fn take_conflict(self) -> Option<ConflictError>;
}
*/

/// Errors generated by the wire protocol.
#[derive(Debug, Error)]
pub enum Error {
    /// Reached EOF decoding a relay packet.
    #[error("relay packet end of file")]
    EndOfFile,

    /*
    /// Error generated when a conflict is detected.
    #[error(transparent)]
    Conflict(#[from] ConflictError),
    */
    /// Error generated by the IO module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Error generated converting from a slice.
    #[error(transparent)]
    TryFromSlice(#[from] std::array::TryFromSliceError),

    /// Error generated by the core library.
    #[error(transparent)]
    Core(#[from] sos_core::Error),

    /// Error generated by the backend library.
    #[error(transparent)]
    Backend(#[from] sos_backend::Error),

    /*
    /// Error generated by the client storage library.
    #[error(transparent)]
    ClientStorage(#[from] sos_client_storage::Error),
    */
    /// Error generated by the backendcstorage.
    #[error(transparent)]
    BackendStorage(#[from] sos_backend::StorageError),

    /// Error generated by the sync library.
    #[error(transparent)]
    Sync(#[from] sos_sync::Error),

    /// Error generated by the account library.
    #[error(transparent)]
    Account(#[from] sos_account::Error),
}

/*
#[cfg(feature = "network-client")]
impl Error {
    /// Determine if this is a canceled error and
    /// whether the cancellation was triggered by the user.
    pub fn cancellation_reason(
        &self,
    ) -> Option<&crate::transfer::CancelReason> {
        let source = source_error(self);
        if let Some(err) = source.downcast_ref::<Error>() {
            if let Error::TransferCanceled(reason) = err {
                Some(reason)
            } else {
                None
            }
        } else {
            None
        }
    }
}

pub(crate) fn source_error<'a>(
    error: &'a (dyn StdError + 'static),
) -> &'a (dyn StdError + 'static) {
    let mut source = error;
    while let Some(next_source) = source.source() {
        source = next_source;
    }
    source
}

/// Error created communicating over the network.
#[derive(Debug, Error)]
pub enum NetworkError {
    /// Error generated when an unexpected response code is received.
    #[error("unexpected response status code {0}")]
    ResponseCode(StatusCode),

    /// Error generated when an unexpected response code is received.
    #[error("unexpected response {1} (code: {0})")]
    ResponseJson(StatusCode, Value),

    /// Error generated when an unexpected content type is returend.
    #[error("unexpected content type {0}, expected: {1}")]
    ContentType(String, String),
}

/// Error reply.
#[derive(Default, Serialize, Deserialize)]
#[serde(default)]
pub struct ErrorReply {
    /// Status code.
    code: u16,
    /// Data value.
    #[serde(skip_serializing_if = "Option::is_none")]
    value: Option<Value>,
    /// Error message.
    #[serde(skip_serializing_if = "Option::is_none")]
    message: Option<String>,
}

impl ErrorReply {
    /// New error reply with a message.
    pub fn new_message(
        status: StatusCode,
        message: impl std::fmt::Display,
    ) -> Self {
        Self {
            code: status.into(),
            message: Some(message.to_string()),
            ..Default::default()
        }
    }
}

impl From<NetworkError> for ErrorReply {
    fn from(value: NetworkError) -> Self {
        match value {
            NetworkError::ResponseCode(status) => ErrorReply {
                code: status.into(),
                ..Default::default()
            },
            NetworkError::ResponseJson(status, value) => ErrorReply {
                code: status.into(),
                value: Some(value),
                ..Default::default()
            },
            NetworkError::ContentType(_, _) => ErrorReply {
                code: StatusCode::BAD_REQUEST.into(),
                ..Default::default()
            },
        }
    }
}

/// Error created whan a conflict is detected.
#[derive(Debug, Error)]
pub enum ConflictError {
    /// Error generated when a soft conflict was detected.
    ///
    /// A soft conflict may be resolved by searching for a
    /// common ancestor commit and merging changes since
    /// the common ancestor commit.
    #[error("soft conflict")]
    Soft {
        /// Conflict information.
        conflict: MaybeConflict,
        /// Local information sent to the remote.
        local: SyncStatus,
        /// Remote information in the server reply.
        remote: SyncStatus,
    },

    /// Error generated when a hard conflict was detected.
    ///
    /// A hard conflict is triggered after a soft conflict
    /// attempted to scan proofs on a remote and was unable
    /// to find a common ancestor commit.
    #[error("hard conflict")]
    Hard,
}

impl AsConflict for Error {
    fn is_conflict(&self) -> bool {
        matches!(self, Error::Conflict(_))
    }

    fn is_hard_conflict(&self) -> bool {
        matches!(self, Error::Conflict(ConflictError::Hard))
    }

    fn take_conflict(self) -> Option<ConflictError> {
        match self {
            Self::Conflict(err) => Some(err),
            _ => None,
        }
    }
}
*/
